// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/discord-v1/discord-v1.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Discord_OnInit_FullMethodName              = "/proto.Discord/OnInit"
	Discord_OnCreateMessage_FullMethodName     = "/proto.Discord/OnCreateMessage"
	Discord_OnCreateInteraction_FullMethodName = "/proto.Discord/OnCreateInteraction"
	Discord_OnEvent_FullMethodName             = "/proto.Discord/OnEvent"
	Discord_ResponseMessage_FullMethodName     = "/proto.Discord/ResponseMessage"
	Discord_ResponseInteraction_FullMethodName = "/proto.Discord/ResponseInteraction"
	Discord_EditMessage_FullMethodName         = "/proto.Discord/EditMessage"
	Discord_EditInteraction_FullMethodName     = "/proto.Discord/EditInteraction"
)

// DiscordClient is the client API for Discord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscordClient interface {
	// Runtime -> Module
	OnInit(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InitResponse, error)
	OnCreateMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OnCreateInteraction(ctx context.Context, in *OnCreateInteractionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OnEvent(ctx context.Context, in *OnEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Module -> Runtime
	ResponseMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatIdResponse, error)
	ResponseInteraction(ctx context.Context, in *ResponseInteractionRequest, opts ...grpc.CallOption) (*ChatIdResponse, error)
	EditMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EditInteraction(ctx context.Context, in *EditInteractionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type discordClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscordClient(cc grpc.ClientConnInterface) DiscordClient {
	return &discordClient{cc}
}

func (c *discordClient) OnInit(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, Discord_OnInit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) OnCreateMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Discord_OnCreateMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) OnCreateInteraction(ctx context.Context, in *OnCreateInteractionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Discord_OnCreateInteraction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) OnEvent(ctx context.Context, in *OnEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Discord_OnEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) ResponseMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatIdResponse, error) {
	out := new(ChatIdResponse)
	err := c.cc.Invoke(ctx, Discord_ResponseMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) ResponseInteraction(ctx context.Context, in *ResponseInteractionRequest, opts ...grpc.CallOption) (*ChatIdResponse, error) {
	out := new(ChatIdResponse)
	err := c.cc.Invoke(ctx, Discord_ResponseInteraction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) EditMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Discord_EditMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) EditInteraction(ctx context.Context, in *EditInteractionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Discord_EditInteraction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscordServer is the server API for Discord service.
// All implementations should embed UnimplementedDiscordServer
// for forward compatibility
type DiscordServer interface {
	// Runtime -> Module
	OnInit(context.Context, *emptypb.Empty) (*InitResponse, error)
	OnCreateMessage(context.Context, *ChatMessage) (*emptypb.Empty, error)
	OnCreateInteraction(context.Context, *OnCreateInteractionRequest) (*emptypb.Empty, error)
	OnEvent(context.Context, *OnEventRequest) (*emptypb.Empty, error)
	// Module -> Runtime
	ResponseMessage(context.Context, *ChatMessage) (*ChatIdResponse, error)
	ResponseInteraction(context.Context, *ResponseInteractionRequest) (*ChatIdResponse, error)
	EditMessage(context.Context, *ChatMessage) (*emptypb.Empty, error)
	EditInteraction(context.Context, *EditInteractionRequest) (*emptypb.Empty, error)
}

// UnimplementedDiscordServer should be embedded to have forward compatible implementations.
type UnimplementedDiscordServer struct {
}

func (UnimplementedDiscordServer) OnInit(context.Context, *emptypb.Empty) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnInit not implemented")
}
func (UnimplementedDiscordServer) OnCreateMessage(context.Context, *ChatMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnCreateMessage not implemented")
}
func (UnimplementedDiscordServer) OnCreateInteraction(context.Context, *OnCreateInteractionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnCreateInteraction not implemented")
}
func (UnimplementedDiscordServer) OnEvent(context.Context, *OnEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnEvent not implemented")
}
func (UnimplementedDiscordServer) ResponseMessage(context.Context, *ChatMessage) (*ChatIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResponseMessage not implemented")
}
func (UnimplementedDiscordServer) ResponseInteraction(context.Context, *ResponseInteractionRequest) (*ChatIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResponseInteraction not implemented")
}
func (UnimplementedDiscordServer) EditMessage(context.Context, *ChatMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMessage not implemented")
}
func (UnimplementedDiscordServer) EditInteraction(context.Context, *EditInteractionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditInteraction not implemented")
}

// UnsafeDiscordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscordServer will
// result in compilation errors.
type UnsafeDiscordServer interface {
	mustEmbedUnimplementedDiscordServer()
}

func RegisterDiscordServer(s grpc.ServiceRegistrar, srv DiscordServer) {
	s.RegisterService(&Discord_ServiceDesc, srv)
}

func _Discord_OnInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).OnInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Discord_OnInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).OnInit(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_OnCreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).OnCreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Discord_OnCreateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).OnCreateMessage(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_OnCreateInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnCreateInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).OnCreateInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Discord_OnCreateInteraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).OnCreateInteraction(ctx, req.(*OnCreateInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_OnEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).OnEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Discord_OnEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).OnEvent(ctx, req.(*OnEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_ResponseMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).ResponseMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Discord_ResponseMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).ResponseMessage(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_ResponseInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResponseInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).ResponseInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Discord_ResponseInteraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).ResponseInteraction(ctx, req.(*ResponseInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_EditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).EditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Discord_EditMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).EditMessage(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_EditInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).EditInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Discord_EditInteraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).EditInteraction(ctx, req.(*EditInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Discord_ServiceDesc is the grpc.ServiceDesc for Discord service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Discord_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Discord",
	HandlerType: (*DiscordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnInit",
			Handler:    _Discord_OnInit_Handler,
		},
		{
			MethodName: "OnCreateMessage",
			Handler:    _Discord_OnCreateMessage_Handler,
		},
		{
			MethodName: "OnCreateInteraction",
			Handler:    _Discord_OnCreateInteraction_Handler,
		},
		{
			MethodName: "OnEvent",
			Handler:    _Discord_OnEvent_Handler,
		},
		{
			MethodName: "ResponseMessage",
			Handler:    _Discord_ResponseMessage_Handler,
		},
		{
			MethodName: "ResponseInteraction",
			Handler:    _Discord_ResponseInteraction_Handler,
		},
		{
			MethodName: "EditMessage",
			Handler:    _Discord_EditMessage_Handler,
		},
		{
			MethodName: "EditInteraction",
			Handler:    _Discord_EditInteraction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/discord-v1/discord-v1.proto",
}
