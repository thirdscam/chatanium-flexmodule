// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/discord-v1/hook.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Hook_OnInit_FullMethodName              = "/discord_v1.Hook/OnInit"
	Hook_OnCreateMessage_FullMethodName     = "/discord_v1.Hook/OnCreateMessage"
	Hook_OnCreateInteraction_FullMethodName = "/discord_v1.Hook/OnCreateInteraction"
	Hook_OnEvent_FullMethodName             = "/discord_v1.Hook/OnEvent"
)

// HookClient is the client API for Hook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HookClient interface {
	// Runtime -> Module
	OnInit(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InitResponse, error)
	OnCreateMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OnCreateInteraction(ctx context.Context, in *OnCreateInteractionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OnEvent(ctx context.Context, in *OnEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type hookClient struct {
	cc grpc.ClientConnInterface
}

func NewHookClient(cc grpc.ClientConnInterface) HookClient {
	return &hookClient{cc}
}

func (c *hookClient) OnInit(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, Hook_OnInit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookClient) OnCreateMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Hook_OnCreateMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookClient) OnCreateInteraction(ctx context.Context, in *OnCreateInteractionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Hook_OnCreateInteraction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookClient) OnEvent(ctx context.Context, in *OnEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Hook_OnEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HookServer is the server API for Hook service.
// All implementations should embed UnimplementedHookServer
// for forward compatibility
type HookServer interface {
	// Runtime -> Module
	OnInit(context.Context, *emptypb.Empty) (*InitResponse, error)
	OnCreateMessage(context.Context, *ChatMessage) (*emptypb.Empty, error)
	OnCreateInteraction(context.Context, *OnCreateInteractionRequest) (*emptypb.Empty, error)
	OnEvent(context.Context, *OnEventRequest) (*emptypb.Empty, error)
}

// UnimplementedHookServer should be embedded to have forward compatible implementations.
type UnimplementedHookServer struct {
}

func (UnimplementedHookServer) OnInit(context.Context, *emptypb.Empty) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnInit not implemented")
}
func (UnimplementedHookServer) OnCreateMessage(context.Context, *ChatMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnCreateMessage not implemented")
}
func (UnimplementedHookServer) OnCreateInteraction(context.Context, *OnCreateInteractionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnCreateInteraction not implemented")
}
func (UnimplementedHookServer) OnEvent(context.Context, *OnEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnEvent not implemented")
}

// UnsafeHookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HookServer will
// result in compilation errors.
type UnsafeHookServer interface {
	mustEmbedUnimplementedHookServer()
}

func RegisterHookServer(s grpc.ServiceRegistrar, srv HookServer) {
	s.RegisterService(&Hook_ServiceDesc, srv)
}

func _Hook_OnInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServer).OnInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hook_OnInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServer).OnInit(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hook_OnCreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServer).OnCreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hook_OnCreateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServer).OnCreateMessage(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hook_OnCreateInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnCreateInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServer).OnCreateInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hook_OnCreateInteraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServer).OnCreateInteraction(ctx, req.(*OnCreateInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hook_OnEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServer).OnEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hook_OnEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServer).OnEvent(ctx, req.(*OnEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hook_ServiceDesc is the grpc.ServiceDesc for Hook service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hook_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "discord_v1.Hook",
	HandlerType: (*HookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnInit",
			Handler:    _Hook_OnInit_Handler,
		},
		{
			MethodName: "OnCreateMessage",
			Handler:    _Hook_OnCreateMessage_Handler,
		},
		{
			MethodName: "OnCreateInteraction",
			Handler:    _Hook_OnCreateInteraction_Handler,
		},
		{
			MethodName: "OnEvent",
			Handler:    _Hook_OnEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/discord-v1/hook.proto",
}
