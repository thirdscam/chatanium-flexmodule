// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: discord-v1/discordgo.proto

package discord_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MessageType is the type of Message
// https://discord.com/developers/docs/resources/channel#message-object-message-types
type MessageType int32

const (
	MessageType_MESSAGE_TYPE_DEFAULT                                    MessageType = 0
	MessageType_MESSAGE_TYPE_RECIPIENT_ADD                              MessageType = 1
	MessageType_MESSAGE_TYPE_RECIPIENT_REMOVE                           MessageType = 2
	MessageType_MESSAGE_TYPE_CALL                                       MessageType = 3
	MessageType_MESSAGE_TYPE_CHANNEL_NAME_CHANGE                        MessageType = 4
	MessageType_MESSAGE_TYPE_CHANNEL_ICON_CHANGE                        MessageType = 5
	MessageType_MESSAGE_TYPE_CHANNEL_PINNED_MESSAGE                     MessageType = 6
	MessageType_MESSAGE_TYPE_GUILD_MEMBER_JOIN                          MessageType = 7
	MessageType_MESSAGE_TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION            MessageType = 8
	MessageType_MESSAGE_TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_ONE   MessageType = 9
	MessageType_MESSAGE_TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_TWO   MessageType = 10
	MessageType_MESSAGE_TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_THREE MessageType = 11
	MessageType_MESSAGE_TYPE_CHANNEL_FOLLOW_ADD                         MessageType = 12
	MessageType_MESSAGE_TYPE_GUILD_DISCOVERY_DISQUALIFIED               MessageType = 14
	MessageType_MESSAGE_TYPE_GUILD_DISCOVERY_REQUALIFIED                MessageType = 15
	MessageType_MESSAGE_TYPE_THREAD_CREATED                             MessageType = 18
	MessageType_MESSAGE_TYPE_REPLY                                      MessageType = 19
	MessageType_MESSAGE_TYPE_CHAT_INPUT_COMMAND                         MessageType = 20
	MessageType_MESSAGE_TYPE_THREAD_STARTER_MESSAGE                     MessageType = 21
	MessageType_MESSAGE_TYPE_CONTEXT_MENU_COMMAND                       MessageType = 23
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:  "MESSAGE_TYPE_DEFAULT",
		1:  "MESSAGE_TYPE_RECIPIENT_ADD",
		2:  "MESSAGE_TYPE_RECIPIENT_REMOVE",
		3:  "MESSAGE_TYPE_CALL",
		4:  "MESSAGE_TYPE_CHANNEL_NAME_CHANGE",
		5:  "MESSAGE_TYPE_CHANNEL_ICON_CHANGE",
		6:  "MESSAGE_TYPE_CHANNEL_PINNED_MESSAGE",
		7:  "MESSAGE_TYPE_GUILD_MEMBER_JOIN",
		8:  "MESSAGE_TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION",
		9:  "MESSAGE_TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_ONE",
		10: "MESSAGE_TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_TWO",
		11: "MESSAGE_TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_THREE",
		12: "MESSAGE_TYPE_CHANNEL_FOLLOW_ADD",
		14: "MESSAGE_TYPE_GUILD_DISCOVERY_DISQUALIFIED",
		15: "MESSAGE_TYPE_GUILD_DISCOVERY_REQUALIFIED",
		18: "MESSAGE_TYPE_THREAD_CREATED",
		19: "MESSAGE_TYPE_REPLY",
		20: "MESSAGE_TYPE_CHAT_INPUT_COMMAND",
		21: "MESSAGE_TYPE_THREAD_STARTER_MESSAGE",
		23: "MESSAGE_TYPE_CONTEXT_MENU_COMMAND",
	}
	MessageType_value = map[string]int32{
		"MESSAGE_TYPE_DEFAULT":                                    0,
		"MESSAGE_TYPE_RECIPIENT_ADD":                              1,
		"MESSAGE_TYPE_RECIPIENT_REMOVE":                           2,
		"MESSAGE_TYPE_CALL":                                       3,
		"MESSAGE_TYPE_CHANNEL_NAME_CHANGE":                        4,
		"MESSAGE_TYPE_CHANNEL_ICON_CHANGE":                        5,
		"MESSAGE_TYPE_CHANNEL_PINNED_MESSAGE":                     6,
		"MESSAGE_TYPE_GUILD_MEMBER_JOIN":                          7,
		"MESSAGE_TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION":            8,
		"MESSAGE_TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_ONE":   9,
		"MESSAGE_TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_TWO":   10,
		"MESSAGE_TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_THREE": 11,
		"MESSAGE_TYPE_CHANNEL_FOLLOW_ADD":                         12,
		"MESSAGE_TYPE_GUILD_DISCOVERY_DISQUALIFIED":               14,
		"MESSAGE_TYPE_GUILD_DISCOVERY_REQUALIFIED":                15,
		"MESSAGE_TYPE_THREAD_CREATED":                             18,
		"MESSAGE_TYPE_REPLY":                                      19,
		"MESSAGE_TYPE_CHAT_INPUT_COMMAND":                         20,
		"MESSAGE_TYPE_THREAD_STARTER_MESSAGE":                     21,
		"MESSAGE_TYPE_CONTEXT_MENU_COMMAND":                       23,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_discordgo_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_discord_v1_discordgo_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{0}
}

// MessageFlags is the flags of "message" (see MessageFlags* consts)
// https://discord.com/developers/docs/resources/channel#message-object-message-flags
type MessageFlags int32

const (
	MessageFlags_MESSAGE_FLAGS_CROSS_POSTED                           MessageFlags = 0  // This message has been published to subscribed channels (via Channel Following).
	MessageFlags_MESSAGE_FLAGS_IS_CROSS_POSTED                        MessageFlags = 1  // this message originated from a message in another channel (via Channel Following).
	MessageFlags_MESSAGE_FLAGS_SUPPRESS_EMBEDS                        MessageFlags = 2  // do not include any embeds when serializing this message.
	MessageFlags_MESSAGE_FLAGS_SOURCE_MESSAGE_DELETED                 MessageFlags = 3  // the source message for this crosspost has been deleted (via Channel Following).
	MessageFlags_MESSAGE_FLAGS_URGENT                                 MessageFlags = 4  // this message came from the urgent message system.
	MessageFlags_MESSAGE_FLAGS_HAS_THREAD                             MessageFlags = 5  // this message has an associated thread, with the same id as the message.
	MessageFlags_MESSAGE_FLAGS_EPHEMERAL                              MessageFlags = 6  // this message is only visible to the user who invoked the Interaction.
	MessageFlags_MESSAGE_FLAGS_LOADING                                MessageFlags = 7  // this message is an Interaction Response and the bot is "thinking".
	MessageFlags_MESSAGE_FLAGS_FAILED_TO_MENTION_SOME_ROLES_IN_THREAD MessageFlags = 8  // this message failed to mention some roles and add their members to the thread.
	MessageFlags_MESSAGE_FLAGS_SUPPRESS_NOTIFICATIONS                 MessageFlags = 12 // this message will not trigger push and desktop notifications.
	MessageFlags_MESSAGE_FLAGS_IS_VOICE_MESSAGE                       MessageFlags = 13 // this message is a voice message.
)

// Enum value maps for MessageFlags.
var (
	MessageFlags_name = map[int32]string{
		0:  "MESSAGE_FLAGS_CROSS_POSTED",
		1:  "MESSAGE_FLAGS_IS_CROSS_POSTED",
		2:  "MESSAGE_FLAGS_SUPPRESS_EMBEDS",
		3:  "MESSAGE_FLAGS_SOURCE_MESSAGE_DELETED",
		4:  "MESSAGE_FLAGS_URGENT",
		5:  "MESSAGE_FLAGS_HAS_THREAD",
		6:  "MESSAGE_FLAGS_EPHEMERAL",
		7:  "MESSAGE_FLAGS_LOADING",
		8:  "MESSAGE_FLAGS_FAILED_TO_MENTION_SOME_ROLES_IN_THREAD",
		12: "MESSAGE_FLAGS_SUPPRESS_NOTIFICATIONS",
		13: "MESSAGE_FLAGS_IS_VOICE_MESSAGE",
	}
	MessageFlags_value = map[string]int32{
		"MESSAGE_FLAGS_CROSS_POSTED":                           0,
		"MESSAGE_FLAGS_IS_CROSS_POSTED":                        1,
		"MESSAGE_FLAGS_SUPPRESS_EMBEDS":                        2,
		"MESSAGE_FLAGS_SOURCE_MESSAGE_DELETED":                 3,
		"MESSAGE_FLAGS_URGENT":                                 4,
		"MESSAGE_FLAGS_HAS_THREAD":                             5,
		"MESSAGE_FLAGS_EPHEMERAL":                              6,
		"MESSAGE_FLAGS_LOADING":                                7,
		"MESSAGE_FLAGS_FAILED_TO_MENTION_SOME_ROLES_IN_THREAD": 8,
		"MESSAGE_FLAGS_SUPPRESS_NOTIFICATIONS":                 12,
		"MESSAGE_FLAGS_IS_VOICE_MESSAGE":                       13,
	}
)

func (x MessageFlags) Enum() *MessageFlags {
	p := new(MessageFlags)
	*p = x
	return p
}

func (x MessageFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_discordgo_proto_enumTypes[1].Descriptor()
}

func (MessageFlags) Type() protoreflect.EnumType {
	return &file_discord_v1_discordgo_proto_enumTypes[1]
}

func (x MessageFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageFlags.Descriptor instead.
func (MessageFlags) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{1}
}

// AllowedMentionType describes the types of mentions used
// in the MessageAllowedMentions type.
type AllowedMentionType int32

const (
	AllowedMentionType_ALLOWED_MENTION_TYPE_ROLES    AllowedMentionType = 0
	AllowedMentionType_ALLOWED_MENTION_TYPE_USERS    AllowedMentionType = 1
	AllowedMentionType_ALLOWED_MENTION_TYPE_EVERYONE AllowedMentionType = 2
)

// Enum value maps for AllowedMentionType.
var (
	AllowedMentionType_name = map[int32]string{
		0: "ALLOWED_MENTION_TYPE_ROLES",
		1: "ALLOWED_MENTION_TYPE_USERS",
		2: "ALLOWED_MENTION_TYPE_EVERYONE",
	}
	AllowedMentionType_value = map[string]int32{
		"ALLOWED_MENTION_TYPE_ROLES":    0,
		"ALLOWED_MENTION_TYPE_USERS":    1,
		"ALLOWED_MENTION_TYPE_EVERYONE": 2,
	}
)

func (x AllowedMentionType) Enum() *AllowedMentionType {
	p := new(AllowedMentionType)
	*p = x
	return p
}

func (x AllowedMentionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllowedMentionType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_discordgo_proto_enumTypes[2].Descriptor()
}

func (AllowedMentionType) Type() protoreflect.EnumType {
	return &file_discord_v1_discordgo_proto_enumTypes[2]
}

func (x AllowedMentionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllowedMentionType.Descriptor instead.
func (AllowedMentionType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{2}
}

// EmbedType is the type of embed
// https://discord.com/developers/docs/resources/channel#embed-object-embed-types
type EmbedType int32

const (
	EmbedType_EMBED_TYPE_RICH    EmbedType = 0
	EmbedType_EMBED_TYPE_IMAGE   EmbedType = 1
	EmbedType_EMBED_TYPE_VIDEO   EmbedType = 2
	EmbedType_EMBED_TYPE_GIFV    EmbedType = 3
	EmbedType_EMBED_TYPE_ARTICLE EmbedType = 4
	EmbedType_EMBED_TYPE_LINK    EmbedType = 5
)

// Enum value maps for EmbedType.
var (
	EmbedType_name = map[int32]string{
		0: "EMBED_TYPE_RICH",
		1: "EMBED_TYPE_IMAGE",
		2: "EMBED_TYPE_VIDEO",
		3: "EMBED_TYPE_GIFV",
		4: "EMBED_TYPE_ARTICLE",
		5: "EMBED_TYPE_LINK",
	}
	EmbedType_value = map[string]int32{
		"EMBED_TYPE_RICH":    0,
		"EMBED_TYPE_IMAGE":   1,
		"EMBED_TYPE_VIDEO":   2,
		"EMBED_TYPE_GIFV":    3,
		"EMBED_TYPE_ARTICLE": 4,
		"EMBED_TYPE_LINK":    5,
	}
)

func (x EmbedType) Enum() *EmbedType {
	p := new(EmbedType)
	*p = x
	return p
}

func (x EmbedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmbedType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_discordgo_proto_enumTypes[3].Descriptor()
}

func (EmbedType) Type() protoreflect.EnumType {
	return &file_discord_v1_discordgo_proto_enumTypes[3]
}

func (x EmbedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmbedType.Descriptor instead.
func (EmbedType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{3}
}

// MessageActivityType is the type of message activity
type MessageActivityType int32

const (
	MessageActivityType_MESSAGE_ACTIVITY_TYPE_JOIN         MessageActivityType = 0
	MessageActivityType_MESSAGE_ACTIVITY_TYPE_SPECTATE     MessageActivityType = 1
	MessageActivityType_MESSAGE_ACTIVITY_TYPE_LISTEN       MessageActivityType = 2
	MessageActivityType_MESSAGE_ACTIVITY_TYPE_JOIN_REQUEST MessageActivityType = 3
)

// Enum value maps for MessageActivityType.
var (
	MessageActivityType_name = map[int32]string{
		0: "MESSAGE_ACTIVITY_TYPE_JOIN",
		1: "MESSAGE_ACTIVITY_TYPE_SPECTATE",
		2: "MESSAGE_ACTIVITY_TYPE_LISTEN",
		3: "MESSAGE_ACTIVITY_TYPE_JOIN_REQUEST",
	}
	MessageActivityType_value = map[string]int32{
		"MESSAGE_ACTIVITY_TYPE_JOIN":         0,
		"MESSAGE_ACTIVITY_TYPE_SPECTATE":     1,
		"MESSAGE_ACTIVITY_TYPE_LISTEN":       2,
		"MESSAGE_ACTIVITY_TYPE_JOIN_REQUEST": 3,
	}
)

func (x MessageActivityType) Enum() *MessageActivityType {
	p := new(MessageActivityType)
	*p = x
	return p
}

func (x MessageActivityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageActivityType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_discordgo_proto_enumTypes[4].Descriptor()
}

func (MessageActivityType) Type() protoreflect.EnumType {
	return &file_discord_v1_discordgo_proto_enumTypes[4]
}

func (x MessageActivityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageActivityType.Descriptor instead.
func (MessageActivityType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{4}
}

// MessageReferenceType is a type of MessageReference
type MessageReferenceType int32

const (
	MessageReferenceType_MESSAGE_REFERENCE_TYPE_DEFAULT MessageReferenceType = 0
	MessageReferenceType_MESSAGE_REFERENCE_TYPE_FORWARD MessageReferenceType = 1
)

// Enum value maps for MessageReferenceType.
var (
	MessageReferenceType_name = map[int32]string{
		0: "MESSAGE_REFERENCE_TYPE_DEFAULT",
		1: "MESSAGE_REFERENCE_TYPE_FORWARD",
	}
	MessageReferenceType_value = map[string]int32{
		"MESSAGE_REFERENCE_TYPE_DEFAULT": 0,
		"MESSAGE_REFERENCE_TYPE_FORWARD": 1,
	}
)

func (x MessageReferenceType) Enum() *MessageReferenceType {
	p := new(MessageReferenceType)
	*p = x
	return p
}

func (x MessageReferenceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageReferenceType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_discordgo_proto_enumTypes[5].Descriptor()
}

func (MessageReferenceType) Type() protoreflect.EnumType {
	return &file_discord_v1_discordgo_proto_enumTypes[5]
}

func (x MessageReferenceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageReferenceType.Descriptor instead.
func (MessageReferenceType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{5}
}

type UserFlags int32

const (
	// Valid UserFlags values
	UserFlags_USER_FLAG_UNSPECIFIED                 UserFlags = 0       // Default value, good practice to include
	UserFlags_USER_FLAG_DISCORD_EMPLOYEE            UserFlags = 1       // Corresponds to 1 << 0
	UserFlags_USER_FLAG_DISCORD_PARTNER             UserFlags = 2       // Corresponds to 1 << 1
	UserFlags_USER_FLAG_HYPE_SQUAD_EVENTS           UserFlags = 4       // Corresponds to 1 << 2
	UserFlags_USER_FLAG_BUG_HUNTER_LEVEL_1          UserFlags = 8       // Corresponds to 1 << 3
	UserFlags_USER_FLAG_HOUSE_BRAVERY               UserFlags = 64      // Corresponds to 1 << 6
	UserFlags_USER_FLAG_HOUSE_BRILLIANCE            UserFlags = 128     // Corresponds to 1 << 7
	UserFlags_USER_FLAG_HOUSE_BALANCE               UserFlags = 256     // Corresponds to 1 << 8
	UserFlags_USER_FLAG_EARLY_SUPPORTER             UserFlags = 512     // Corresponds to 1 << 9
	UserFlags_USER_FLAG_TEAM_USER                   UserFlags = 1024    // Corresponds to 1 << 10
	UserFlags_USER_FLAG_SYSTEM                      UserFlags = 4096    // Corresponds to 1 << 12
	UserFlags_USER_FLAG_BUG_HUNTER_LEVEL_2          UserFlags = 16384   // Corresponds to 1 << 14
	UserFlags_USER_FLAG_VERIFIED_BOT                UserFlags = 65536   // Corresponds to 1 << 16
	UserFlags_USER_FLAG_VERIFIED_BOT_DEVELOPER      UserFlags = 131072  // Corresponds to 1 << 17
	UserFlags_USER_FLAG_DISCORD_CERTIFIED_MODERATOR UserFlags = 262144  // Corresponds to 1 << 18
	UserFlags_USER_FLAG_BOT_HTTP_INTERACTIONS       UserFlags = 524288  // Corresponds to 1 << 19
	UserFlags_USER_FLAG_ACTIVE_BOT_DEVELOPER        UserFlags = 4194304 // Corresponds to 1 << 22
)

// Enum value maps for UserFlags.
var (
	UserFlags_name = map[int32]string{
		0:       "USER_FLAG_UNSPECIFIED",
		1:       "USER_FLAG_DISCORD_EMPLOYEE",
		2:       "USER_FLAG_DISCORD_PARTNER",
		4:       "USER_FLAG_HYPE_SQUAD_EVENTS",
		8:       "USER_FLAG_BUG_HUNTER_LEVEL_1",
		64:      "USER_FLAG_HOUSE_BRAVERY",
		128:     "USER_FLAG_HOUSE_BRILLIANCE",
		256:     "USER_FLAG_HOUSE_BALANCE",
		512:     "USER_FLAG_EARLY_SUPPORTER",
		1024:    "USER_FLAG_TEAM_USER",
		4096:    "USER_FLAG_SYSTEM",
		16384:   "USER_FLAG_BUG_HUNTER_LEVEL_2",
		65536:   "USER_FLAG_VERIFIED_BOT",
		131072:  "USER_FLAG_VERIFIED_BOT_DEVELOPER",
		262144:  "USER_FLAG_DISCORD_CERTIFIED_MODERATOR",
		524288:  "USER_FLAG_BOT_HTTP_INTERACTIONS",
		4194304: "USER_FLAG_ACTIVE_BOT_DEVELOPER",
	}
	UserFlags_value = map[string]int32{
		"USER_FLAG_UNSPECIFIED":                 0,
		"USER_FLAG_DISCORD_EMPLOYEE":            1,
		"USER_FLAG_DISCORD_PARTNER":             2,
		"USER_FLAG_HYPE_SQUAD_EVENTS":           4,
		"USER_FLAG_BUG_HUNTER_LEVEL_1":          8,
		"USER_FLAG_HOUSE_BRAVERY":               64,
		"USER_FLAG_HOUSE_BRILLIANCE":            128,
		"USER_FLAG_HOUSE_BALANCE":               256,
		"USER_FLAG_EARLY_SUPPORTER":             512,
		"USER_FLAG_TEAM_USER":                   1024,
		"USER_FLAG_SYSTEM":                      4096,
		"USER_FLAG_BUG_HUNTER_LEVEL_2":          16384,
		"USER_FLAG_VERIFIED_BOT":                65536,
		"USER_FLAG_VERIFIED_BOT_DEVELOPER":      131072,
		"USER_FLAG_DISCORD_CERTIFIED_MODERATOR": 262144,
		"USER_FLAG_BOT_HTTP_INTERACTIONS":       524288,
		"USER_FLAG_ACTIVE_BOT_DEVELOPER":        4194304,
	}
)

func (x UserFlags) Enum() *UserFlags {
	p := new(UserFlags)
	*p = x
	return p
}

func (x UserFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_discordgo_proto_enumTypes[6].Descriptor()
}

func (UserFlags) Type() protoreflect.EnumType {
	return &file_discord_v1_discordgo_proto_enumTypes[6]
}

func (x UserFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserFlags.Descriptor instead.
func (UserFlags) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{6}
}

// UserPremiumType is the type of premium (nitro) subscription a user has.
type UserPremiumType int32

const (
	// Valid UserPremiumType values.
	UserPremiumType_USER_PREMIUM_TYPE_UNSPECIFIED   UserPremiumType = 0 // Default value
	UserPremiumType_USER_PREMIUM_TYPE_NONE          UserPremiumType = 0
	UserPremiumType_USER_PREMIUM_TYPE_NITRO_CLASSIC UserPremiumType = 1
	UserPremiumType_USER_PREMIUM_TYPE_NITRO         UserPremiumType = 2
	UserPremiumType_USER_PREMIUM_TYPE_NITRO_BASIC   UserPremiumType = 3
)

// Enum value maps for UserPremiumType.
var (
	UserPremiumType_name = map[int32]string{
		0: "USER_PREMIUM_TYPE_UNSPECIFIED",
		// Duplicate value: 0: "USER_PREMIUM_TYPE_NONE",
		1: "USER_PREMIUM_TYPE_NITRO_CLASSIC",
		2: "USER_PREMIUM_TYPE_NITRO",
		3: "USER_PREMIUM_TYPE_NITRO_BASIC",
	}
	UserPremiumType_value = map[string]int32{
		"USER_PREMIUM_TYPE_UNSPECIFIED":   0,
		"USER_PREMIUM_TYPE_NONE":          0,
		"USER_PREMIUM_TYPE_NITRO_CLASSIC": 1,
		"USER_PREMIUM_TYPE_NITRO":         2,
		"USER_PREMIUM_TYPE_NITRO_BASIC":   3,
	}
)

func (x UserPremiumType) Enum() *UserPremiumType {
	p := new(UserPremiumType)
	*p = x
	return p
}

func (x UserPremiumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserPremiumType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_discordgo_proto_enumTypes[7].Descriptor()
}

func (UserPremiumType) Type() protoreflect.EnumType {
	return &file_discord_v1_discordgo_proto_enumTypes[7]
}

func (x UserPremiumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserPremiumType.Descriptor instead.
func (UserPremiumType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{7}
}

// Corresponds to the Go enum MembershipState
type MembershipState int32

const (
	// Default value, should be 0
	MembershipState_MEMBERSHIP_STATE_UNKNOWN  MembershipState = 0
	MembershipState_MEMBERSHIP_STATE_INVITED  MembershipState = 1 // Corresponds to MembershipStateInvited
	MembershipState_MEMBERSHIP_STATE_ACCEPTED MembershipState = 2 // Corresponds to MembershipStateAccepted
)

// Enum value maps for MembershipState.
var (
	MembershipState_name = map[int32]string{
		0: "MEMBERSHIP_STATE_UNKNOWN",
		1: "MEMBERSHIP_STATE_INVITED",
		2: "MEMBERSHIP_STATE_ACCEPTED",
	}
	MembershipState_value = map[string]int32{
		"MEMBERSHIP_STATE_UNKNOWN":  0,
		"MEMBERSHIP_STATE_INVITED":  1,
		"MEMBERSHIP_STATE_ACCEPTED": 2,
	}
)

func (x MembershipState) Enum() *MembershipState {
	p := new(MembershipState)
	*p = x
	return p
}

func (x MembershipState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MembershipState) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_discordgo_proto_enumTypes[8].Descriptor()
}

func (MembershipState) Type() protoreflect.EnumType {
	return &file_discord_v1_discordgo_proto_enumTypes[8]
}

func (x MembershipState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MembershipState.Descriptor instead.
func (MembershipState) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{8}
}

// WebhookType is the type of Webhook
type WebhookType int32

const (
	// Default zero value - typically not used for specific types
	WebhookType_WEBHOOK_TYPE_UNSPECIFIED      WebhookType = 0
	WebhookType_WEBHOOK_TYPE_INCOMING         WebhookType = 1
	WebhookType_WEBHOOK_TYPE_CHANNEL_FOLLOWER WebhookType = 2
)

// Enum value maps for WebhookType.
var (
	WebhookType_name = map[int32]string{
		0: "WEBHOOK_TYPE_UNSPECIFIED",
		1: "WEBHOOK_TYPE_INCOMING",
		2: "WEBHOOK_TYPE_CHANNEL_FOLLOWER",
	}
	WebhookType_value = map[string]int32{
		"WEBHOOK_TYPE_UNSPECIFIED":      0,
		"WEBHOOK_TYPE_INCOMING":         1,
		"WEBHOOK_TYPE_CHANNEL_FOLLOWER": 2,
	}
)

func (x WebhookType) Enum() *WebhookType {
	p := new(WebhookType)
	*p = x
	return p
}

func (x WebhookType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebhookType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_discordgo_proto_enumTypes[9].Descriptor()
}

func (WebhookType) Type() protoreflect.EnumType {
	return &file_discord_v1_discordgo_proto_enumTypes[9]
}

func (x WebhookType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WebhookType.Descriptor instead.
func (WebhookType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{9}
}

// ChannelType represents the type of a channel. (Needs definition based on Discord API)
type ChannelType int32

const (
	ChannelType_CHANNEL_TYPE_UNKNOWN ChannelType = 0 // Default zero value
	// Add specific channel types based on Discord API, e.g.:
	ChannelType_CHANNEL_TYPE_GUILD_TEXT ChannelType = 1
	ChannelType_CHANNEL_TYPE_DM         ChannelType = 3 // ... other channel types ...
)

// Enum value maps for ChannelType.
var (
	ChannelType_name = map[int32]string{
		0: "CHANNEL_TYPE_UNKNOWN",
		1: "CHANNEL_TYPE_GUILD_TEXT",
		3: "CHANNEL_TYPE_DM",
	}
	ChannelType_value = map[string]int32{
		"CHANNEL_TYPE_UNKNOWN":    0,
		"CHANNEL_TYPE_GUILD_TEXT": 1,
		"CHANNEL_TYPE_DM":         3,
	}
)

func (x ChannelType) Enum() *ChannelType {
	p := new(ChannelType)
	*p = x
	return p
}

func (x ChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_discordgo_proto_enumTypes[10].Descriptor()
}

func (ChannelType) Type() protoreflect.EnumType {
	return &file_discord_v1_discordgo_proto_enumTypes[10]
}

func (x ChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelType.Descriptor instead.
func (ChannelType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{10}
}

// ComponentType represents the type of a message component. (Needs definition based on Discord API)
type ComponentType int32

const (
	ComponentType_COMPONENT_TYPE_UNKNOWN ComponentType = 0 // Default zero value
	// Add specific component types based on Discord API, e.g.:
	ComponentType_COMPONENT_TYPE_ACTION_ROW  ComponentType = 1
	ComponentType_COMPONENT_TYPE_BUTTON      ComponentType = 2
	ComponentType_COMPONENT_TYPE_SELECT_MENU ComponentType = 3
	ComponentType_COMPONENT_TYPE_TEXT_INPUT  ComponentType = 4 // ... other component types ...
)

// Enum value maps for ComponentType.
var (
	ComponentType_name = map[int32]string{
		0: "COMPONENT_TYPE_UNKNOWN",
		1: "COMPONENT_TYPE_ACTION_ROW",
		2: "COMPONENT_TYPE_BUTTON",
		3: "COMPONENT_TYPE_SELECT_MENU",
		4: "COMPONENT_TYPE_TEXT_INPUT",
	}
	ComponentType_value = map[string]int32{
		"COMPONENT_TYPE_UNKNOWN":     0,
		"COMPONENT_TYPE_ACTION_ROW":  1,
		"COMPONENT_TYPE_BUTTON":      2,
		"COMPONENT_TYPE_SELECT_MENU": 3,
		"COMPONENT_TYPE_TEXT_INPUT":  4,
	}
)

func (x ComponentType) Enum() *ComponentType {
	p := new(ComponentType)
	*p = x
	return p
}

func (x ComponentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComponentType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_discordgo_proto_enumTypes[11].Descriptor()
}

func (ComponentType) Type() protoreflect.EnumType {
	return &file_discord_v1_discordgo_proto_enumTypes[11]
}

func (x ComponentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComponentType.Descriptor instead.
func (ComponentType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{11}
}

// ApplicationCommandType represents the type of application command.
type ApplicationCommandType int32

const (
	ApplicationCommandType_APPLICATION_COMMAND_TYPE_UNKNOWN ApplicationCommandType = 0 // Default zero value
	// ChatApplicationCommand is default command type. They are slash commands (i.e. called directly from the chat).
	ApplicationCommandType_CHAT_APPLICATION_COMMAND ApplicationCommandType = 1
	// UserApplicationCommand adds command to user context menu.
	ApplicationCommandType_USER_APPLICATION_COMMAND ApplicationCommandType = 2
	// MessageApplicationCommand adds command to message context menu.
	ApplicationCommandType_MESSAGE_APPLICATION_COMMAND ApplicationCommandType = 3
)

// Enum value maps for ApplicationCommandType.
var (
	ApplicationCommandType_name = map[int32]string{
		0: "APPLICATION_COMMAND_TYPE_UNKNOWN",
		1: "CHAT_APPLICATION_COMMAND",
		2: "USER_APPLICATION_COMMAND",
		3: "MESSAGE_APPLICATION_COMMAND",
	}
	ApplicationCommandType_value = map[string]int32{
		"APPLICATION_COMMAND_TYPE_UNKNOWN": 0,
		"CHAT_APPLICATION_COMMAND":         1,
		"USER_APPLICATION_COMMAND":         2,
		"MESSAGE_APPLICATION_COMMAND":      3,
	}
)

func (x ApplicationCommandType) Enum() *ApplicationCommandType {
	p := new(ApplicationCommandType)
	*p = x
	return p
}

func (x ApplicationCommandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplicationCommandType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_discordgo_proto_enumTypes[12].Descriptor()
}

func (ApplicationCommandType) Type() protoreflect.EnumType {
	return &file_discord_v1_discordgo_proto_enumTypes[12]
}

func (x ApplicationCommandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplicationCommandType.Descriptor instead.
func (ApplicationCommandType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{12}
}

// InteractionContextType represents the context in which interaction can be used or was triggered from.
type InteractionContextType int32

const (
	InteractionContextType_INTERACTION_CONTEXT_UNKNOWN InteractionContextType = 0 // Default zero value
	// InteractionContextGuild indicates that interaction can be used within guilds.
	InteractionContextType_INTERACTION_CONTEXT_GUILD InteractionContextType = 1
	// InteractionContextBotDM indicates that interaction can be used within DMs with the bot.
	InteractionContextType_INTERACTION_CONTEXT_BOT_DM InteractionContextType = 2
	// InteractionContextPrivateChannel indicates that interaction can be used within group DMs and DMs with other users.
	InteractionContextType_INTERACTION_CONTEXT_PRIVATE_CHANNEL InteractionContextType = 3
)

// Enum value maps for InteractionContextType.
var (
	InteractionContextType_name = map[int32]string{
		0: "INTERACTION_CONTEXT_UNKNOWN",
		1: "INTERACTION_CONTEXT_GUILD",
		2: "INTERACTION_CONTEXT_BOT_DM",
		3: "INTERACTION_CONTEXT_PRIVATE_CHANNEL",
	}
	InteractionContextType_value = map[string]int32{
		"INTERACTION_CONTEXT_UNKNOWN":         0,
		"INTERACTION_CONTEXT_GUILD":           1,
		"INTERACTION_CONTEXT_BOT_DM":          2,
		"INTERACTION_CONTEXT_PRIVATE_CHANNEL": 3,
	}
)

func (x InteractionContextType) Enum() *InteractionContextType {
	p := new(InteractionContextType)
	*p = x
	return p
}

func (x InteractionContextType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InteractionContextType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_discordgo_proto_enumTypes[13].Descriptor()
}

func (InteractionContextType) Type() protoreflect.EnumType {
	return &file_discord_v1_discordgo_proto_enumTypes[13]
}

func (x InteractionContextType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InteractionContextType.Descriptor instead.
func (InteractionContextType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{13}
}

// ApplicationIntegrationType represents the type of integration. (Needs definition based on Discord API)
type ApplicationIntegrationType int32

const (
	ApplicationIntegrationType_APPLICATION_INTEGRATION_TYPE_UNKNOWN ApplicationIntegrationType = 0 // Use a suitable unknown value
	// Add specific integration types based on Discord API, e.g.:
	ApplicationIntegrationType_APPLICATION_INTEGRATION_TYPE_GUILD_INSTALL ApplicationIntegrationType = 1
	ApplicationIntegrationType_APPLICATION_INTEGRATION_TYPE_USER_INSTALL  ApplicationIntegrationType = 2
)

// Enum value maps for ApplicationIntegrationType.
var (
	ApplicationIntegrationType_name = map[int32]string{
		0: "APPLICATION_INTEGRATION_TYPE_UNKNOWN",
		1: "APPLICATION_INTEGRATION_TYPE_GUILD_INSTALL",
		2: "APPLICATION_INTEGRATION_TYPE_USER_INSTALL",
	}
	ApplicationIntegrationType_value = map[string]int32{
		"APPLICATION_INTEGRATION_TYPE_UNKNOWN":       0,
		"APPLICATION_INTEGRATION_TYPE_GUILD_INSTALL": 1,
		"APPLICATION_INTEGRATION_TYPE_USER_INSTALL":  2,
	}
)

func (x ApplicationIntegrationType) Enum() *ApplicationIntegrationType {
	p := new(ApplicationIntegrationType)
	*p = x
	return p
}

func (x ApplicationIntegrationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplicationIntegrationType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_discordgo_proto_enumTypes[14].Descriptor()
}

func (ApplicationIntegrationType) Type() protoreflect.EnumType {
	return &file_discord_v1_discordgo_proto_enumTypes[14]
}

func (x ApplicationIntegrationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplicationIntegrationType.Descriptor instead.
func (ApplicationIntegrationType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{14}
}

// ApplicationCommandOptionType indicates the type of a slash command's option.
type ApplicationCommandOptionType int32

const (
	ApplicationCommandOptionType_APPLICATION_COMMAND_OPTION_TYPE_UNKNOWN      ApplicationCommandOptionType = 0 // Default zero value
	ApplicationCommandOptionType_APPLICATION_COMMAND_OPTION_SUB_COMMAND       ApplicationCommandOptionType = 1
	ApplicationCommandOptionType_APPLICATION_COMMAND_OPTION_SUB_COMMAND_GROUP ApplicationCommandOptionType = 2
	ApplicationCommandOptionType_APPLICATION_COMMAND_OPTION_STRING            ApplicationCommandOptionType = 3
	ApplicationCommandOptionType_APPLICATION_COMMAND_OPTION_INTEGER           ApplicationCommandOptionType = 4
	ApplicationCommandOptionType_APPLICATION_COMMAND_OPTION_BOOLEAN           ApplicationCommandOptionType = 5
	ApplicationCommandOptionType_APPLICATION_COMMAND_OPTION_USER              ApplicationCommandOptionType = 6
	ApplicationCommandOptionType_APPLICATION_COMMAND_OPTION_CHANNEL           ApplicationCommandOptionType = 7
	ApplicationCommandOptionType_APPLICATION_COMMAND_OPTION_ROLE              ApplicationCommandOptionType = 8
	ApplicationCommandOptionType_APPLICATION_COMMAND_OPTION_MENTIONABLE       ApplicationCommandOptionType = 9
	ApplicationCommandOptionType_APPLICATION_COMMAND_OPTION_NUMBER            ApplicationCommandOptionType = 10
	ApplicationCommandOptionType_APPLICATION_COMMAND_OPTION_ATTACHMENT        ApplicationCommandOptionType = 11
)

// Enum value maps for ApplicationCommandOptionType.
var (
	ApplicationCommandOptionType_name = map[int32]string{
		0:  "APPLICATION_COMMAND_OPTION_TYPE_UNKNOWN",
		1:  "APPLICATION_COMMAND_OPTION_SUB_COMMAND",
		2:  "APPLICATION_COMMAND_OPTION_SUB_COMMAND_GROUP",
		3:  "APPLICATION_COMMAND_OPTION_STRING",
		4:  "APPLICATION_COMMAND_OPTION_INTEGER",
		5:  "APPLICATION_COMMAND_OPTION_BOOLEAN",
		6:  "APPLICATION_COMMAND_OPTION_USER",
		7:  "APPLICATION_COMMAND_OPTION_CHANNEL",
		8:  "APPLICATION_COMMAND_OPTION_ROLE",
		9:  "APPLICATION_COMMAND_OPTION_MENTIONABLE",
		10: "APPLICATION_COMMAND_OPTION_NUMBER",
		11: "APPLICATION_COMMAND_OPTION_ATTACHMENT",
	}
	ApplicationCommandOptionType_value = map[string]int32{
		"APPLICATION_COMMAND_OPTION_TYPE_UNKNOWN":      0,
		"APPLICATION_COMMAND_OPTION_SUB_COMMAND":       1,
		"APPLICATION_COMMAND_OPTION_SUB_COMMAND_GROUP": 2,
		"APPLICATION_COMMAND_OPTION_STRING":            3,
		"APPLICATION_COMMAND_OPTION_INTEGER":           4,
		"APPLICATION_COMMAND_OPTION_BOOLEAN":           5,
		"APPLICATION_COMMAND_OPTION_USER":              6,
		"APPLICATION_COMMAND_OPTION_CHANNEL":           7,
		"APPLICATION_COMMAND_OPTION_ROLE":              8,
		"APPLICATION_COMMAND_OPTION_MENTIONABLE":       9,
		"APPLICATION_COMMAND_OPTION_NUMBER":            10,
		"APPLICATION_COMMAND_OPTION_ATTACHMENT":        11,
	}
)

func (x ApplicationCommandOptionType) Enum() *ApplicationCommandOptionType {
	p := new(ApplicationCommandOptionType)
	*p = x
	return p
}

func (x ApplicationCommandOptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplicationCommandOptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_discordgo_proto_enumTypes[15].Descriptor()
}

func (ApplicationCommandOptionType) Type() protoreflect.EnumType {
	return &file_discord_v1_discordgo_proto_enumTypes[15]
}

func (x ApplicationCommandOptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplicationCommandOptionType.Descriptor instead.
func (ApplicationCommandOptionType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{15}
}

// ApplicationCommandPermissionType indicates whether a permission is user or role based.
type ApplicationCommandPermissionType int32

const (
	ApplicationCommandPermissionType_APPLICATION_COMMAND_PERMISSION_TYPE_UNKNOWN ApplicationCommandPermissionType = 0 // Default zero value
	ApplicationCommandPermissionType_APPLICATION_COMMAND_PERMISSION_TYPE_ROLE    ApplicationCommandPermissionType = 1
	ApplicationCommandPermissionType_APPLICATION_COMMAND_PERMISSION_TYPE_USER    ApplicationCommandPermissionType = 2
	ApplicationCommandPermissionType_APPLICATION_COMMAND_PERMISSION_TYPE_CHANNEL ApplicationCommandPermissionType = 3
)

// Enum value maps for ApplicationCommandPermissionType.
var (
	ApplicationCommandPermissionType_name = map[int32]string{
		0: "APPLICATION_COMMAND_PERMISSION_TYPE_UNKNOWN",
		1: "APPLICATION_COMMAND_PERMISSION_TYPE_ROLE",
		2: "APPLICATION_COMMAND_PERMISSION_TYPE_USER",
		3: "APPLICATION_COMMAND_PERMISSION_TYPE_CHANNEL",
	}
	ApplicationCommandPermissionType_value = map[string]int32{
		"APPLICATION_COMMAND_PERMISSION_TYPE_UNKNOWN": 0,
		"APPLICATION_COMMAND_PERMISSION_TYPE_ROLE":    1,
		"APPLICATION_COMMAND_PERMISSION_TYPE_USER":    2,
		"APPLICATION_COMMAND_PERMISSION_TYPE_CHANNEL": 3,
	}
)

func (x ApplicationCommandPermissionType) Enum() *ApplicationCommandPermissionType {
	p := new(ApplicationCommandPermissionType)
	*p = x
	return p
}

func (x ApplicationCommandPermissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplicationCommandPermissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_discordgo_proto_enumTypes[16].Descriptor()
}

func (ApplicationCommandPermissionType) Type() protoreflect.EnumType {
	return &file_discord_v1_discordgo_proto_enumTypes[16]
}

func (x ApplicationCommandPermissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplicationCommandPermissionType.Descriptor instead.
func (ApplicationCommandPermissionType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{16}
}

// InteractionType indicates the type of an interaction event.
type InteractionType int32

const (
	InteractionType_INTERACTION_TYPE_UNKNOWN                     InteractionType = 0 // Default zero value
	InteractionType_INTERACTION_PING                             InteractionType = 1
	InteractionType_INTERACTION_APPLICATION_COMMAND              InteractionType = 2
	InteractionType_INTERACTION_MESSAGE_COMPONENT                InteractionType = 3
	InteractionType_INTERACTION_APPLICATION_COMMAND_AUTOCOMPLETE InteractionType = 4
	InteractionType_INTERACTION_MODAL_SUBMIT                     InteractionType = 5
)

// Enum value maps for InteractionType.
var (
	InteractionType_name = map[int32]string{
		0: "INTERACTION_TYPE_UNKNOWN",
		1: "INTERACTION_PING",
		2: "INTERACTION_APPLICATION_COMMAND",
		3: "INTERACTION_MESSAGE_COMPONENT",
		4: "INTERACTION_APPLICATION_COMMAND_AUTOCOMPLETE",
		5: "INTERACTION_MODAL_SUBMIT",
	}
	InteractionType_value = map[string]int32{
		"INTERACTION_TYPE_UNKNOWN":                     0,
		"INTERACTION_PING":                             1,
		"INTERACTION_APPLICATION_COMMAND":              2,
		"INTERACTION_MESSAGE_COMPONENT":                3,
		"INTERACTION_APPLICATION_COMMAND_AUTOCOMPLETE": 4,
		"INTERACTION_MODAL_SUBMIT":                     5,
	}
)

func (x InteractionType) Enum() *InteractionType {
	p := new(InteractionType)
	*p = x
	return p
}

func (x InteractionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InteractionType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_discordgo_proto_enumTypes[17].Descriptor()
}

func (InteractionType) Type() protoreflect.EnumType {
	return &file_discord_v1_discordgo_proto_enumTypes[17]
}

func (x InteractionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InteractionType.Descriptor instead.
func (InteractionType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{17}
}

// InteractionResponseType is type of interaction response.
type InteractionResponseType int32

const (
	InteractionResponseType_INTERACTION_RESPONSE_TYPE_UNKNOWN InteractionResponseType = 0 // Default zero value
	// InteractionResponsePong is for ACK ping event.
	InteractionResponseType_INTERACTION_RESPONSE_PONG InteractionResponseType = 1
	// InteractionResponseChannelMessageWithSource is for responding with a message, showing the user's input.
	InteractionResponseType_INTERACTION_RESPONSE_CHANNEL_MESSAGE_WITH_SOURCE InteractionResponseType = 4
	// InteractionResponseDeferredChannelMessageWithSource acknowledges that the event was received, and that a follow-up will come later.
	InteractionResponseType_INTERACTION_RESPONSE_DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE InteractionResponseType = 5
	// InteractionResponseDeferredMessageUpdate acknowledges that the message component interaction event was received, and message will be updated later.
	InteractionResponseType_INTERACTION_RESPONSE_DEFERRED_MESSAGE_UPDATE InteractionResponseType = 6
	// InteractionResponseUpdateMessage is for updating the message to which message component was attached.
	InteractionResponseType_INTERACTION_RESPONSE_UPDATE_MESSAGE InteractionResponseType = 7
	// InteractionApplicationCommandAutocompleteResult shows autocompletion results. Autocomplete interaction only.
	InteractionResponseType_INTERACTION_APPLICATION_COMMAND_AUTOCOMPLETE_RESULT InteractionResponseType = 8
	// InteractionResponseModal is for responding to an interaction with a modal window.
	InteractionResponseType_INTERACTION_RESPONSE_MODAL InteractionResponseType = 9
)

// Enum value maps for InteractionResponseType.
var (
	InteractionResponseType_name = map[int32]string{
		0: "INTERACTION_RESPONSE_TYPE_UNKNOWN",
		1: "INTERACTION_RESPONSE_PONG",
		4: "INTERACTION_RESPONSE_CHANNEL_MESSAGE_WITH_SOURCE",
		5: "INTERACTION_RESPONSE_DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE",
		6: "INTERACTION_RESPONSE_DEFERRED_MESSAGE_UPDATE",
		7: "INTERACTION_RESPONSE_UPDATE_MESSAGE",
		8: "INTERACTION_APPLICATION_COMMAND_AUTOCOMPLETE_RESULT",
		9: "INTERACTION_RESPONSE_MODAL",
	}
	InteractionResponseType_value = map[string]int32{
		"INTERACTION_RESPONSE_TYPE_UNKNOWN":                         0,
		"INTERACTION_RESPONSE_PONG":                                 1,
		"INTERACTION_RESPONSE_CHANNEL_MESSAGE_WITH_SOURCE":          4,
		"INTERACTION_RESPONSE_DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE": 5,
		"INTERACTION_RESPONSE_DEFERRED_MESSAGE_UPDATE":              6,
		"INTERACTION_RESPONSE_UPDATE_MESSAGE":                       7,
		"INTERACTION_APPLICATION_COMMAND_AUTOCOMPLETE_RESULT":       8,
		"INTERACTION_RESPONSE_MODAL":                                9,
	}
)

func (x InteractionResponseType) Enum() *InteractionResponseType {
	p := new(InteractionResponseType)
	*p = x
	return p
}

func (x InteractionResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InteractionResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_discordgo_proto_enumTypes[18].Descriptor()
}

func (InteractionResponseType) Type() protoreflect.EnumType {
	return &file_discord_v1_discordgo_proto_enumTypes[18]
}

func (x InteractionResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InteractionResponseType.Descriptor instead.
func (InteractionResponseType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{18}
}

// A Message stores all data related to a specific Discord message.
type Message struct {
	state               protoimpl.MessageState      `protogen:"open.v1"`
	Id                  string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ChannelId           string                      `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	GuildId             string                      `protobuf:"bytes,3,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Content             string                      `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Timestamp           *timestamppb.Timestamp      `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	EditedTimestamp     *timestamppb.Timestamp      `protobuf:"bytes,6,opt,name=edited_timestamp,json=editedTimestamp,proto3" json:"edited_timestamp,omitempty"`
	MentionRoles        []string                    `protobuf:"bytes,7,rep,name=mention_roles,json=mentionRoles,proto3" json:"mention_roles,omitempty"`
	Tts                 bool                        `protobuf:"varint,8,opt,name=tts,proto3" json:"tts,omitempty"`
	MentionEveryone     bool                        `protobuf:"varint,9,opt,name=mention_everyone,json=mentionEveryone,proto3" json:"mention_everyone,omitempty"`
	Author              *User                       `protobuf:"bytes,10,opt,name=author,proto3" json:"author,omitempty"`
	Attachments         []*MessageAttachment        `protobuf:"bytes,11,rep,name=attachments,proto3" json:"attachments,omitempty"`
	Components          []*anypb.Any                `protobuf:"bytes,12,rep,name=components,proto3" json:"components,omitempty"` // Using Any for MessageComponent as it's an interface
	Embeds              []*MessageEmbed             `protobuf:"bytes,13,rep,name=embeds,proto3" json:"embeds,omitempty"`
	Mentions            []*User                     `protobuf:"bytes,14,rep,name=mentions,proto3" json:"mentions,omitempty"`
	Reactions           []*MessageReactions         `protobuf:"bytes,15,rep,name=reactions,proto3" json:"reactions,omitempty"`
	Pinned              bool                        `protobuf:"varint,16,opt,name=pinned,proto3" json:"pinned,omitempty"`
	Type                MessageType                 `protobuf:"varint,17,opt,name=type,proto3,enum=discord_v1.MessageType" json:"type,omitempty"`
	WebhookId           string                      `protobuf:"bytes,18,opt,name=webhook_id,json=webhookId,proto3" json:"webhook_id,omitempty"`
	Member              *Member                     `protobuf:"bytes,19,opt,name=member,proto3" json:"member,omitempty"`
	MentionChannels     []*Channel                  `protobuf:"bytes,20,rep,name=mention_channels,json=mentionChannels,proto3" json:"mention_channels,omitempty"`
	Activity            *MessageActivity            `protobuf:"bytes,21,opt,name=activity,proto3" json:"activity,omitempty"`
	Application         *MessageApplication         `protobuf:"bytes,22,opt,name=application,proto3" json:"application,omitempty"`
	MessageReference    *MessageReference           `protobuf:"bytes,23,opt,name=message_reference,json=messageReference,proto3" json:"message_reference,omitempty"`
	ReferencedMessage   *Message                    `protobuf:"bytes,24,opt,name=referenced_message,json=referencedMessage,proto3" json:"referenced_message,omitempty"`
	MessageSnapshots    []*MessageSnapshot          `protobuf:"bytes,25,rep,name=message_snapshots,json=messageSnapshots,proto3" json:"message_snapshots,omitempty"`
	Interaction         *MessageInteraction         `protobuf:"bytes,26,opt,name=interaction,proto3" json:"interaction,omitempty"` // Deprecated, use InteractionMetadata
	InteractionMetadata *MessageInteractionMetadata `protobuf:"bytes,27,opt,name=interaction_metadata,json=interactionMetadata,proto3" json:"interaction_metadata,omitempty"`
	Flags               MessageFlags                `protobuf:"varint,28,opt,name=flags,proto3,enum=discord_v1.MessageFlags" json:"flags,omitempty"`
	Thread              *Channel                    `protobuf:"bytes,29,opt,name=thread,proto3" json:"thread,omitempty"`
	StickerItems        []*StickerItem              `protobuf:"bytes,30,rep,name=sticker_items,json=stickerItems,proto3" json:"sticker_items,omitempty"`
	Poll                *Poll                       `protobuf:"bytes,31,opt,name=poll,proto3" json:"poll,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Message) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *Message) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Message) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Message) GetEditedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EditedTimestamp
	}
	return nil
}

func (x *Message) GetMentionRoles() []string {
	if x != nil {
		return x.MentionRoles
	}
	return nil
}

func (x *Message) GetTts() bool {
	if x != nil {
		return x.Tts
	}
	return false
}

func (x *Message) GetMentionEveryone() bool {
	if x != nil {
		return x.MentionEveryone
	}
	return false
}

func (x *Message) GetAuthor() *User {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Message) GetAttachments() []*MessageAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *Message) GetComponents() []*anypb.Any {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *Message) GetEmbeds() []*MessageEmbed {
	if x != nil {
		return x.Embeds
	}
	return nil
}

func (x *Message) GetMentions() []*User {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *Message) GetReactions() []*MessageReactions {
	if x != nil {
		return x.Reactions
	}
	return nil
}

func (x *Message) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

func (x *Message) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_MESSAGE_TYPE_DEFAULT
}

func (x *Message) GetWebhookId() string {
	if x != nil {
		return x.WebhookId
	}
	return ""
}

func (x *Message) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *Message) GetMentionChannels() []*Channel {
	if x != nil {
		return x.MentionChannels
	}
	return nil
}

func (x *Message) GetActivity() *MessageActivity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *Message) GetApplication() *MessageApplication {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *Message) GetMessageReference() *MessageReference {
	if x != nil {
		return x.MessageReference
	}
	return nil
}

func (x *Message) GetReferencedMessage() *Message {
	if x != nil {
		return x.ReferencedMessage
	}
	return nil
}

func (x *Message) GetMessageSnapshots() []*MessageSnapshot {
	if x != nil {
		return x.MessageSnapshots
	}
	return nil
}

func (x *Message) GetInteraction() *MessageInteraction {
	if x != nil {
		return x.Interaction
	}
	return nil
}

func (x *Message) GetInteractionMetadata() *MessageInteractionMetadata {
	if x != nil {
		return x.InteractionMetadata
	}
	return nil
}

func (x *Message) GetFlags() MessageFlags {
	if x != nil {
		return x.Flags
	}
	return MessageFlags_MESSAGE_FLAGS_CROSS_POSTED
}

func (x *Message) GetThread() *Channel {
	if x != nil {
		return x.Thread
	}
	return nil
}

func (x *Message) GetStickerItems() []*StickerItem {
	if x != nil {
		return x.StickerItems
	}
	return nil
}

func (x *Message) GetPoll() *Poll {
	if x != nil {
		return x.Poll
	}
	return nil
}

// File stores info about files you e.g. send in messages.
type File struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ContentType   string                 `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *File) Reset() {
	*x = File{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{1}
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

// MessageSend stores all parameters you can send with ChannelMessageSendComplex.
type MessageSend struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	Content         string                  `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Embeds          []*MessageEmbed         `protobuf:"bytes,2,rep,name=embeds,proto3" json:"embeds,omitempty"`
	Tts             bool                    `protobuf:"varint,3,opt,name=tts,proto3" json:"tts,omitempty"`
	Components      []*anypb.Any            `protobuf:"bytes,4,rep,name=components,proto3" json:"components,omitempty"` // Using Any for MessageComponent
	Files           []*File                 `protobuf:"bytes,5,rep,name=files,proto3" json:"files,omitempty"`
	AllowedMentions *MessageAllowedMentions `protobuf:"bytes,6,opt,name=allowed_mentions,json=allowedMentions,proto3" json:"allowed_mentions,omitempty"`
	Reference       *MessageReference       `protobuf:"bytes,7,opt,name=reference,proto3" json:"reference,omitempty"`
	StickerIds      []string                `protobuf:"bytes,8,rep,name=sticker_ids,json=stickerIds,proto3" json:"sticker_ids,omitempty"`
	Flags           MessageFlags            `protobuf:"varint,9,opt,name=flags,proto3,enum=discord_v1.MessageFlags" json:"flags,omitempty"`
	Poll            *Poll                   `protobuf:"bytes,10,opt,name=poll,proto3" json:"poll,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MessageSend) Reset() {
	*x = MessageSend{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSend) ProtoMessage() {}

func (x *MessageSend) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSend.ProtoReflect.Descriptor instead.
func (*MessageSend) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{2}
}

func (x *MessageSend) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MessageSend) GetEmbeds() []*MessageEmbed {
	if x != nil {
		return x.Embeds
	}
	return nil
}

func (x *MessageSend) GetTts() bool {
	if x != nil {
		return x.Tts
	}
	return false
}

func (x *MessageSend) GetComponents() []*anypb.Any {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *MessageSend) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *MessageSend) GetAllowedMentions() *MessageAllowedMentions {
	if x != nil {
		return x.AllowedMentions
	}
	return nil
}

func (x *MessageSend) GetReference() *MessageReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *MessageSend) GetStickerIds() []string {
	if x != nil {
		return x.StickerIds
	}
	return nil
}

func (x *MessageSend) GetFlags() MessageFlags {
	if x != nil {
		return x.Flags
	}
	return MessageFlags_MESSAGE_FLAGS_CROSS_POSTED
}

func (x *MessageSend) GetPoll() *Poll {
	if x != nil {
		return x.Poll
	}
	return nil
}

// MessageEdit is used to chain parameters via ChannelMessageEditComplex.
type MessageEdit struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	Content         string                  `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Components      []*anypb.Any            `protobuf:"bytes,2,rep,name=components,proto3" json:"components,omitempty"` // Using Any for MessageComponent
	Embeds          []*MessageEmbed         `protobuf:"bytes,3,rep,name=embeds,proto3" json:"embeds,omitempty"`
	AllowedMentions *MessageAllowedMentions `protobuf:"bytes,4,opt,name=allowed_mentions,json=allowedMentions,proto3" json:"allowed_mentions,omitempty"`
	Flags           MessageFlags            `protobuf:"varint,5,opt,name=flags,proto3,enum=discord_v1.MessageFlags" json:"flags,omitempty"`
	Files           []*File                 `protobuf:"bytes,6,rep,name=files,proto3" json:"files,omitempty"`
	Attachments     []*MessageAttachment    `protobuf:"bytes,7,rep,name=attachments,proto3" json:"attachments,omitempty"`
	Id              string                  `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
	Channel         string                  `protobuf:"bytes,9,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MessageEdit) Reset() {
	*x = MessageEdit{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEdit) ProtoMessage() {}

func (x *MessageEdit) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEdit.ProtoReflect.Descriptor instead.
func (*MessageEdit) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{3}
}

func (x *MessageEdit) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MessageEdit) GetComponents() []*anypb.Any {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *MessageEdit) GetEmbeds() []*MessageEmbed {
	if x != nil {
		return x.Embeds
	}
	return nil
}

func (x *MessageEdit) GetAllowedMentions() *MessageAllowedMentions {
	if x != nil {
		return x.AllowedMentions
	}
	return nil
}

func (x *MessageEdit) GetFlags() MessageFlags {
	if x != nil {
		return x.Flags
	}
	return MessageFlags_MESSAGE_FLAGS_CROSS_POSTED
}

func (x *MessageEdit) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *MessageEdit) GetAttachments() []*MessageAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *MessageEdit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MessageEdit) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

// MessageAllowedMentions allows the user to specify which mentions
// Discord is allowed to parse in this message.
type MessageAllowedMentions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Parse         []AllowedMentionType   `protobuf:"varint,1,rep,packed,name=parse,proto3,enum=discord_v1.AllowedMentionType" json:"parse,omitempty"`
	Roles         []string               `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
	Users         []string               `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
	RepliedUser   bool                   `protobuf:"varint,4,opt,name=replied_user,json=repliedUser,proto3" json:"replied_user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageAllowedMentions) Reset() {
	*x = MessageAllowedMentions{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageAllowedMentions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageAllowedMentions) ProtoMessage() {}

func (x *MessageAllowedMentions) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageAllowedMentions.ProtoReflect.Descriptor instead.
func (*MessageAllowedMentions) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{4}
}

func (x *MessageAllowedMentions) GetParse() []AllowedMentionType {
	if x != nil {
		return x.Parse
	}
	return nil
}

func (x *MessageAllowedMentions) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *MessageAllowedMentions) GetUsers() []string {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *MessageAllowedMentions) GetRepliedUser() bool {
	if x != nil {
		return x.RepliedUser
	}
	return false
}

// A MessageAttachment stores data for message attachments.
type MessageAttachment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	ProxyUrl      string                 `protobuf:"bytes,3,opt,name=proxy_url,json=proxyUrl,proto3" json:"proxy_url,omitempty"`
	Filename      string                 `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename,omitempty"`
	ContentType   string                 `protobuf:"bytes,5,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Width         int32                  `protobuf:"varint,6,opt,name=width,proto3" json:"width,omitempty"`
	Height        int32                  `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`
	Size          int32                  `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`
	Ephemeral     bool                   `protobuf:"varint,9,opt,name=ephemeral,proto3" json:"ephemeral,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageAttachment) Reset() {
	*x = MessageAttachment{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageAttachment) ProtoMessage() {}

func (x *MessageAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageAttachment.ProtoReflect.Descriptor instead.
func (*MessageAttachment) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{5}
}

func (x *MessageAttachment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MessageAttachment) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MessageAttachment) GetProxyUrl() string {
	if x != nil {
		return x.ProxyUrl
	}
	return ""
}

func (x *MessageAttachment) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *MessageAttachment) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *MessageAttachment) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MessageAttachment) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *MessageAttachment) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *MessageAttachment) GetEphemeral() bool {
	if x != nil {
		return x.Ephemeral
	}
	return false
}

// MessageEmbedFooter is a part of a MessageEmbed struct.
type MessageEmbedFooter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	IconUrl       string                 `protobuf:"bytes,2,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	ProxyIconUrl  string                 `protobuf:"bytes,3,opt,name=proxy_icon_url,json=proxyIconUrl,proto3" json:"proxy_icon_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageEmbedFooter) Reset() {
	*x = MessageEmbedFooter{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageEmbedFooter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEmbedFooter) ProtoMessage() {}

func (x *MessageEmbedFooter) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEmbedFooter.ProtoReflect.Descriptor instead.
func (*MessageEmbedFooter) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{6}
}

func (x *MessageEmbedFooter) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *MessageEmbedFooter) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *MessageEmbedFooter) GetProxyIconUrl() string {
	if x != nil {
		return x.ProxyIconUrl
	}
	return ""
}

// MessageEmbedImage is a part of a MessageEmbed struct.
type MessageEmbedImage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	ProxyUrl      string                 `protobuf:"bytes,2,opt,name=proxy_url,json=proxyUrl,proto3" json:"proxy_url,omitempty"`
	Width         int32                  `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height        int32                  `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageEmbedImage) Reset() {
	*x = MessageEmbedImage{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageEmbedImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEmbedImage) ProtoMessage() {}

func (x *MessageEmbedImage) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEmbedImage.ProtoReflect.Descriptor instead.
func (*MessageEmbedImage) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{7}
}

func (x *MessageEmbedImage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MessageEmbedImage) GetProxyUrl() string {
	if x != nil {
		return x.ProxyUrl
	}
	return ""
}

func (x *MessageEmbedImage) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MessageEmbedImage) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// MessageEmbedThumbnail is a part of a MessageEmbed struct.
type MessageEmbedThumbnail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	ProxyUrl      string                 `protobuf:"bytes,2,opt,name=proxy_url,json=proxyUrl,proto3" json:"proxy_url,omitempty"`
	Width         int32                  `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height        int32                  `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageEmbedThumbnail) Reset() {
	*x = MessageEmbedThumbnail{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageEmbedThumbnail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEmbedThumbnail) ProtoMessage() {}

func (x *MessageEmbedThumbnail) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEmbedThumbnail.ProtoReflect.Descriptor instead.
func (*MessageEmbedThumbnail) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{8}
}

func (x *MessageEmbedThumbnail) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MessageEmbedThumbnail) GetProxyUrl() string {
	if x != nil {
		return x.ProxyUrl
	}
	return ""
}

func (x *MessageEmbedThumbnail) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MessageEmbedThumbnail) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// MessageEmbedVideo is a part of a MessageEmbed struct.
type MessageEmbedVideo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Width         int32                  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height        int32                  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageEmbedVideo) Reset() {
	*x = MessageEmbedVideo{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageEmbedVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEmbedVideo) ProtoMessage() {}

func (x *MessageEmbedVideo) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEmbedVideo.ProtoReflect.Descriptor instead.
func (*MessageEmbedVideo) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{9}
}

func (x *MessageEmbedVideo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MessageEmbedVideo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MessageEmbedVideo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// MessageEmbedProvider is a part of a MessageEmbed struct.
type MessageEmbedProvider struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageEmbedProvider) Reset() {
	*x = MessageEmbedProvider{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageEmbedProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEmbedProvider) ProtoMessage() {}

func (x *MessageEmbedProvider) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEmbedProvider.ProtoReflect.Descriptor instead.
func (*MessageEmbedProvider) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{10}
}

func (x *MessageEmbedProvider) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MessageEmbedProvider) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// MessageEmbedAuthor is a part of a MessageEmbed struct.
type MessageEmbedAuthor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IconUrl       string                 `protobuf:"bytes,3,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	ProxyIconUrl  string                 `protobuf:"bytes,4,opt,name=proxy_icon_url,json=proxyIconUrl,proto3" json:"proxy_icon_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageEmbedAuthor) Reset() {
	*x = MessageEmbedAuthor{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageEmbedAuthor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEmbedAuthor) ProtoMessage() {}

func (x *MessageEmbedAuthor) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEmbedAuthor.ProtoReflect.Descriptor instead.
func (*MessageEmbedAuthor) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{11}
}

func (x *MessageEmbedAuthor) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MessageEmbedAuthor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageEmbedAuthor) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *MessageEmbedAuthor) GetProxyIconUrl() string {
	if x != nil {
		return x.ProxyIconUrl
	}
	return ""
}

// MessageEmbedField is a part of a MessageEmbed struct.
type MessageEmbedField struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Inline        bool                   `protobuf:"varint,3,opt,name=inline,proto3" json:"inline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageEmbedField) Reset() {
	*x = MessageEmbedField{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageEmbedField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEmbedField) ProtoMessage() {}

func (x *MessageEmbedField) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEmbedField.ProtoReflect.Descriptor instead.
func (*MessageEmbedField) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{12}
}

func (x *MessageEmbedField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageEmbedField) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *MessageEmbedField) GetInline() bool {
	if x != nil {
		return x.Inline
	}
	return false
}

// An MessageEmbed stores data for message embeds.
type MessageEmbed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Type          EmbedType              `protobuf:"varint,2,opt,name=type,proto3,enum=discord_v1.EmbedType" json:"type,omitempty"`
	Title         string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Timestamp     string                 `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Color         int32                  `protobuf:"varint,6,opt,name=color,proto3" json:"color,omitempty"`
	Footer        *MessageEmbedFooter    `protobuf:"bytes,7,opt,name=footer,proto3" json:"footer,omitempty"`
	Image         *MessageEmbedImage     `protobuf:"bytes,8,opt,name=image,proto3" json:"image,omitempty"`
	Thumbnail     *MessageEmbedThumbnail `protobuf:"bytes,9,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Video         *MessageEmbedVideo     `protobuf:"bytes,10,opt,name=video,proto3" json:"video,omitempty"`
	Provider      *MessageEmbedProvider  `protobuf:"bytes,11,opt,name=provider,proto3" json:"provider,omitempty"`
	Author        *MessageEmbedAuthor    `protobuf:"bytes,12,opt,name=author,proto3" json:"author,omitempty"`
	Fields        []*MessageEmbedField   `protobuf:"bytes,13,rep,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageEmbed) Reset() {
	*x = MessageEmbed{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageEmbed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEmbed) ProtoMessage() {}

func (x *MessageEmbed) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEmbed.ProtoReflect.Descriptor instead.
func (*MessageEmbed) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{13}
}

func (x *MessageEmbed) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MessageEmbed) GetType() EmbedType {
	if x != nil {
		return x.Type
	}
	return EmbedType_EMBED_TYPE_RICH
}

func (x *MessageEmbed) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MessageEmbed) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MessageEmbed) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *MessageEmbed) GetColor() int32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *MessageEmbed) GetFooter() *MessageEmbedFooter {
	if x != nil {
		return x.Footer
	}
	return nil
}

func (x *MessageEmbed) GetImage() *MessageEmbedImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *MessageEmbed) GetThumbnail() *MessageEmbedThumbnail {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

func (x *MessageEmbed) GetVideo() *MessageEmbedVideo {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *MessageEmbed) GetProvider() *MessageEmbedProvider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *MessageEmbed) GetAuthor() *MessageEmbedAuthor {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *MessageEmbed) GetFields() []*MessageEmbedField {
	if x != nil {
		return x.Fields
	}
	return nil
}

// MessageReactions holds a reactions object for a message.
type MessageReactions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int32                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Me            bool                   `protobuf:"varint,2,opt,name=me,proto3" json:"me,omitempty"`
	Emoji         *Emoji                 `protobuf:"bytes,3,opt,name=emoji,proto3" json:"emoji,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageReactions) Reset() {
	*x = MessageReactions{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageReactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReactions) ProtoMessage() {}

func (x *MessageReactions) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReactions.ProtoReflect.Descriptor instead.
func (*MessageReactions) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{14}
}

func (x *MessageReactions) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MessageReactions) GetMe() bool {
	if x != nil {
		return x.Me
	}
	return false
}

func (x *MessageReactions) GetEmoji() *Emoji {
	if x != nil {
		return x.Emoji
	}
	return nil
}

// MessageActivity is sent with Rich Presence-related chat embeds
type MessageActivity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          MessageActivityType    `protobuf:"varint,1,opt,name=type,proto3,enum=discord_v1.MessageActivityType" json:"type,omitempty"`
	PartyId       string                 `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageActivity) Reset() {
	*x = MessageActivity{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageActivity) ProtoMessage() {}

func (x *MessageActivity) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageActivity.ProtoReflect.Descriptor instead.
func (*MessageActivity) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{15}
}

func (x *MessageActivity) GetType() MessageActivityType {
	if x != nil {
		return x.Type
	}
	return MessageActivityType_MESSAGE_ACTIVITY_TYPE_JOIN
}

func (x *MessageActivity) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

// MessageApplication is sent with Rich Presence-related chat embeds
type MessageApplication struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CoverImage    string                 `protobuf:"bytes,2,opt,name=cover_image,json=coverImage,proto3" json:"cover_image,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Icon          string                 `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageApplication) Reset() {
	*x = MessageApplication{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageApplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageApplication) ProtoMessage() {}

func (x *MessageApplication) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageApplication.ProtoReflect.Descriptor instead.
func (*MessageApplication) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{16}
}

func (x *MessageApplication) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MessageApplication) GetCoverImage() string {
	if x != nil {
		return x.CoverImage
	}
	return ""
}

func (x *MessageApplication) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MessageApplication) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *MessageApplication) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// MessageSnapshot represents a snapshot of a forwarded message.
// https://discord.com/developers/docs/resources/message#message-snapshot-object
type MessageSnapshot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *Message               `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageSnapshot) Reset() {
	*x = MessageSnapshot{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSnapshot) ProtoMessage() {}

func (x *MessageSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSnapshot.ProtoReflect.Descriptor instead.
func (*MessageSnapshot) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{17}
}

func (x *MessageSnapshot) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

// MessageReference contains reference data sent with crossposted messages
type MessageReference struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Type            MessageReferenceType   `protobuf:"varint,1,opt,name=type,proto3,enum=discord_v1.MessageReferenceType" json:"type,omitempty"`
	MessageId       string                 `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	ChannelId       string                 `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	GuildId         string                 `protobuf:"bytes,4,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	FailIfNotExists bool                   `protobuf:"varint,5,opt,name=fail_if_not_exists,json=failIfNotExists,proto3" json:"fail_if_not_exists,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MessageReference) Reset() {
	*x = MessageReference{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReference) ProtoMessage() {}

func (x *MessageReference) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReference.ProtoReflect.Descriptor instead.
func (*MessageReference) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{18}
}

func (x *MessageReference) GetType() MessageReferenceType {
	if x != nil {
		return x.Type
	}
	return MessageReferenceType_MESSAGE_REFERENCE_TYPE_DEFAULT
}

func (x *MessageReference) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *MessageReference) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *MessageReference) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *MessageReference) GetFailIfNotExists() bool {
	if x != nil {
		return x.FailIfNotExists
	}
	return false
}

// MessageInteraction contains information about the application command interaction which generated the message.
type MessageInteraction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Assuming InteractionType is an enum or simple type,
	// replace 'string' with the actual type if needed.
	Type          string  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Name          string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	User          *User   `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Member        *Member `protobuf:"bytes,5,opt,name=member,proto3" json:"member,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageInteraction) Reset() {
	*x = MessageInteraction{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageInteraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageInteraction) ProtoMessage() {}

func (x *MessageInteraction) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageInteraction.ProtoReflect.Descriptor instead.
func (*MessageInteraction) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{19}
}

func (x *MessageInteraction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MessageInteraction) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MessageInteraction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageInteraction) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *MessageInteraction) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

// MessageInteractionMetadata contains metadata of an interaction, including relevant user info.
type MessageInteractionMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Assuming InteractionType is an enum or simple type,
	// replace 'string' with the actual type if needed.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	User *User  `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// Assuming ApplicationIntegrationType is an enum or simple type,
	// replace 'string' with the actual type if needed for the map key.
	AuthorizingIntegrationOwners  map[string]string           `protobuf:"bytes,4,rep,name=authorizing_integration_owners,json=authorizingIntegrationOwners,proto3" json:"authorizing_integration_owners,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	OriginalResponseMessageId     string                      `protobuf:"bytes,5,opt,name=original_response_message_id,json=originalResponseMessageId,proto3" json:"original_response_message_id,omitempty"`
	InteractedMessageId           string                      `protobuf:"bytes,6,opt,name=interacted_message_id,json=interactedMessageId,proto3" json:"interacted_message_id,omitempty"`
	TriggeringInteractionMetadata *MessageInteractionMetadata `protobuf:"bytes,7,opt,name=triggering_interaction_metadata,json=triggeringInteractionMetadata,proto3" json:"triggering_interaction_metadata,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *MessageInteractionMetadata) Reset() {
	*x = MessageInteractionMetadata{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageInteractionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageInteractionMetadata) ProtoMessage() {}

func (x *MessageInteractionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageInteractionMetadata.ProtoReflect.Descriptor instead.
func (*MessageInteractionMetadata) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{20}
}

func (x *MessageInteractionMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MessageInteractionMetadata) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MessageInteractionMetadata) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *MessageInteractionMetadata) GetAuthorizingIntegrationOwners() map[string]string {
	if x != nil {
		return x.AuthorizingIntegrationOwners
	}
	return nil
}

func (x *MessageInteractionMetadata) GetOriginalResponseMessageId() string {
	if x != nil {
		return x.OriginalResponseMessageId
	}
	return ""
}

func (x *MessageInteractionMetadata) GetInteractedMessageId() string {
	if x != nil {
		return x.InteractedMessageId
	}
	return ""
}

func (x *MessageInteractionMetadata) GetTriggeringInteractionMetadata() *MessageInteractionMetadata {
	if x != nil {
		return x.TriggeringInteractionMetadata
	}
	return nil
}

type Session struct {
	state                              protoimpl.MessageState `protogen:"open.v1"`
	Token                              string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Mfa                                bool                   `protobuf:"varint,2,opt,name=mfa,proto3" json:"mfa,omitempty"`
	Debug                              bool                   `protobuf:"varint,3,opt,name=debug,proto3" json:"debug,omitempty"`
	LogLevel                           int32                  `protobuf:"varint,4,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	ShouldReconnectOnError             bool                   `protobuf:"varint,5,opt,name=should_reconnect_on_error,json=shouldReconnectOnError,proto3" json:"should_reconnect_on_error,omitempty"`
	ShouldReconnectVoiceOnSessionError bool                   `protobuf:"varint,6,opt,name=should_reconnect_voice_on_session_error,json=shouldReconnectVoiceOnSessionError,proto3" json:"should_reconnect_voice_on_session_error,omitempty"`
	ShouldRetryOnRateLimit             bool                   `protobuf:"varint,7,opt,name=should_retry_on_rate_limit,json=shouldRetryOnRateLimit,proto3" json:"should_retry_on_rate_limit,omitempty"`
	Identify                           *Identify              `protobuf:"bytes,8,opt,name=identify,proto3" json:"identify,omitempty"`
	Compress                           bool                   `protobuf:"varint,9,opt,name=compress,proto3" json:"compress,omitempty"`
	ShardId                            int32                  `protobuf:"varint,10,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	ShardCount                         int32                  `protobuf:"varint,11,opt,name=shard_count,json=shardCount,proto3" json:"shard_count,omitempty"`
	StateEnabled                       bool                   `protobuf:"varint,12,opt,name=state_enabled,json=stateEnabled,proto3" json:"state_enabled,omitempty"`
	SyncEvents                         bool                   `protobuf:"varint,13,opt,name=sync_events,json=syncEvents,proto3" json:"sync_events,omitempty"`
	DataReady                          bool                   `protobuf:"varint,14,opt,name=data_ready,json=dataReady,proto3" json:"data_ready,omitempty"`
	MaxRestRetries                     int32                  `protobuf:"varint,15,opt,name=max_rest_retries,json=maxRestRetries,proto3" json:"max_rest_retries,omitempty"`
	Status                             int32                  `protobuf:"varint,16,opt,name=status,proto3" json:"status,omitempty"`
	VoiceReady                         bool                   `protobuf:"varint,17,opt,name=voice_ready,json=voiceReady,proto3" json:"voice_ready,omitempty"`
	UdpReady                           bool                   `protobuf:"varint,18,opt,name=udp_ready,json=udpReady,proto3" json:"udp_ready,omitempty"`
	// map<string, VoiceConnection> voice_connections = 19; // TODO(Session/VoiceConnection): supports VoiceConnection
	State *State `protobuf:"bytes,19,opt,name=state,proto3" json:"state,omitempty"`
	// http.Client and websocket.Dialer are complex types and not directly translatable to protobuf
	UserAgent         string                 `protobuf:"bytes,20,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	LastHeartbeatAck  *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=last_heartbeat_ack,json=lastHeartbeatAck,proto3" json:"last_heartbeat_ack,omitempty"`
	LastHeartbeatSent *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=last_heartbeat_sent,json=lastHeartbeatSent,proto3" json:"last_heartbeat_sent,omitempty"` // Ratelimiter, handlers, onceHandlers, wsConn, listening, sequence, gateway, sessionID, wsMutex are complex types and not directly translatable to protobuf
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Session) Reset() {
	*x = Session{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{21}
}

func (x *Session) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Session) GetMfa() bool {
	if x != nil {
		return x.Mfa
	}
	return false
}

func (x *Session) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *Session) GetLogLevel() int32 {
	if x != nil {
		return x.LogLevel
	}
	return 0
}

func (x *Session) GetShouldReconnectOnError() bool {
	if x != nil {
		return x.ShouldReconnectOnError
	}
	return false
}

func (x *Session) GetShouldReconnectVoiceOnSessionError() bool {
	if x != nil {
		return x.ShouldReconnectVoiceOnSessionError
	}
	return false
}

func (x *Session) GetShouldRetryOnRateLimit() bool {
	if x != nil {
		return x.ShouldRetryOnRateLimit
	}
	return false
}

func (x *Session) GetIdentify() *Identify {
	if x != nil {
		return x.Identify
	}
	return nil
}

func (x *Session) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

func (x *Session) GetShardId() int32 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *Session) GetShardCount() int32 {
	if x != nil {
		return x.ShardCount
	}
	return 0
}

func (x *Session) GetStateEnabled() bool {
	if x != nil {
		return x.StateEnabled
	}
	return false
}

func (x *Session) GetSyncEvents() bool {
	if x != nil {
		return x.SyncEvents
	}
	return false
}

func (x *Session) GetDataReady() bool {
	if x != nil {
		return x.DataReady
	}
	return false
}

func (x *Session) GetMaxRestRetries() int32 {
	if x != nil {
		return x.MaxRestRetries
	}
	return 0
}

func (x *Session) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Session) GetVoiceReady() bool {
	if x != nil {
		return x.VoiceReady
	}
	return false
}

func (x *Session) GetUdpReady() bool {
	if x != nil {
		return x.UdpReady
	}
	return false
}

func (x *Session) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Session) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *Session) GetLastHeartbeatAck() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHeartbeatAck
	}
	return nil
}

func (x *Session) GetLastHeartbeatSent() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHeartbeatSent
	}
	return nil
}

type Identify struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Token          string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Properties     *IdentifyProperties    `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	Compress       bool                   `protobuf:"varint,3,opt,name=compress,proto3" json:"compress,omitempty"`
	LargeThreshold int32                  `protobuf:"varint,4,opt,name=large_threshold,json=largeThreshold,proto3" json:"large_threshold,omitempty"`
	Shard          []int32                `protobuf:"varint,5,rep,packed,name=shard,proto3" json:"shard,omitempty"`
	Presence       *GatewayStatusUpdate   `protobuf:"bytes,6,opt,name=presence,proto3" json:"presence,omitempty"`
	Intents        int32                  `protobuf:"varint,7,opt,name=intents,proto3" json:"intents,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Identify) Reset() {
	*x = Identify{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identify) ProtoMessage() {}

func (x *Identify) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identify.ProtoReflect.Descriptor instead.
func (*Identify) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{22}
}

func (x *Identify) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Identify) GetProperties() *IdentifyProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Identify) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

func (x *Identify) GetLargeThreshold() int32 {
	if x != nil {
		return x.LargeThreshold
	}
	return 0
}

func (x *Identify) GetShard() []int32 {
	if x != nil {
		return x.Shard
	}
	return nil
}

func (x *Identify) GetPresence() *GatewayStatusUpdate {
	if x != nil {
		return x.Presence
	}
	return nil
}

func (x *Identify) GetIntents() int32 {
	if x != nil {
		return x.Intents
	}
	return 0
}

type IdentifyProperties struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Os              string                 `protobuf:"bytes,1,opt,name=os,proto3" json:"os,omitempty"`
	Browser         string                 `protobuf:"bytes,2,opt,name=browser,proto3" json:"browser,omitempty"`
	Device          string                 `protobuf:"bytes,3,opt,name=device,proto3" json:"device,omitempty"`
	Referer         string                 `protobuf:"bytes,4,opt,name=referer,proto3" json:"referer,omitempty"`
	ReferringDomain string                 `protobuf:"bytes,5,opt,name=referring_domain,json=referringDomain,proto3" json:"referring_domain,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *IdentifyProperties) Reset() {
	*x = IdentifyProperties{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentifyProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifyProperties) ProtoMessage() {}

func (x *IdentifyProperties) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifyProperties.ProtoReflect.Descriptor instead.
func (*IdentifyProperties) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{23}
}

func (x *IdentifyProperties) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *IdentifyProperties) GetBrowser() string {
	if x != nil {
		return x.Browser
	}
	return ""
}

func (x *IdentifyProperties) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *IdentifyProperties) GetReferer() string {
	if x != nil {
		return x.Referer
	}
	return ""
}

func (x *IdentifyProperties) GetReferringDomain() string {
	if x != nil {
		return x.ReferringDomain
	}
	return ""
}

type GatewayStatusUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Since         int32                  `protobuf:"varint,1,opt,name=since,proto3" json:"since,omitempty"`
	Game          *Activity              `protobuf:"bytes,2,opt,name=game,proto3" json:"game,omitempty"`
	Status        string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Afk           bool                   `protobuf:"varint,4,opt,name=afk,proto3" json:"afk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GatewayStatusUpdate) Reset() {
	*x = GatewayStatusUpdate{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GatewayStatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayStatusUpdate) ProtoMessage() {}

func (x *GatewayStatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayStatusUpdate.ProtoReflect.Descriptor instead.
func (*GatewayStatusUpdate) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{24}
}

func (x *GatewayStatusUpdate) GetSince() int32 {
	if x != nil {
		return x.Since
	}
	return 0
}

func (x *GatewayStatusUpdate) GetGame() *Activity {
	if x != nil {
		return x.Game
	}
	return nil
}

func (x *GatewayStatusUpdate) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GatewayStatusUpdate) GetAfk() bool {
	if x != nil {
		return x.Afk
	}
	return false
}

type Activity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          int32                  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Url           string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ApplicationId string                 `protobuf:"bytes,5,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	State         string                 `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Details       string                 `protobuf:"bytes,7,opt,name=details,proto3" json:"details,omitempty"`
	Timestamps    *TimeStamps            `protobuf:"bytes,8,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	Emoji         *Emoji                 `protobuf:"bytes,9,opt,name=emoji,proto3" json:"emoji,omitempty"`
	Party         *Party                 `protobuf:"bytes,10,opt,name=party,proto3" json:"party,omitempty"`
	Assets        *Assets                `protobuf:"bytes,11,opt,name=assets,proto3" json:"assets,omitempty"`
	Secrets       *Secrets               `protobuf:"bytes,12,opt,name=secrets,proto3" json:"secrets,omitempty"`
	Instance      bool                   `protobuf:"varint,13,opt,name=instance,proto3" json:"instance,omitempty"`
	Flags         int32                  `protobuf:"varint,14,opt,name=flags,proto3" json:"flags,omitempty"` // different from MessageFlags
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Activity) Reset() {
	*x = Activity{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{25}
}

func (x *Activity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Activity) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Activity) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Activity) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Activity) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *Activity) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Activity) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *Activity) GetTimestamps() *TimeStamps {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *Activity) GetEmoji() *Emoji {
	if x != nil {
		return x.Emoji
	}
	return nil
}

func (x *Activity) GetParty() *Party {
	if x != nil {
		return x.Party
	}
	return nil
}

func (x *Activity) GetAssets() *Assets {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *Activity) GetSecrets() *Secrets {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *Activity) GetInstance() bool {
	if x != nil {
		return x.Instance
	}
	return false
}

func (x *Activity) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type TimeStamps struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EndTimestamp   int64                  `protobuf:"varint,1,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	StartTimestamp int64                  `protobuf:"varint,2,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TimeStamps) Reset() {
	*x = TimeStamps{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeStamps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeStamps) ProtoMessage() {}

func (x *TimeStamps) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeStamps.ProtoReflect.Descriptor instead.
func (*TimeStamps) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{26}
}

func (x *TimeStamps) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *TimeStamps) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

type Assets struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LargeImageId  string                 `protobuf:"bytes,1,opt,name=large_image_id,json=largeImageId,proto3" json:"large_image_id,omitempty"`
	SmallImageId  string                 `protobuf:"bytes,2,opt,name=small_image_id,json=smallImageId,proto3" json:"small_image_id,omitempty"`
	LargeText     string                 `protobuf:"bytes,3,opt,name=large_text,json=largeText,proto3" json:"large_text,omitempty"`
	SmallText     string                 `protobuf:"bytes,4,opt,name=small_text,json=smallText,proto3" json:"small_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Assets) Reset() {
	*x = Assets{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Assets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assets) ProtoMessage() {}

func (x *Assets) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assets.ProtoReflect.Descriptor instead.
func (*Assets) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{27}
}

func (x *Assets) GetLargeImageId() string {
	if x != nil {
		return x.LargeImageId
	}
	return ""
}

func (x *Assets) GetSmallImageId() string {
	if x != nil {
		return x.SmallImageId
	}
	return ""
}

func (x *Assets) GetLargeText() string {
	if x != nil {
		return x.LargeText
	}
	return ""
}

func (x *Assets) GetSmallText() string {
	if x != nil {
		return x.SmallText
	}
	return ""
}

type Party struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Size          []int32                `protobuf:"varint,2,rep,packed,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Party) Reset() {
	*x = Party{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Party) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party) ProtoMessage() {}

func (x *Party) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party.ProtoReflect.Descriptor instead.
func (*Party) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{28}
}

func (x *Party) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Party) GetSize() []int32 {
	if x != nil {
		return x.Size
	}
	return nil
}

type Secrets struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Join          string                 `protobuf:"bytes,1,opt,name=join,proto3" json:"join,omitempty"`
	Spectate      string                 `protobuf:"bytes,2,opt,name=spectate,proto3" json:"spectate,omitempty"`
	Match         string                 `protobuf:"bytes,3,opt,name=match,proto3" json:"match,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Secrets) Reset() {
	*x = Secrets{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Secrets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secrets) ProtoMessage() {}

func (x *Secrets) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secrets.ProtoReflect.Descriptor instead.
func (*Secrets) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{29}
}

func (x *Secrets) GetJoin() string {
	if x != nil {
		return x.Join
	}
	return ""
}

func (x *Secrets) GetSpectate() string {
	if x != nil {
		return x.Spectate
	}
	return ""
}

func (x *Secrets) GetMatch() string {
	if x != nil {
		return x.Match
	}
	return ""
}

type ApplicationIntegrationTypeConfig struct {
	state               protoimpl.MessageState    `protogen:"open.v1"`
	Oauth2InstallParams *ApplicationInstallParams `protobuf:"bytes,1,opt,name=oauth2_install_params,json=oauth2InstallParams,proto3" json:"oauth2_install_params,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ApplicationIntegrationTypeConfig) Reset() {
	*x = ApplicationIntegrationTypeConfig{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationIntegrationTypeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationIntegrationTypeConfig) ProtoMessage() {}

func (x *ApplicationIntegrationTypeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationIntegrationTypeConfig.ProtoReflect.Descriptor instead.
func (*ApplicationIntegrationTypeConfig) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{30}
}

func (x *ApplicationIntegrationTypeConfig) GetOauth2InstallParams() *ApplicationInstallParams {
	if x != nil {
		return x.Oauth2InstallParams
	}
	return nil
}

type ApplicationInstallParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scopes        []string               `protobuf:"bytes,1,rep,name=scopes,proto3" json:"scopes,omitempty"`
	Permissions   int64                  `protobuf:"varint,2,opt,name=permissions,proto3" json:"permissions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplicationInstallParams) Reset() {
	*x = ApplicationInstallParams{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationInstallParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationInstallParams) ProtoMessage() {}

func (x *ApplicationInstallParams) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationInstallParams.ProtoReflect.Descriptor instead.
func (*ApplicationInstallParams) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{31}
}

func (x *ApplicationInstallParams) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *ApplicationInstallParams) GetPermissions() int64 {
	if x != nil {
		return x.Permissions
	}
	return 0
}

type Application struct {
	state                  protoimpl.MessageState                      `protogen:"open.v1"`
	Id                     string                                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                   string                                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon                   string                                      `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Description            string                                      `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	RpcOrigins             []string                                    `protobuf:"bytes,5,rep,name=rpc_origins,json=rpcOrigins,proto3" json:"rpc_origins,omitempty"`
	BotPublic              bool                                        `protobuf:"varint,6,opt,name=bot_public,json=botPublic,proto3" json:"bot_public,omitempty"`
	BotRequireCodeGrant    bool                                        `protobuf:"varint,7,opt,name=bot_require_code_grant,json=botRequireCodeGrant,proto3" json:"bot_require_code_grant,omitempty"`
	TermsOfServiceUrl      string                                      `protobuf:"bytes,8,opt,name=terms_of_service_url,json=termsOfServiceUrl,proto3" json:"terms_of_service_url,omitempty"`
	PrivacyPolicyUrl       string                                      `protobuf:"bytes,9,opt,name=privacy_policy_url,json=privacyPolicyUrl,proto3" json:"privacy_policy_url,omitempty"`
	Owner                  *User                                       `protobuf:"bytes,10,opt,name=owner,proto3" json:"owner,omitempty"` // Assuming User is another message type
	Summary                string                                      `protobuf:"bytes,11,opt,name=summary,proto3" json:"summary,omitempty"`
	VerifyKey              string                                      `protobuf:"bytes,12,opt,name=verify_key,json=verifyKey,proto3" json:"verify_key,omitempty"`
	Team                   *Team                                       `protobuf:"bytes,13,opt,name=team,proto3" json:"team,omitempty"` // Assuming Team is another message type
	GuildId                string                                      `protobuf:"bytes,14,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	PrimarySkuId           string                                      `protobuf:"bytes,15,opt,name=primary_sku_id,json=primarySkuId,proto3" json:"primary_sku_id,omitempty"`
	Slug                   string                                      `protobuf:"bytes,16,opt,name=slug,proto3" json:"slug,omitempty"`
	CoverImage             string                                      `protobuf:"bytes,17,opt,name=cover_image,json=coverImage,proto3" json:"cover_image,omitempty"`
	Flags                  int32                                       `protobuf:"varint,18,opt,name=flags,proto3" json:"flags,omitempty"` // different from MessageFlags
	IntegrationTypesConfig map[int32]*ApplicationIntegrationTypeConfig `protobuf:"bytes,19,rep,name=integration_types_config,json=integrationTypesConfig,proto3" json:"integration_types_config,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Application) Reset() {
	*x = Application{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Application) ProtoMessage() {}

func (x *Application) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Application.ProtoReflect.Descriptor instead.
func (*Application) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{32}
}

func (x *Application) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Application) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Application) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Application) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Application) GetRpcOrigins() []string {
	if x != nil {
		return x.RpcOrigins
	}
	return nil
}

func (x *Application) GetBotPublic() bool {
	if x != nil {
		return x.BotPublic
	}
	return false
}

func (x *Application) GetBotRequireCodeGrant() bool {
	if x != nil {
		return x.BotRequireCodeGrant
	}
	return false
}

func (x *Application) GetTermsOfServiceUrl() string {
	if x != nil {
		return x.TermsOfServiceUrl
	}
	return ""
}

func (x *Application) GetPrivacyPolicyUrl() string {
	if x != nil {
		return x.PrivacyPolicyUrl
	}
	return ""
}

func (x *Application) GetOwner() *User {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Application) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Application) GetVerifyKey() string {
	if x != nil {
		return x.VerifyKey
	}
	return ""
}

func (x *Application) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *Application) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *Application) GetPrimarySkuId() string {
	if x != nil {
		return x.PrimarySkuId
	}
	return ""
}

func (x *Application) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Application) GetCoverImage() string {
	if x != nil {
		return x.CoverImage
	}
	return ""
}

func (x *Application) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Application) GetIntegrationTypesConfig() map[int32]*ApplicationIntegrationTypeConfig {
	if x != nil {
		return x.IntegrationTypesConfig
	}
	return nil
}

type ApplicationRoleConnectionMetadata struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Type                     int32                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Key                      string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Name                     string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	NameLocalizations        map[string]string      `protobuf:"bytes,4,rep,name=name_localizations,json=nameLocalizations,proto3" json:"name_localizations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Assuming Locale is string
	Description              string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	DescriptionLocalizations map[string]string      `protobuf:"bytes,6,rep,name=description_localizations,json=descriptionLocalizations,proto3" json:"description_localizations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Assuming Locale is string
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ApplicationRoleConnectionMetadata) Reset() {
	*x = ApplicationRoleConnectionMetadata{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationRoleConnectionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationRoleConnectionMetadata) ProtoMessage() {}

func (x *ApplicationRoleConnectionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationRoleConnectionMetadata.ProtoReflect.Descriptor instead.
func (*ApplicationRoleConnectionMetadata) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{33}
}

func (x *ApplicationRoleConnectionMetadata) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ApplicationRoleConnectionMetadata) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ApplicationRoleConnectionMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationRoleConnectionMetadata) GetNameLocalizations() map[string]string {
	if x != nil {
		return x.NameLocalizations
	}
	return nil
}

func (x *ApplicationRoleConnectionMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ApplicationRoleConnectionMetadata) GetDescriptionLocalizations() map[string]string {
	if x != nil {
		return x.DescriptionLocalizations
	}
	return nil
}

type ApplicationRoleConnection struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PlatformName     string                 `protobuf:"bytes,1,opt,name=platform_name,json=platformName,proto3" json:"platform_name,omitempty"`
	PlatformUsername string                 `protobuf:"bytes,2,opt,name=platform_username,json=platformUsername,proto3" json:"platform_username,omitempty"`
	Metadata         map[string]string      `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ApplicationRoleConnection) Reset() {
	*x = ApplicationRoleConnection{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationRoleConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationRoleConnection) ProtoMessage() {}

func (x *ApplicationRoleConnection) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationRoleConnection.ProtoReflect.Descriptor instead.
func (*ApplicationRoleConnection) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{34}
}

func (x *ApplicationRoleConnection) GetPlatformName() string {
	if x != nil {
		return x.PlatformName
	}
	return ""
}

func (x *ApplicationRoleConnection) GetPlatformUsername() string {
	if x != nil {
		return x.PlatformUsername
	}
	return ""
}

func (x *ApplicationRoleConnection) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type UserConnection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Revoked       bool                   `protobuf:"varint,4,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Integrations  []*Integration         `protobuf:"bytes,5,rep,name=integrations,proto3" json:"integrations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserConnection) Reset() {
	*x = UserConnection{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserConnection) ProtoMessage() {}

func (x *UserConnection) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserConnection.ProtoReflect.Descriptor instead.
func (*UserConnection) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{35}
}

func (x *UserConnection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserConnection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserConnection) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UserConnection) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *UserConnection) GetIntegrations() []*Integration {
	if x != nil {
		return x.Integrations
	}
	return nil
}

type Integration struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type              string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Enabled           bool                   `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Syncing           bool                   `protobuf:"varint,5,opt,name=syncing,proto3" json:"syncing,omitempty"`
	RoleId            string                 `protobuf:"bytes,6,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	EnableEmoticons   bool                   `protobuf:"varint,7,opt,name=enable_emoticons,json=enableEmoticons,proto3" json:"enable_emoticons,omitempty"`
	ExpireBehavior    int32                  `protobuf:"varint,8,opt,name=expire_behavior,json=expireBehavior,proto3" json:"expire_behavior,omitempty"`
	ExpireGracePeriod int32                  `protobuf:"varint,9,opt,name=expire_grace_period,json=expireGracePeriod,proto3" json:"expire_grace_period,omitempty"`
	User              *User                  `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
	Account           *IntegrationAccount    `protobuf:"bytes,11,opt,name=account,proto3" json:"account,omitempty"`
	SyncedAt          *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=synced_at,json=syncedAt,proto3" json:"synced_at,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Integration) Reset() {
	*x = Integration{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Integration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integration) ProtoMessage() {}

func (x *Integration) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integration.ProtoReflect.Descriptor instead.
func (*Integration) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{36}
}

func (x *Integration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Integration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Integration) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Integration) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Integration) GetSyncing() bool {
	if x != nil {
		return x.Syncing
	}
	return false
}

func (x *Integration) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *Integration) GetEnableEmoticons() bool {
	if x != nil {
		return x.EnableEmoticons
	}
	return false
}

func (x *Integration) GetExpireBehavior() int32 {
	if x != nil {
		return x.ExpireBehavior
	}
	return 0
}

func (x *Integration) GetExpireGracePeriod() int32 {
	if x != nil {
		return x.ExpireGracePeriod
	}
	return 0
}

func (x *Integration) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Integration) GetAccount() *IntegrationAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *Integration) GetSyncedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SyncedAt
	}
	return nil
}

type IntegrationAccount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IntegrationAccount) Reset() {
	*x = IntegrationAccount{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntegrationAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationAccount) ProtoMessage() {}

func (x *IntegrationAccount) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationAccount.ProtoReflect.Descriptor instead.
func (*IntegrationAccount) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{37}
}

func (x *IntegrationAccount) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IntegrationAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type VoiceRegion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Optimal       bool                   `protobuf:"varint,3,opt,name=optimal,proto3" json:"optimal,omitempty"`
	Deprecated    bool                   `protobuf:"varint,4,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	Custom        bool                   `protobuf:"varint,5,opt,name=custom,proto3" json:"custom,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VoiceRegion) Reset() {
	*x = VoiceRegion{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoiceRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceRegion) ProtoMessage() {}

func (x *VoiceRegion) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceRegion.ProtoReflect.Descriptor instead.
func (*VoiceRegion) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{38}
}

func (x *VoiceRegion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VoiceRegion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VoiceRegion) GetOptimal() bool {
	if x != nil {
		return x.Optimal
	}
	return false
}

func (x *VoiceRegion) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *VoiceRegion) GetCustom() bool {
	if x != nil {
		return x.Custom
	}
	return false
}

type Invite struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Guild                    *Guild                 `protobuf:"bytes,1,opt,name=guild,proto3" json:"guild,omitempty"`     // Assuming Guild is another message type
	Channel                  *Channel               `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"` // Assuming Channel is another message type
	Inviter                  *User                  `protobuf:"bytes,3,opt,name=inviter,proto3" json:"inviter,omitempty"`
	Code                     string                 `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	CreatedAt                *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	MaxAge                   int32                  `protobuf:"varint,6,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	Uses                     int32                  `protobuf:"varint,7,opt,name=uses,proto3" json:"uses,omitempty"`
	MaxUses                  int32                  `protobuf:"varint,8,opt,name=max_uses,json=maxUses,proto3" json:"max_uses,omitempty"`
	Revoked                  bool                   `protobuf:"varint,9,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Temporary                bool                   `protobuf:"varint,10,opt,name=temporary,proto3" json:"temporary,omitempty"`
	Unique                   bool                   `protobuf:"varint,11,opt,name=unique,proto3" json:"unique,omitempty"`
	TargetUser               *User                  `protobuf:"bytes,12,opt,name=target_user,json=targetUser,proto3" json:"target_user,omitempty"`
	TargetType               uint32                 `protobuf:"varint,13,opt,name=target_type,json=targetType,proto3" json:"target_type,omitempty"`
	TargetApplication        *Application           `protobuf:"bytes,14,opt,name=target_application,json=targetApplication,proto3" json:"target_application,omitempty"`
	ApproximatePresenceCount int32                  `protobuf:"varint,15,opt,name=approximate_presence_count,json=approximatePresenceCount,proto3" json:"approximate_presence_count,omitempty"`
	ApproximateMemberCount   int32                  `protobuf:"varint,16,opt,name=approximate_member_count,json=approximateMemberCount,proto3" json:"approximate_member_count,omitempty"`
	ExpiresAt                *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Invite) Reset() {
	*x = Invite{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Invite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Invite) ProtoMessage() {}

func (x *Invite) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Invite.ProtoReflect.Descriptor instead.
func (*Invite) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{39}
}

func (x *Invite) GetGuild() *Guild {
	if x != nil {
		return x.Guild
	}
	return nil
}

func (x *Invite) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *Invite) GetInviter() *User {
	if x != nil {
		return x.Inviter
	}
	return nil
}

func (x *Invite) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Invite) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Invite) GetMaxAge() int32 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *Invite) GetUses() int32 {
	if x != nil {
		return x.Uses
	}
	return 0
}

func (x *Invite) GetMaxUses() int32 {
	if x != nil {
		return x.MaxUses
	}
	return 0
}

func (x *Invite) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *Invite) GetTemporary() bool {
	if x != nil {
		return x.Temporary
	}
	return false
}

func (x *Invite) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *Invite) GetTargetUser() *User {
	if x != nil {
		return x.TargetUser
	}
	return nil
}

func (x *Invite) GetTargetType() uint32 {
	if x != nil {
		return x.TargetType
	}
	return 0
}

func (x *Invite) GetTargetApplication() *Application {
	if x != nil {
		return x.TargetApplication
	}
	return nil
}

func (x *Invite) GetApproximatePresenceCount() int32 {
	if x != nil {
		return x.ApproximatePresenceCount
	}
	return 0
}

func (x *Invite) GetApproximateMemberCount() int32 {
	if x != nil {
		return x.ApproximateMemberCount
	}
	return 0
}

func (x *Invite) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

type Channel struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	Id                            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GuildId                       string                 `protobuf:"bytes,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Name                          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Topic                         string                 `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	Type                          int32                  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	LastMessageId                 string                 `protobuf:"bytes,6,opt,name=last_message_id,json=lastMessageId,proto3" json:"last_message_id,omitempty"`
	LastPinTimestamp              *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_pin_timestamp,json=lastPinTimestamp,proto3" json:"last_pin_timestamp,omitempty"`
	MessageCount                  int32                  `protobuf:"varint,8,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
	MemberCount                   int32                  `protobuf:"varint,9,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
	Nsfw                          bool                   `protobuf:"varint,10,opt,name=nsfw,proto3" json:"nsfw,omitempty"`
	Icon                          string                 `protobuf:"bytes,11,opt,name=icon,proto3" json:"icon,omitempty"`
	Position                      int32                  `protobuf:"varint,12,opt,name=position,proto3" json:"position,omitempty"`
	Bitrate                       int32                  `protobuf:"varint,13,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	Recipients                    []*User                `protobuf:"bytes,14,rep,name=recipients,proto3" json:"recipients,omitempty"`
	Messages                      []*Message             `protobuf:"bytes,15,rep,name=messages,proto3" json:"messages,omitempty"`
	PermissionOverwrites          []*PermissionOverwrite `protobuf:"bytes,16,rep,name=permission_overwrites,json=permissionOverwrites,proto3" json:"permission_overwrites,omitempty"`
	UserLimit                     int32                  `protobuf:"varint,17,opt,name=user_limit,json=userLimit,proto3" json:"user_limit,omitempty"`
	ParentId                      string                 `protobuf:"bytes,18,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	RateLimitPerUser              int32                  `protobuf:"varint,19,opt,name=rate_limit_per_user,json=rateLimitPerUser,proto3" json:"rate_limit_per_user,omitempty"`
	OwnerId                       string                 `protobuf:"bytes,20,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	ApplicationId                 string                 `protobuf:"bytes,21,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ThreadMetadata                *ThreadMetadata        `protobuf:"bytes,22,opt,name=thread_metadata,json=threadMetadata,proto3" json:"thread_metadata,omitempty"`
	Member                        *ThreadMember          `protobuf:"bytes,23,opt,name=member,proto3" json:"member,omitempty"`
	Members                       []*ThreadMember        `protobuf:"bytes,24,rep,name=members,proto3" json:"members,omitempty"`
	Flags                         int32                  `protobuf:"varint,25,opt,name=flags,proto3" json:"flags,omitempty"` // different from MessageFlags
	AvailableTags                 []*ForumTag            `protobuf:"bytes,26,rep,name=available_tags,json=availableTags,proto3" json:"available_tags,omitempty"`
	AppliedTags                   []string               `protobuf:"bytes,27,rep,name=applied_tags,json=appliedTags,proto3" json:"applied_tags,omitempty"`
	DefaultReactionEmoji          *ForumDefaultReaction  `protobuf:"bytes,28,opt,name=default_reaction_emoji,json=defaultReactionEmoji,proto3" json:"default_reaction_emoji,omitempty"`
	DefaultThreadRateLimitPerUser int32                  `protobuf:"varint,29,opt,name=default_thread_rate_limit_per_user,json=defaultThreadRateLimitPerUser,proto3" json:"default_thread_rate_limit_per_user,omitempty"`
	DefaultSortOrder              int32                  `protobuf:"varint,30,opt,name=default_sort_order,json=defaultSortOrder,proto3" json:"default_sort_order,omitempty"`
	DefaultForumLayout            int32                  `protobuf:"varint,31,opt,name=default_forum_layout,json=defaultForumLayout,proto3" json:"default_forum_layout,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *Channel) Reset() {
	*x = Channel{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{40}
}

func (x *Channel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Channel) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *Channel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Channel) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Channel) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Channel) GetLastMessageId() string {
	if x != nil {
		return x.LastMessageId
	}
	return ""
}

func (x *Channel) GetLastPinTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastPinTimestamp
	}
	return nil
}

func (x *Channel) GetMessageCount() int32 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

func (x *Channel) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *Channel) GetNsfw() bool {
	if x != nil {
		return x.Nsfw
	}
	return false
}

func (x *Channel) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Channel) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Channel) GetBitrate() int32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *Channel) GetRecipients() []*User {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (x *Channel) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *Channel) GetPermissionOverwrites() []*PermissionOverwrite {
	if x != nil {
		return x.PermissionOverwrites
	}
	return nil
}

func (x *Channel) GetUserLimit() int32 {
	if x != nil {
		return x.UserLimit
	}
	return 0
}

func (x *Channel) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *Channel) GetRateLimitPerUser() int32 {
	if x != nil {
		return x.RateLimitPerUser
	}
	return 0
}

func (x *Channel) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Channel) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *Channel) GetThreadMetadata() *ThreadMetadata {
	if x != nil {
		return x.ThreadMetadata
	}
	return nil
}

func (x *Channel) GetMember() *ThreadMember {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *Channel) GetMembers() []*ThreadMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Channel) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Channel) GetAvailableTags() []*ForumTag {
	if x != nil {
		return x.AvailableTags
	}
	return nil
}

func (x *Channel) GetAppliedTags() []string {
	if x != nil {
		return x.AppliedTags
	}
	return nil
}

func (x *Channel) GetDefaultReactionEmoji() *ForumDefaultReaction {
	if x != nil {
		return x.DefaultReactionEmoji
	}
	return nil
}

func (x *Channel) GetDefaultThreadRateLimitPerUser() int32 {
	if x != nil {
		return x.DefaultThreadRateLimitPerUser
	}
	return 0
}

func (x *Channel) GetDefaultSortOrder() int32 {
	if x != nil {
		return x.DefaultSortOrder
	}
	return 0
}

func (x *Channel) GetDefaultForumLayout() int32 {
	if x != nil {
		return x.DefaultForumLayout
	}
	return 0
}

type PermissionOverwrite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          int32                  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Deny          int64                  `protobuf:"varint,3,opt,name=deny,proto3" json:"deny,omitempty"`
	Allow         int64                  `protobuf:"varint,4,opt,name=allow,proto3" json:"allow,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PermissionOverwrite) Reset() {
	*x = PermissionOverwrite{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermissionOverwrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionOverwrite) ProtoMessage() {}

func (x *PermissionOverwrite) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionOverwrite.ProtoReflect.Descriptor instead.
func (*PermissionOverwrite) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{41}
}

func (x *PermissionOverwrite) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PermissionOverwrite) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PermissionOverwrite) GetDeny() int64 {
	if x != nil {
		return x.Deny
	}
	return 0
}

func (x *PermissionOverwrite) GetAllow() int64 {
	if x != nil {
		return x.Allow
	}
	return 0
}

type ThreadStart struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AutoArchiveDuration int32                  `protobuf:"varint,2,opt,name=auto_archive_duration,json=autoArchiveDuration,proto3" json:"auto_archive_duration,omitempty"`
	Type                int32                  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Invitable           bool                   `protobuf:"varint,4,opt,name=invitable,proto3" json:"invitable,omitempty"`
	RateLimitPerUser    int32                  `protobuf:"varint,5,opt,name=rate_limit_per_user,json=rateLimitPerUser,proto3" json:"rate_limit_per_user,omitempty"`
	AppliedTags         []string               `protobuf:"bytes,6,rep,name=applied_tags,json=appliedTags,proto3" json:"applied_tags,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ThreadStart) Reset() {
	*x = ThreadStart{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThreadStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadStart) ProtoMessage() {}

func (x *ThreadStart) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadStart.ProtoReflect.Descriptor instead.
func (*ThreadStart) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{42}
}

func (x *ThreadStart) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ThreadStart) GetAutoArchiveDuration() int32 {
	if x != nil {
		return x.AutoArchiveDuration
	}
	return 0
}

func (x *ThreadStart) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ThreadStart) GetInvitable() bool {
	if x != nil {
		return x.Invitable
	}
	return false
}

func (x *ThreadStart) GetRateLimitPerUser() int32 {
	if x != nil {
		return x.RateLimitPerUser
	}
	return 0
}

func (x *ThreadStart) GetAppliedTags() []string {
	if x != nil {
		return x.AppliedTags
	}
	return nil
}

type ThreadMetadata struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Archived            bool                   `protobuf:"varint,1,opt,name=archived,proto3" json:"archived,omitempty"`
	AutoArchiveDuration int32                  `protobuf:"varint,2,opt,name=auto_archive_duration,json=autoArchiveDuration,proto3" json:"auto_archive_duration,omitempty"`
	ArchiveTimestamp    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=archive_timestamp,json=archiveTimestamp,proto3" json:"archive_timestamp,omitempty"`
	Locked              bool                   `protobuf:"varint,4,opt,name=locked,proto3" json:"locked,omitempty"`
	Invitable           bool                   `protobuf:"varint,5,opt,name=invitable,proto3" json:"invitable,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ThreadMetadata) Reset() {
	*x = ThreadMetadata{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThreadMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadMetadata) ProtoMessage() {}

func (x *ThreadMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadMetadata.ProtoReflect.Descriptor instead.
func (*ThreadMetadata) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{43}
}

func (x *ThreadMetadata) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *ThreadMetadata) GetAutoArchiveDuration() int32 {
	if x != nil {
		return x.AutoArchiveDuration
	}
	return 0
}

func (x *ThreadMetadata) GetArchiveTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchiveTimestamp
	}
	return nil
}

func (x *ThreadMetadata) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *ThreadMetadata) GetInvitable() bool {
	if x != nil {
		return x.Invitable
	}
	return false
}

type ThreadMember struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	JoinTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=join_timestamp,json=joinTimestamp,proto3" json:"join_timestamp,omitempty"`
	Flags         int32                  `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`  // different from MessageFlags
	Member        *Member                `protobuf:"bytes,5,opt,name=member,proto3" json:"member,omitempty"` // Assuming Member is another message type
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ThreadMember) Reset() {
	*x = ThreadMember{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThreadMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadMember) ProtoMessage() {}

func (x *ThreadMember) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadMember.ProtoReflect.Descriptor instead.
func (*ThreadMember) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{44}
}

func (x *ThreadMember) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ThreadMember) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ThreadMember) GetJoinTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinTimestamp
	}
	return nil
}

func (x *ThreadMember) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *ThreadMember) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

type ThreadsList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Threads       []*Channel             `protobuf:"bytes,1,rep,name=threads,proto3" json:"threads,omitempty"`
	Members       []*ThreadMember        `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
	HasMore       bool                   `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ThreadsList) Reset() {
	*x = ThreadsList{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThreadsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadsList) ProtoMessage() {}

func (x *ThreadsList) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadsList.ProtoReflect.Descriptor instead.
func (*ThreadsList) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{45}
}

func (x *ThreadsList) GetThreads() []*Channel {
	if x != nil {
		return x.Threads
	}
	return nil
}

func (x *ThreadsList) GetMembers() []*ThreadMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *ThreadsList) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type AddedThreadMember struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ThreadMember  *ThreadMember          `protobuf:"bytes,1,opt,name=thread_member,json=threadMember,proto3" json:"thread_member,omitempty"`
	Member        *Member                `protobuf:"bytes,2,opt,name=member,proto3" json:"member,omitempty"`
	Presence      *Presence              `protobuf:"bytes,3,opt,name=presence,proto3" json:"presence,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddedThreadMember) Reset() {
	*x = AddedThreadMember{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddedThreadMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddedThreadMember) ProtoMessage() {}

func (x *AddedThreadMember) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddedThreadMember.ProtoReflect.Descriptor instead.
func (*AddedThreadMember) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{46}
}

func (x *AddedThreadMember) GetThreadMember() *ThreadMember {
	if x != nil {
		return x.ThreadMember
	}
	return nil
}

func (x *AddedThreadMember) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *AddedThreadMember) GetPresence() *Presence {
	if x != nil {
		return x.Presence
	}
	return nil
}

type ForumDefaultReaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EmojiId       string                 `protobuf:"bytes,1,opt,name=emoji_id,json=emojiId,proto3" json:"emoji_id,omitempty"`
	EmojiName     string                 `protobuf:"bytes,2,opt,name=emoji_name,json=emojiName,proto3" json:"emoji_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForumDefaultReaction) Reset() {
	*x = ForumDefaultReaction{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForumDefaultReaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForumDefaultReaction) ProtoMessage() {}

func (x *ForumDefaultReaction) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForumDefaultReaction.ProtoReflect.Descriptor instead.
func (*ForumDefaultReaction) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{47}
}

func (x *ForumDefaultReaction) GetEmojiId() string {
	if x != nil {
		return x.EmojiId
	}
	return ""
}

func (x *ForumDefaultReaction) GetEmojiName() string {
	if x != nil {
		return x.EmojiName
	}
	return ""
}

type ForumTag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Moderated     bool                   `protobuf:"varint,3,opt,name=moderated,proto3" json:"moderated,omitempty"`
	EmojiId       string                 `protobuf:"bytes,4,opt,name=emoji_id,json=emojiId,proto3" json:"emoji_id,omitempty"`
	EmojiName     string                 `protobuf:"bytes,5,opt,name=emoji_name,json=emojiName,proto3" json:"emoji_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForumTag) Reset() {
	*x = ForumTag{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForumTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForumTag) ProtoMessage() {}

func (x *ForumTag) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForumTag.ProtoReflect.Descriptor instead.
func (*ForumTag) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{48}
}

func (x *ForumTag) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ForumTag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ForumTag) GetModerated() bool {
	if x != nil {
		return x.Moderated
	}
	return false
}

func (x *ForumTag) GetEmojiId() string {
	if x != nil {
		return x.EmojiId
	}
	return ""
}

func (x *ForumTag) GetEmojiName() string {
	if x != nil {
		return x.EmojiName
	}
	return ""
}

type Emoji struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Roles         []string               `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	User          *User                  `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	RequireColons bool                   `protobuf:"varint,5,opt,name=require_colons,json=requireColons,proto3" json:"require_colons,omitempty"`
	Managed       bool                   `protobuf:"varint,6,opt,name=managed,proto3" json:"managed,omitempty"`
	Animated      bool                   `protobuf:"varint,7,opt,name=animated,proto3" json:"animated,omitempty"`
	Available     bool                   `protobuf:"varint,8,opt,name=available,proto3" json:"available,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Emoji) Reset() {
	*x = Emoji{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Emoji) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emoji) ProtoMessage() {}

func (x *Emoji) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emoji.ProtoReflect.Descriptor instead.
func (*Emoji) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{49}
}

func (x *Emoji) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Emoji) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Emoji) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Emoji) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Emoji) GetRequireColons() bool {
	if x != nil {
		return x.RequireColons
	}
	return false
}

func (x *Emoji) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

func (x *Emoji) GetAnimated() bool {
	if x != nil {
		return x.Animated
	}
	return false
}

func (x *Emoji) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

type EmojiParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Image         string                 `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Roles         []string               `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmojiParams) Reset() {
	*x = EmojiParams{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmojiParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmojiParams) ProtoMessage() {}

func (x *EmojiParams) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmojiParams.ProtoReflect.Descriptor instead.
func (*EmojiParams) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{50}
}

func (x *EmojiParams) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EmojiParams) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *EmojiParams) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type Sticker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PackId        string                 `protobuf:"bytes,2,opt,name=pack_id,json=packId,proto3" json:"pack_id,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Tags          string                 `protobuf:"bytes,5,opt,name=tags,proto3" json:"tags,omitempty"`
	Type          int32                  `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	FormatType    int32                  `protobuf:"varint,7,opt,name=format_type,json=formatType,proto3" json:"format_type,omitempty"`
	Available     bool                   `protobuf:"varint,8,opt,name=available,proto3" json:"available,omitempty"`
	GuildId       string                 `protobuf:"bytes,9,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	User          *User                  `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
	SortValue     int32                  `protobuf:"varint,11,opt,name=sort_value,json=sortValue,proto3" json:"sort_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sticker) Reset() {
	*x = Sticker{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sticker) ProtoMessage() {}

func (x *Sticker) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sticker.ProtoReflect.Descriptor instead.
func (*Sticker) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{51}
}

func (x *Sticker) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Sticker) GetPackId() string {
	if x != nil {
		return x.PackId
	}
	return ""
}

func (x *Sticker) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sticker) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Sticker) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *Sticker) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Sticker) GetFormatType() int32 {
	if x != nil {
		return x.FormatType
	}
	return 0
}

func (x *Sticker) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *Sticker) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *Sticker) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Sticker) GetSortValue() int32 {
	if x != nil {
		return x.SortValue
	}
	return 0
}

type StickerItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FormatType    int32                  `protobuf:"varint,3,opt,name=format_type,json=formatType,proto3" json:"format_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StickerItem) Reset() {
	*x = StickerItem{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StickerItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerItem) ProtoMessage() {}

func (x *StickerItem) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerItem.ProtoReflect.Descriptor instead.
func (*StickerItem) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{52}
}

func (x *StickerItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StickerItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StickerItem) GetFormatType() int32 {
	if x != nil {
		return x.FormatType
	}
	return 0
}

type StickerPack struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Stickers       []*Sticker             `protobuf:"bytes,2,rep,name=stickers,proto3" json:"stickers,omitempty"`
	Name           string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	SkuId          string                 `protobuf:"bytes,4,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`
	CoverStickerId string                 `protobuf:"bytes,5,opt,name=cover_sticker_id,json=coverStickerId,proto3" json:"cover_sticker_id,omitempty"`
	Description    string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	BannerAssetId  string                 `protobuf:"bytes,7,opt,name=banner_asset_id,json=bannerAssetId,proto3" json:"banner_asset_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StickerPack) Reset() {
	*x = StickerPack{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StickerPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerPack) ProtoMessage() {}

func (x *StickerPack) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerPack.ProtoReflect.Descriptor instead.
func (*StickerPack) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{53}
}

func (x *StickerPack) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StickerPack) GetStickers() []*Sticker {
	if x != nil {
		return x.Stickers
	}
	return nil
}

func (x *StickerPack) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StickerPack) GetSkuId() string {
	if x != nil {
		return x.SkuId
	}
	return ""
}

func (x *StickerPack) GetCoverStickerId() string {
	if x != nil {
		return x.CoverStickerId
	}
	return ""
}

func (x *StickerPack) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StickerPack) GetBannerAssetId() string {
	if x != nil {
		return x.BannerAssetId
	}
	return ""
}

type Guild struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	Id                          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon                        string                 `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Region                      string                 `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	AfkChannelId                string                 `protobuf:"bytes,5,opt,name=afk_channel_id,json=afkChannelId,proto3" json:"afk_channel_id,omitempty"`
	OwnerId                     string                 `protobuf:"bytes,6,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Owner                       bool                   `protobuf:"varint,7,opt,name=owner,proto3" json:"owner,omitempty"`
	JoinedAt                    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`
	DiscoverySplash             string                 `protobuf:"bytes,9,opt,name=discovery_splash,json=discoverySplash,proto3" json:"discovery_splash,omitempty"`
	Splash                      string                 `protobuf:"bytes,10,opt,name=splash,proto3" json:"splash,omitempty"`
	AfkTimeout                  int32                  `protobuf:"varint,11,opt,name=afk_timeout,json=afkTimeout,proto3" json:"afk_timeout,omitempty"`
	MemberCount                 int32                  `protobuf:"varint,12,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
	VerificationLevel           int32                  `protobuf:"varint,13,opt,name=verification_level,json=verificationLevel,proto3" json:"verification_level,omitempty"`
	Large                       bool                   `protobuf:"varint,14,opt,name=large,proto3" json:"large,omitempty"`
	DefaultMessageNotifications int32                  `protobuf:"varint,15,opt,name=default_message_notifications,json=defaultMessageNotifications,proto3" json:"default_message_notifications,omitempty"`
	Roles                       []*Role                `protobuf:"bytes,16,rep,name=roles,proto3" json:"roles,omitempty"`
	Emojis                      []*Emoji               `protobuf:"bytes,17,rep,name=emojis,proto3" json:"emojis,omitempty"`
	Stickers                    []*Sticker             `protobuf:"bytes,18,rep,name=stickers,proto3" json:"stickers,omitempty"`
	Members                     []*Member              `protobuf:"bytes,19,rep,name=members,proto3" json:"members,omitempty"`
	Presences                   []*Presence            `protobuf:"bytes,20,rep,name=presences,proto3" json:"presences,omitempty"`
	MaxPresences                int32                  `protobuf:"varint,21,opt,name=max_presences,json=maxPresences,proto3" json:"max_presences,omitempty"`
	MaxMembers                  int32                  `protobuf:"varint,22,opt,name=max_members,json=maxMembers,proto3" json:"max_members,omitempty"`
	Channels                    []*Channel             `protobuf:"bytes,23,rep,name=channels,proto3" json:"channels,omitempty"`
	Threads                     []*Channel             `protobuf:"bytes,24,rep,name=threads,proto3" json:"threads,omitempty"`
	VoiceStates                 []*VoiceState          `protobuf:"bytes,25,rep,name=voice_states,json=voiceStates,proto3" json:"voice_states,omitempty"`
	Unavailable                 bool                   `protobuf:"varint,26,opt,name=unavailable,proto3" json:"unavailable,omitempty"`
	ExplicitContentFilter       int32                  `protobuf:"varint,27,opt,name=explicit_content_filter,json=explicitContentFilter,proto3" json:"explicit_content_filter,omitempty"`
	NsfwLevel                   int32                  `protobuf:"varint,28,opt,name=nsfw_level,json=nsfwLevel,proto3" json:"nsfw_level,omitempty"`
	Features                    []string               `protobuf:"bytes,29,rep,name=features,proto3" json:"features,omitempty"` // Assuming GuildFeature is string
	MfaLevel                    int32                  `protobuf:"varint,30,opt,name=mfa_level,json=mfaLevel,proto3" json:"mfa_level,omitempty"`
	ApplicationId               string                 `protobuf:"bytes,31,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	WidgetEnabled               bool                   `protobuf:"varint,32,opt,name=widget_enabled,json=widgetEnabled,proto3" json:"widget_enabled,omitempty"`
	WidgetChannelId             string                 `protobuf:"bytes,33,opt,name=widget_channel_id,json=widgetChannelId,proto3" json:"widget_channel_id,omitempty"`
	SystemChannelId             string                 `protobuf:"bytes,34,opt,name=system_channel_id,json=systemChannelId,proto3" json:"system_channel_id,omitempty"`
	SystemChannelFlags          int32                  `protobuf:"varint,35,opt,name=system_channel_flags,json=systemChannelFlags,proto3" json:"system_channel_flags,omitempty"`
	RulesChannelId              string                 `protobuf:"bytes,36,opt,name=rules_channel_id,json=rulesChannelId,proto3" json:"rules_channel_id,omitempty"`
	VanityUrlCode               string                 `protobuf:"bytes,37,opt,name=vanity_url_code,json=vanityUrlCode,proto3" json:"vanity_url_code,omitempty"`
	Description                 string                 `protobuf:"bytes,38,opt,name=description,proto3" json:"description,omitempty"`
	Banner                      string                 `protobuf:"bytes,39,opt,name=banner,proto3" json:"banner,omitempty"`
	PremiumTier                 int32                  `protobuf:"varint,40,opt,name=premium_tier,json=premiumTier,proto3" json:"premium_tier,omitempty"`
	PremiumSubscriptionCount    int32                  `protobuf:"varint,41,opt,name=premium_subscription_count,json=premiumSubscriptionCount,proto3" json:"premium_subscription_count,omitempty"`
	PreferredLocale             string                 `protobuf:"bytes,42,opt,name=preferred_locale,json=preferredLocale,proto3" json:"preferred_locale,omitempty"`
	PublicUpdatesChannelId      string                 `protobuf:"bytes,43,opt,name=public_updates_channel_id,json=publicUpdatesChannelId,proto3" json:"public_updates_channel_id,omitempty"`
	MaxVideoChannelUsers        int32                  `protobuf:"varint,44,opt,name=max_video_channel_users,json=maxVideoChannelUsers,proto3" json:"max_video_channel_users,omitempty"`
	ApproximateMemberCount      int32                  `protobuf:"varint,45,opt,name=approximate_member_count,json=approximateMemberCount,proto3" json:"approximate_member_count,omitempty"`
	ApproximatePresenceCount    int32                  `protobuf:"varint,46,opt,name=approximate_presence_count,json=approximatePresenceCount,proto3" json:"approximate_presence_count,omitempty"`
	Permissions                 int64                  `protobuf:"varint,47,opt,name=permissions,proto3" json:"permissions,omitempty"`
	StageInstances              []*StageInstance       `protobuf:"bytes,48,rep,name=stage_instances,json=stageInstances,proto3" json:"stage_instances,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Guild) Reset() {
	*x = Guild{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Guild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Guild) ProtoMessage() {}

func (x *Guild) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Guild.ProtoReflect.Descriptor instead.
func (*Guild) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{54}
}

func (x *Guild) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Guild) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Guild) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Guild) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Guild) GetAfkChannelId() string {
	if x != nil {
		return x.AfkChannelId
	}
	return ""
}

func (x *Guild) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Guild) GetOwner() bool {
	if x != nil {
		return x.Owner
	}
	return false
}

func (x *Guild) GetJoinedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinedAt
	}
	return nil
}

func (x *Guild) GetDiscoverySplash() string {
	if x != nil {
		return x.DiscoverySplash
	}
	return ""
}

func (x *Guild) GetSplash() string {
	if x != nil {
		return x.Splash
	}
	return ""
}

func (x *Guild) GetAfkTimeout() int32 {
	if x != nil {
		return x.AfkTimeout
	}
	return 0
}

func (x *Guild) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *Guild) GetVerificationLevel() int32 {
	if x != nil {
		return x.VerificationLevel
	}
	return 0
}

func (x *Guild) GetLarge() bool {
	if x != nil {
		return x.Large
	}
	return false
}

func (x *Guild) GetDefaultMessageNotifications() int32 {
	if x != nil {
		return x.DefaultMessageNotifications
	}
	return 0
}

func (x *Guild) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Guild) GetEmojis() []*Emoji {
	if x != nil {
		return x.Emojis
	}
	return nil
}

func (x *Guild) GetStickers() []*Sticker {
	if x != nil {
		return x.Stickers
	}
	return nil
}

func (x *Guild) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Guild) GetPresences() []*Presence {
	if x != nil {
		return x.Presences
	}
	return nil
}

func (x *Guild) GetMaxPresences() int32 {
	if x != nil {
		return x.MaxPresences
	}
	return 0
}

func (x *Guild) GetMaxMembers() int32 {
	if x != nil {
		return x.MaxMembers
	}
	return 0
}

func (x *Guild) GetChannels() []*Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *Guild) GetThreads() []*Channel {
	if x != nil {
		return x.Threads
	}
	return nil
}

func (x *Guild) GetVoiceStates() []*VoiceState {
	if x != nil {
		return x.VoiceStates
	}
	return nil
}

func (x *Guild) GetUnavailable() bool {
	if x != nil {
		return x.Unavailable
	}
	return false
}

func (x *Guild) GetExplicitContentFilter() int32 {
	if x != nil {
		return x.ExplicitContentFilter
	}
	return 0
}

func (x *Guild) GetNsfwLevel() int32 {
	if x != nil {
		return x.NsfwLevel
	}
	return 0
}

func (x *Guild) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *Guild) GetMfaLevel() int32 {
	if x != nil {
		return x.MfaLevel
	}
	return 0
}

func (x *Guild) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *Guild) GetWidgetEnabled() bool {
	if x != nil {
		return x.WidgetEnabled
	}
	return false
}

func (x *Guild) GetWidgetChannelId() string {
	if x != nil {
		return x.WidgetChannelId
	}
	return ""
}

func (x *Guild) GetSystemChannelId() string {
	if x != nil {
		return x.SystemChannelId
	}
	return ""
}

func (x *Guild) GetSystemChannelFlags() int32 {
	if x != nil {
		return x.SystemChannelFlags
	}
	return 0
}

func (x *Guild) GetRulesChannelId() string {
	if x != nil {
		return x.RulesChannelId
	}
	return ""
}

func (x *Guild) GetVanityUrlCode() string {
	if x != nil {
		return x.VanityUrlCode
	}
	return ""
}

func (x *Guild) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Guild) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *Guild) GetPremiumTier() int32 {
	if x != nil {
		return x.PremiumTier
	}
	return 0
}

func (x *Guild) GetPremiumSubscriptionCount() int32 {
	if x != nil {
		return x.PremiumSubscriptionCount
	}
	return 0
}

func (x *Guild) GetPreferredLocale() string {
	if x != nil {
		return x.PreferredLocale
	}
	return ""
}

func (x *Guild) GetPublicUpdatesChannelId() string {
	if x != nil {
		return x.PublicUpdatesChannelId
	}
	return ""
}

func (x *Guild) GetMaxVideoChannelUsers() int32 {
	if x != nil {
		return x.MaxVideoChannelUsers
	}
	return 0
}

func (x *Guild) GetApproximateMemberCount() int32 {
	if x != nil {
		return x.ApproximateMemberCount
	}
	return 0
}

func (x *Guild) GetApproximatePresenceCount() int32 {
	if x != nil {
		return x.ApproximatePresenceCount
	}
	return 0
}

func (x *Guild) GetPermissions() int64 {
	if x != nil {
		return x.Permissions
	}
	return 0
}

func (x *Guild) GetStageInstances() []*StageInstance {
	if x != nil {
		return x.StageInstances
	}
	return nil
}

type GuildPreview struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Id                       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                     string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon                     string                 `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Splash                   string                 `protobuf:"bytes,4,opt,name=splash,proto3" json:"splash,omitempty"`
	DiscoverySplash          string                 `protobuf:"bytes,5,opt,name=discovery_splash,json=discoverySplash,proto3" json:"discovery_splash,omitempty"`
	Emojis                   []*Emoji               `protobuf:"bytes,6,rep,name=emojis,proto3" json:"emojis,omitempty"`
	Features                 []string               `protobuf:"bytes,7,rep,name=features,proto3" json:"features,omitempty"`
	ApproximateMemberCount   int32                  `protobuf:"varint,8,opt,name=approximate_member_count,json=approximateMemberCount,proto3" json:"approximate_member_count,omitempty"`
	ApproximatePresenceCount int32                  `protobuf:"varint,9,opt,name=approximate_presence_count,json=approximatePresenceCount,proto3" json:"approximate_presence_count,omitempty"`
	Description              string                 `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *GuildPreview) Reset() {
	*x = GuildPreview{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildPreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildPreview) ProtoMessage() {}

func (x *GuildPreview) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildPreview.ProtoReflect.Descriptor instead.
func (*GuildPreview) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{55}
}

func (x *GuildPreview) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GuildPreview) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GuildPreview) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *GuildPreview) GetSplash() string {
	if x != nil {
		return x.Splash
	}
	return ""
}

func (x *GuildPreview) GetDiscoverySplash() string {
	if x != nil {
		return x.DiscoverySplash
	}
	return ""
}

func (x *GuildPreview) GetEmojis() []*Emoji {
	if x != nil {
		return x.Emojis
	}
	return nil
}

func (x *GuildPreview) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *GuildPreview) GetApproximateMemberCount() int32 {
	if x != nil {
		return x.ApproximateMemberCount
	}
	return 0
}

func (x *GuildPreview) GetApproximatePresenceCount() int32 {
	if x != nil {
		return x.ApproximatePresenceCount
	}
	return 0
}

func (x *GuildPreview) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GuildScheduledEvent struct {
	state              protoimpl.MessageState             `protogen:"open.v1"`
	Id                 string                             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GuildId            string                             `protobuf:"bytes,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	ChannelId          string                             `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	CreatorId          string                             `protobuf:"bytes,4,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	Name               string                             `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description        string                             `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	ScheduledStartTime *timestamppb.Timestamp             `protobuf:"bytes,7,opt,name=scheduled_start_time,json=scheduledStartTime,proto3" json:"scheduled_start_time,omitempty"`
	ScheduledEndTime   *timestamppb.Timestamp             `protobuf:"bytes,8,opt,name=scheduled_end_time,json=scheduledEndTime,proto3" json:"scheduled_end_time,omitempty"`
	PrivacyLevel       int32                              `protobuf:"varint,9,opt,name=privacy_level,json=privacyLevel,proto3" json:"privacy_level,omitempty"`
	Status             int32                              `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	EntityType         int32                              `protobuf:"varint,11,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	EntityId           string                             `protobuf:"bytes,12,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	EntityMetadata     *GuildScheduledEventEntityMetadata `protobuf:"bytes,13,opt,name=entity_metadata,json=entityMetadata,proto3" json:"entity_metadata,omitempty"`
	Creator            *User                              `protobuf:"bytes,14,opt,name=creator,proto3" json:"creator,omitempty"`
	UserCount          int32                              `protobuf:"varint,15,opt,name=user_count,json=userCount,proto3" json:"user_count,omitempty"`
	Image              string                             `protobuf:"bytes,16,opt,name=image,proto3" json:"image,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GuildScheduledEvent) Reset() {
	*x = GuildScheduledEvent{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildScheduledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildScheduledEvent) ProtoMessage() {}

func (x *GuildScheduledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildScheduledEvent.ProtoReflect.Descriptor instead.
func (*GuildScheduledEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{56}
}

func (x *GuildScheduledEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GuildScheduledEvent) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *GuildScheduledEvent) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *GuildScheduledEvent) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *GuildScheduledEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GuildScheduledEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GuildScheduledEvent) GetScheduledStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledStartTime
	}
	return nil
}

func (x *GuildScheduledEvent) GetScheduledEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledEndTime
	}
	return nil
}

func (x *GuildScheduledEvent) GetPrivacyLevel() int32 {
	if x != nil {
		return x.PrivacyLevel
	}
	return 0
}

func (x *GuildScheduledEvent) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GuildScheduledEvent) GetEntityType() int32 {
	if x != nil {
		return x.EntityType
	}
	return 0
}

func (x *GuildScheduledEvent) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *GuildScheduledEvent) GetEntityMetadata() *GuildScheduledEventEntityMetadata {
	if x != nil {
		return x.EntityMetadata
	}
	return nil
}

func (x *GuildScheduledEvent) GetCreator() *User {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *GuildScheduledEvent) GetUserCount() int32 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

func (x *GuildScheduledEvent) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type GuildScheduledEventParams struct {
	state              protoimpl.MessageState             `protogen:"open.v1"`
	ChannelId          string                             `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Name               string                             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description        string                             `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ScheduledStartTime *timestamppb.Timestamp             `protobuf:"bytes,4,opt,name=scheduled_start_time,json=scheduledStartTime,proto3" json:"scheduled_start_time,omitempty"`
	ScheduledEndTime   *timestamppb.Timestamp             `protobuf:"bytes,5,opt,name=scheduled_end_time,json=scheduledEndTime,proto3" json:"scheduled_end_time,omitempty"`
	PrivacyLevel       int32                              `protobuf:"varint,6,opt,name=privacy_level,json=privacyLevel,proto3" json:"privacy_level,omitempty"`
	Status             int32                              `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	EntityType         int32                              `protobuf:"varint,8,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	EntityMetadata     *GuildScheduledEventEntityMetadata `protobuf:"bytes,9,opt,name=entity_metadata,json=entityMetadata,proto3" json:"entity_metadata,omitempty"`
	Image              string                             `protobuf:"bytes,10,opt,name=image,proto3" json:"image,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GuildScheduledEventParams) Reset() {
	*x = GuildScheduledEventParams{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildScheduledEventParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildScheduledEventParams) ProtoMessage() {}

func (x *GuildScheduledEventParams) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildScheduledEventParams.ProtoReflect.Descriptor instead.
func (*GuildScheduledEventParams) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{57}
}

func (x *GuildScheduledEventParams) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *GuildScheduledEventParams) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GuildScheduledEventParams) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GuildScheduledEventParams) GetScheduledStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledStartTime
	}
	return nil
}

func (x *GuildScheduledEventParams) GetScheduledEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledEndTime
	}
	return nil
}

func (x *GuildScheduledEventParams) GetPrivacyLevel() int32 {
	if x != nil {
		return x.PrivacyLevel
	}
	return 0
}

func (x *GuildScheduledEventParams) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GuildScheduledEventParams) GetEntityType() int32 {
	if x != nil {
		return x.EntityType
	}
	return 0
}

func (x *GuildScheduledEventParams) GetEntityMetadata() *GuildScheduledEventEntityMetadata {
	if x != nil {
		return x.EntityMetadata
	}
	return nil
}

func (x *GuildScheduledEventParams) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type GuildScheduledEventEntityMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Location      string                 `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GuildScheduledEventEntityMetadata) Reset() {
	*x = GuildScheduledEventEntityMetadata{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildScheduledEventEntityMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildScheduledEventEntityMetadata) ProtoMessage() {}

func (x *GuildScheduledEventEntityMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildScheduledEventEntityMetadata.ProtoReflect.Descriptor instead.
func (*GuildScheduledEventEntityMetadata) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{58}
}

func (x *GuildScheduledEventEntityMetadata) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type GuildScheduledEventUser struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	GuildScheduledEventId string                 `protobuf:"bytes,1,opt,name=guild_scheduled_event_id,json=guildScheduledEventId,proto3" json:"guild_scheduled_event_id,omitempty"`
	User                  *User                  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Member                *Member                `protobuf:"bytes,3,opt,name=member,proto3" json:"member,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GuildScheduledEventUser) Reset() {
	*x = GuildScheduledEventUser{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildScheduledEventUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildScheduledEventUser) ProtoMessage() {}

func (x *GuildScheduledEventUser) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildScheduledEventUser.ProtoReflect.Descriptor instead.
func (*GuildScheduledEventUser) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{59}
}

func (x *GuildScheduledEventUser) GetGuildScheduledEventId() string {
	if x != nil {
		return x.GuildScheduledEventId
	}
	return ""
}

func (x *GuildScheduledEventUser) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GuildScheduledEventUser) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

type GuildOnboardingMode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Represents the integer value of the enum
	Value         int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GuildOnboardingMode) Reset() {
	*x = GuildOnboardingMode{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildOnboardingMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildOnboardingMode) ProtoMessage() {}

func (x *GuildOnboardingMode) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildOnboardingMode.ProtoReflect.Descriptor instead.
func (*GuildOnboardingMode) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{60}
}

func (x *GuildOnboardingMode) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GuildOnboarding struct {
	state             protoimpl.MessageState   `protogen:"open.v1"`
	GuildId           string                   `protobuf:"bytes,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Prompts           []*GuildOnboardingPrompt `protobuf:"bytes,2,rep,name=prompts,proto3" json:"prompts,omitempty"`
	DefaultChannelIds []string                 `protobuf:"bytes,3,rep,name=default_channel_ids,json=defaultChannelIds,proto3" json:"default_channel_ids,omitempty"`
	Enabled           bool                     `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Mode              *GuildOnboardingMode     `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GuildOnboarding) Reset() {
	*x = GuildOnboarding{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildOnboarding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildOnboarding) ProtoMessage() {}

func (x *GuildOnboarding) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildOnboarding.ProtoReflect.Descriptor instead.
func (*GuildOnboarding) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{61}
}

func (x *GuildOnboarding) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *GuildOnboarding) GetPrompts() []*GuildOnboardingPrompt {
	if x != nil {
		return x.Prompts
	}
	return nil
}

func (x *GuildOnboarding) GetDefaultChannelIds() []string {
	if x != nil {
		return x.DefaultChannelIds
	}
	return nil
}

func (x *GuildOnboarding) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GuildOnboarding) GetMode() *GuildOnboardingMode {
	if x != nil {
		return x.Mode
	}
	return nil
}

type GuildOnboardingPromptType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Represents the integer value of the enum
	Value         int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GuildOnboardingPromptType) Reset() {
	*x = GuildOnboardingPromptType{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildOnboardingPromptType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildOnboardingPromptType) ProtoMessage() {}

func (x *GuildOnboardingPromptType) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildOnboardingPromptType.ProtoReflect.Descriptor instead.
func (*GuildOnboardingPromptType) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{62}
}

func (x *GuildOnboardingPromptType) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GuildOnboardingPrompt struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Id            string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          *GuildOnboardingPromptType     `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Options       []*GuildOnboardingPromptOption `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
	Title         string                         `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	SingleSelect  bool                           `protobuf:"varint,5,opt,name=single_select,json=singleSelect,proto3" json:"single_select,omitempty"`
	Required      bool                           `protobuf:"varint,6,opt,name=required,proto3" json:"required,omitempty"`
	InOnboarding  bool                           `protobuf:"varint,7,opt,name=in_onboarding,json=inOnboarding,proto3" json:"in_onboarding,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GuildOnboardingPrompt) Reset() {
	*x = GuildOnboardingPrompt{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildOnboardingPrompt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildOnboardingPrompt) ProtoMessage() {}

func (x *GuildOnboardingPrompt) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildOnboardingPrompt.ProtoReflect.Descriptor instead.
func (*GuildOnboardingPrompt) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{63}
}

func (x *GuildOnboardingPrompt) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GuildOnboardingPrompt) GetType() *GuildOnboardingPromptType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *GuildOnboardingPrompt) GetOptions() []*GuildOnboardingPromptOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *GuildOnboardingPrompt) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GuildOnboardingPrompt) GetSingleSelect() bool {
	if x != nil {
		return x.SingleSelect
	}
	return false
}

func (x *GuildOnboardingPrompt) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *GuildOnboardingPrompt) GetInOnboarding() bool {
	if x != nil {
		return x.InOnboarding
	}
	return false
}

type GuildOnboardingPromptOption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ChannelIds    []string               `protobuf:"bytes,2,rep,name=channel_ids,json=channelIds,proto3" json:"channel_ids,omitempty"`
	RoleIds       []string               `protobuf:"bytes,3,rep,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`
	Emoji         *Emoji                 `protobuf:"bytes,4,opt,name=emoji,proto3" json:"emoji,omitempty"`
	Title         string                 `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	EmojiId       string                 `protobuf:"bytes,7,opt,name=emoji_id,json=emojiId,proto3" json:"emoji_id,omitempty"`
	EmojiName     string                 `protobuf:"bytes,8,opt,name=emoji_name,json=emojiName,proto3" json:"emoji_name,omitempty"`
	EmojiAnimated bool                   `protobuf:"varint,9,opt,name=emoji_animated,json=emojiAnimated,proto3" json:"emoji_animated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GuildOnboardingPromptOption) Reset() {
	*x = GuildOnboardingPromptOption{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildOnboardingPromptOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildOnboardingPromptOption) ProtoMessage() {}

func (x *GuildOnboardingPromptOption) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildOnboardingPromptOption.ProtoReflect.Descriptor instead.
func (*GuildOnboardingPromptOption) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{64}
}

func (x *GuildOnboardingPromptOption) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GuildOnboardingPromptOption) GetChannelIds() []string {
	if x != nil {
		return x.ChannelIds
	}
	return nil
}

func (x *GuildOnboardingPromptOption) GetRoleIds() []string {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

func (x *GuildOnboardingPromptOption) GetEmoji() *Emoji {
	if x != nil {
		return x.Emoji
	}
	return nil
}

func (x *GuildOnboardingPromptOption) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GuildOnboardingPromptOption) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GuildOnboardingPromptOption) GetEmojiId() string {
	if x != nil {
		return x.EmojiId
	}
	return ""
}

func (x *GuildOnboardingPromptOption) GetEmojiName() string {
	if x != nil {
		return x.EmojiName
	}
	return ""
}

func (x *GuildOnboardingPromptOption) GetEmojiAnimated() bool {
	if x != nil {
		return x.EmojiAnimated
	}
	return false
}

type GuildTemplate struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Code                  string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name                  string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description           string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	UsageCount            int32                  `protobuf:"varint,4,opt,name=usage_count,json=usageCount,proto3" json:"usage_count,omitempty"`
	CreatorId             string                 `protobuf:"bytes,5,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	Creator               *User                  `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt             *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	SourceGuildId         string                 `protobuf:"bytes,9,opt,name=source_guild_id,json=sourceGuildId,proto3" json:"source_guild_id,omitempty"`
	SerializedSourceGuild *Guild                 `protobuf:"bytes,10,opt,name=serialized_source_guild,json=serializedSourceGuild,proto3" json:"serialized_source_guild,omitempty"`
	IsDirty               bool                   `protobuf:"varint,11,opt,name=is_dirty,json=isDirty,proto3" json:"is_dirty,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GuildTemplate) Reset() {
	*x = GuildTemplate{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildTemplate) ProtoMessage() {}

func (x *GuildTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildTemplate.ProtoReflect.Descriptor instead.
func (*GuildTemplate) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{65}
}

func (x *GuildTemplate) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GuildTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GuildTemplate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GuildTemplate) GetUsageCount() int32 {
	if x != nil {
		return x.UsageCount
	}
	return 0
}

func (x *GuildTemplate) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *GuildTemplate) GetCreator() *User {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *GuildTemplate) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GuildTemplate) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GuildTemplate) GetSourceGuildId() string {
	if x != nil {
		return x.SourceGuildId
	}
	return ""
}

func (x *GuildTemplate) GetSerializedSourceGuild() *Guild {
	if x != nil {
		return x.SerializedSourceGuild
	}
	return nil
}

func (x *GuildTemplate) GetIsDirty() bool {
	if x != nil {
		return x.IsDirty
	}
	return false
}

type GuildTemplateParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GuildTemplateParams) Reset() {
	*x = GuildTemplateParams{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildTemplateParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildTemplateParams) ProtoMessage() {}

func (x *GuildTemplateParams) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildTemplateParams.ProtoReflect.Descriptor instead.
func (*GuildTemplateParams) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{66}
}

func (x *GuildTemplateParams) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GuildTemplateParams) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type UserGuild struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Id                       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                     string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon                     string                 `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Owner                    bool                   `protobuf:"varint,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Permissions              int64                  `protobuf:"varint,5,opt,name=permissions,proto3" json:"permissions,omitempty"`
	Features                 []string               `protobuf:"bytes,6,rep,name=features,proto3" json:"features,omitempty"` // Assuming GuildFeature is string
	ApproximateMemberCount   int32                  `protobuf:"varint,7,opt,name=approximate_member_count,json=approximateMemberCount,proto3" json:"approximate_member_count,omitempty"`
	ApproximatePresenceCount int32                  `protobuf:"varint,8,opt,name=approximate_presence_count,json=approximatePresenceCount,proto3" json:"approximate_presence_count,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *UserGuild) Reset() {
	*x = UserGuild{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGuild) ProtoMessage() {}

func (x *UserGuild) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGuild.ProtoReflect.Descriptor instead.
func (*UserGuild) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{67}
}

func (x *UserGuild) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserGuild) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserGuild) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UserGuild) GetOwner() bool {
	if x != nil {
		return x.Owner
	}
	return false
}

func (x *UserGuild) GetPermissions() int64 {
	if x != nil {
		return x.Permissions
	}
	return 0
}

func (x *UserGuild) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *UserGuild) GetApproximateMemberCount() int32 {
	if x != nil {
		return x.ApproximateMemberCount
	}
	return 0
}

func (x *UserGuild) GetApproximatePresenceCount() int32 {
	if x != nil {
		return x.ApproximatePresenceCount
	}
	return 0
}

type GuildParams struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	Name                        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Region                      string                 `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	VerificationLevel           int32                  `protobuf:"varint,3,opt,name=verification_level,json=verificationLevel,proto3" json:"verification_level,omitempty"`
	DefaultMessageNotifications int32                  `protobuf:"varint,4,opt,name=default_message_notifications,json=defaultMessageNotifications,proto3" json:"default_message_notifications,omitempty"`
	ExplicitContentFilter       int32                  `protobuf:"varint,5,opt,name=explicit_content_filter,json=explicitContentFilter,proto3" json:"explicit_content_filter,omitempty"`
	AfkChannelId                string                 `protobuf:"bytes,6,opt,name=afk_channel_id,json=afkChannelId,proto3" json:"afk_channel_id,omitempty"`
	AfkTimeout                  int32                  `protobuf:"varint,7,opt,name=afk_timeout,json=afkTimeout,proto3" json:"afk_timeout,omitempty"`
	Icon                        string                 `protobuf:"bytes,8,opt,name=icon,proto3" json:"icon,omitempty"`
	OwnerId                     string                 `protobuf:"bytes,9,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Splash                      string                 `protobuf:"bytes,10,opt,name=splash,proto3" json:"splash,omitempty"`
	DiscoverySplash             string                 `protobuf:"bytes,11,opt,name=discovery_splash,json=discoverySplash,proto3" json:"discovery_splash,omitempty"`
	Banner                      string                 `protobuf:"bytes,12,opt,name=banner,proto3" json:"banner,omitempty"`
	SystemChannelId             string                 `protobuf:"bytes,13,opt,name=system_channel_id,json=systemChannelId,proto3" json:"system_channel_id,omitempty"`
	SystemChannelFlags          int32                  `protobuf:"varint,14,opt,name=system_channel_flags,json=systemChannelFlags,proto3" json:"system_channel_flags,omitempty"`
	RulesChannelId              string                 `protobuf:"bytes,15,opt,name=rules_channel_id,json=rulesChannelId,proto3" json:"rules_channel_id,omitempty"`
	PublicUpdatesChannelId      string                 `protobuf:"bytes,16,opt,name=public_updates_channel_id,json=publicUpdatesChannelId,proto3" json:"public_updates_channel_id,omitempty"`
	PreferredLocale             string                 `protobuf:"bytes,17,opt,name=preferred_locale,json=preferredLocale,proto3" json:"preferred_locale,omitempty"` // Assuming Locale is string
	Features                    []string               `protobuf:"bytes,18,rep,name=features,proto3" json:"features,omitempty"`                                      // Assuming GuildFeature is string
	Description                 string                 `protobuf:"bytes,19,opt,name=description,proto3" json:"description,omitempty"`
	PremiumProgressBarEnabled   bool                   `protobuf:"varint,20,opt,name=premium_progress_bar_enabled,json=premiumProgressBarEnabled,proto3" json:"premium_progress_bar_enabled,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *GuildParams) Reset() {
	*x = GuildParams{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildParams) ProtoMessage() {}

func (x *GuildParams) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildParams.ProtoReflect.Descriptor instead.
func (*GuildParams) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{68}
}

func (x *GuildParams) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GuildParams) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GuildParams) GetVerificationLevel() int32 {
	if x != nil {
		return x.VerificationLevel
	}
	return 0
}

func (x *GuildParams) GetDefaultMessageNotifications() int32 {
	if x != nil {
		return x.DefaultMessageNotifications
	}
	return 0
}

func (x *GuildParams) GetExplicitContentFilter() int32 {
	if x != nil {
		return x.ExplicitContentFilter
	}
	return 0
}

func (x *GuildParams) GetAfkChannelId() string {
	if x != nil {
		return x.AfkChannelId
	}
	return ""
}

func (x *GuildParams) GetAfkTimeout() int32 {
	if x != nil {
		return x.AfkTimeout
	}
	return 0
}

func (x *GuildParams) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *GuildParams) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *GuildParams) GetSplash() string {
	if x != nil {
		return x.Splash
	}
	return ""
}

func (x *GuildParams) GetDiscoverySplash() string {
	if x != nil {
		return x.DiscoverySplash
	}
	return ""
}

func (x *GuildParams) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *GuildParams) GetSystemChannelId() string {
	if x != nil {
		return x.SystemChannelId
	}
	return ""
}

func (x *GuildParams) GetSystemChannelFlags() int32 {
	if x != nil {
		return x.SystemChannelFlags
	}
	return 0
}

func (x *GuildParams) GetRulesChannelId() string {
	if x != nil {
		return x.RulesChannelId
	}
	return ""
}

func (x *GuildParams) GetPublicUpdatesChannelId() string {
	if x != nil {
		return x.PublicUpdatesChannelId
	}
	return ""
}

func (x *GuildParams) GetPreferredLocale() string {
	if x != nil {
		return x.PreferredLocale
	}
	return ""
}

func (x *GuildParams) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *GuildParams) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GuildParams) GetPremiumProgressBarEnabled() bool {
	if x != nil {
		return x.PremiumProgressBarEnabled
	}
	return false
}

type Role struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Managed       bool                   `protobuf:"varint,3,opt,name=managed,proto3" json:"managed,omitempty"`
	Mentionable   bool                   `protobuf:"varint,4,opt,name=mentionable,proto3" json:"mentionable,omitempty"`
	Hoist         bool                   `protobuf:"varint,5,opt,name=hoist,proto3" json:"hoist,omitempty"`
	Color         int32                  `protobuf:"varint,6,opt,name=color,proto3" json:"color,omitempty"`
	Position      int32                  `protobuf:"varint,7,opt,name=position,proto3" json:"position,omitempty"`
	Permissions   int64                  `protobuf:"varint,8,opt,name=permissions,proto3" json:"permissions,omitempty"`
	Icon          string                 `protobuf:"bytes,9,opt,name=icon,proto3" json:"icon,omitempty"`
	UnicodeEmoji  string                 `protobuf:"bytes,10,opt,name=unicode_emoji,json=unicodeEmoji,proto3" json:"unicode_emoji,omitempty"`
	Flags         int32                  `protobuf:"varint,11,opt,name=flags,proto3" json:"flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Role) Reset() {
	*x = Role{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{69}
}

func (x *Role) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Role) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

func (x *Role) GetMentionable() bool {
	if x != nil {
		return x.Mentionable
	}
	return false
}

func (x *Role) GetHoist() bool {
	if x != nil {
		return x.Hoist
	}
	return false
}

func (x *Role) GetColor() int32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Role) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Role) GetPermissions() int64 {
	if x != nil {
		return x.Permissions
	}
	return 0
}

func (x *Role) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Role) GetUnicodeEmoji() string {
	if x != nil {
		return x.UnicodeEmoji
	}
	return ""
}

func (x *Role) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type RoleFlags struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Represents the integer value of the enum
	Value         int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoleFlags) Reset() {
	*x = RoleFlags{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleFlags) ProtoMessage() {}

func (x *RoleFlags) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleFlags.ProtoReflect.Descriptor instead.
func (*RoleFlags) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{70}
}

func (x *RoleFlags) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type RoleParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Color         int32                  `protobuf:"varint,2,opt,name=color,proto3" json:"color,omitempty"`
	Hoist         bool                   `protobuf:"varint,3,opt,name=hoist,proto3" json:"hoist,omitempty"`
	Permissions   int64                  `protobuf:"varint,4,opt,name=permissions,proto3" json:"permissions,omitempty"`
	Mentionable   bool                   `protobuf:"varint,5,opt,name=mentionable,proto3" json:"mentionable,omitempty"`
	UnicodeEmoji  string                 `protobuf:"bytes,6,opt,name=unicode_emoji,json=unicodeEmoji,proto3" json:"unicode_emoji,omitempty"`
	Icon          string                 `protobuf:"bytes,7,opt,name=icon,proto3" json:"icon,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoleParams) Reset() {
	*x = RoleParams{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleParams) ProtoMessage() {}

func (x *RoleParams) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleParams.ProtoReflect.Descriptor instead.
func (*RoleParams) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{71}
}

func (x *RoleParams) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoleParams) GetColor() int32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *RoleParams) GetHoist() bool {
	if x != nil {
		return x.Hoist
	}
	return false
}

func (x *RoleParams) GetPermissions() int64 {
	if x != nil {
		return x.Permissions
	}
	return 0
}

func (x *RoleParams) GetMentionable() bool {
	if x != nil {
		return x.Mentionable
	}
	return false
}

func (x *RoleParams) GetUnicodeEmoji() string {
	if x != nil {
		return x.UnicodeEmoji
	}
	return ""
}

func (x *RoleParams) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type VoiceState struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	GuildId                 string                 `protobuf:"bytes,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	ChannelId               string                 `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId                  string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Member                  *Member                `protobuf:"bytes,4,opt,name=member,proto3" json:"member,omitempty"`
	SessionId               string                 `protobuf:"bytes,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Deaf                    bool                   `protobuf:"varint,6,opt,name=deaf,proto3" json:"deaf,omitempty"`
	Mute                    bool                   `protobuf:"varint,7,opt,name=mute,proto3" json:"mute,omitempty"`
	SelfDeaf                bool                   `protobuf:"varint,8,opt,name=self_deaf,json=selfDeaf,proto3" json:"self_deaf,omitempty"`
	SelfMute                bool                   `protobuf:"varint,9,opt,name=self_mute,json=selfMute,proto3" json:"self_mute,omitempty"`
	SelfStream              bool                   `protobuf:"varint,10,opt,name=self_stream,json=selfStream,proto3" json:"self_stream,omitempty"`
	SelfVideo               bool                   `protobuf:"varint,11,opt,name=self_video,json=selfVideo,proto3" json:"self_video,omitempty"`
	Suppress                bool                   `protobuf:"varint,12,opt,name=suppress,proto3" json:"suppress,omitempty"`
	RequestToSpeakTimestamp *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=request_to_speak_timestamp,json=requestToSpeakTimestamp,proto3" json:"request_to_speak_timestamp,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *VoiceState) Reset() {
	*x = VoiceState{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoiceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceState) ProtoMessage() {}

func (x *VoiceState) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceState.ProtoReflect.Descriptor instead.
func (*VoiceState) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{72}
}

func (x *VoiceState) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *VoiceState) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *VoiceState) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *VoiceState) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *VoiceState) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *VoiceState) GetDeaf() bool {
	if x != nil {
		return x.Deaf
	}
	return false
}

func (x *VoiceState) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *VoiceState) GetSelfDeaf() bool {
	if x != nil {
		return x.SelfDeaf
	}
	return false
}

func (x *VoiceState) GetSelfMute() bool {
	if x != nil {
		return x.SelfMute
	}
	return false
}

func (x *VoiceState) GetSelfStream() bool {
	if x != nil {
		return x.SelfStream
	}
	return false
}

func (x *VoiceState) GetSelfVideo() bool {
	if x != nil {
		return x.SelfVideo
	}
	return false
}

func (x *VoiceState) GetSuppress() bool {
	if x != nil {
		return x.Suppress
	}
	return false
}

func (x *VoiceState) GetRequestToSpeakTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestToSpeakTimestamp
	}
	return nil
}

type Presence struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"` // Assuming Status is string
	Activities    []*Activity            `protobuf:"bytes,3,rep,name=activities,proto3" json:"activities,omitempty"`
	Since         int32                  `protobuf:"varint,4,opt,name=since,proto3" json:"since,omitempty"`
	ClientStatus  *ClientStatus          `protobuf:"bytes,5,opt,name=client_status,json=clientStatus,proto3" json:"client_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Presence) Reset() {
	*x = Presence{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Presence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presence) ProtoMessage() {}

func (x *Presence) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presence.ProtoReflect.Descriptor instead.
func (*Presence) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{73}
}

func (x *Presence) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Presence) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Presence) GetActivities() []*Activity {
	if x != nil {
		return x.Activities
	}
	return nil
}

func (x *Presence) GetSince() int32 {
	if x != nil {
		return x.Since
	}
	return 0
}

func (x *Presence) GetClientStatus() *ClientStatus {
	if x != nil {
		return x.ClientStatus
	}
	return nil
}

type MemberFlags struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Represents the integer value of the enum
	Value         int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MemberFlags) Reset() {
	*x = MemberFlags{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberFlags) ProtoMessage() {}

func (x *MemberFlags) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberFlags.ProtoReflect.Descriptor instead.
func (*MemberFlags) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{74}
}

func (x *MemberFlags) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Member struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	GuildId                    string                 `protobuf:"bytes,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	JoinedAt                   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`
	Nick                       string                 `protobuf:"bytes,3,opt,name=nick,proto3" json:"nick,omitempty"`
	Deaf                       bool                   `protobuf:"varint,4,opt,name=deaf,proto3" json:"deaf,omitempty"`
	Mute                       bool                   `protobuf:"varint,5,opt,name=mute,proto3" json:"mute,omitempty"`
	Avatar                     string                 `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Banner                     string                 `protobuf:"bytes,7,opt,name=banner,proto3" json:"banner,omitempty"`
	User                       *User                  `protobuf:"bytes,8,opt,name=user,proto3" json:"user,omitempty"`
	Roles                      []string               `protobuf:"bytes,9,rep,name=roles,proto3" json:"roles,omitempty"`
	PremiumSince               *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=premium_since,json=premiumSince,proto3" json:"premium_since,omitempty"`
	Flags                      int32                  `protobuf:"varint,11,opt,name=flags,proto3" json:"flags,omitempty"`
	Pending                    bool                   `protobuf:"varint,12,opt,name=pending,proto3" json:"pending,omitempty"`
	Permissions                int64                  `protobuf:"varint,13,opt,name=permissions,proto3" json:"permissions,omitempty"`
	CommunicationDisabledUntil *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=communication_disabled_until,json=communicationDisabledUntil,proto3" json:"communication_disabled_until,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *Member) Reset() {
	*x = Member{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{75}
}

func (x *Member) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *Member) GetJoinedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinedAt
	}
	return nil
}

func (x *Member) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *Member) GetDeaf() bool {
	if x != nil {
		return x.Deaf
	}
	return false
}

func (x *Member) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *Member) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Member) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *Member) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Member) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Member) GetPremiumSince() *timestamppb.Timestamp {
	if x != nil {
		return x.PremiumSince
	}
	return nil
}

func (x *Member) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Member) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

func (x *Member) GetPermissions() int64 {
	if x != nil {
		return x.Permissions
	}
	return 0
}

func (x *Member) GetCommunicationDisabledUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.CommunicationDisabledUntil
	}
	return nil
}

type ClientStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Desktop       string                 `protobuf:"bytes,1,opt,name=desktop,proto3" json:"desktop,omitempty"` // Assuming Status is string
	Mobile        string                 `protobuf:"bytes,2,opt,name=mobile,proto3" json:"mobile,omitempty"`   // Assuming Status is string
	Web           string                 `protobuf:"bytes,3,opt,name=web,proto3" json:"web,omitempty"`         // Assuming Status is string
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientStatus) Reset() {
	*x = ClientStatus{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientStatus) ProtoMessage() {}

func (x *ClientStatus) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientStatus.ProtoReflect.Descriptor instead.
func (*ClientStatus) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{76}
}

func (x *ClientStatus) GetDesktop() string {
	if x != nil {
		return x.Desktop
	}
	return ""
}

func (x *ClientStatus) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *ClientStatus) GetWeb() string {
	if x != nil {
		return x.Web
	}
	return ""
}

type TooManyRequests struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bucket        string                 `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RetryAfter    *durationpb.Duration   `protobuf:"bytes,3,opt,name=retry_after,json=retryAfter,proto3" json:"retry_after,omitempty"` // Using Protobuf's well-known type for duration
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TooManyRequests) Reset() {
	*x = TooManyRequests{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TooManyRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TooManyRequests) ProtoMessage() {}

func (x *TooManyRequests) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TooManyRequests.ProtoReflect.Descriptor instead.
func (*TooManyRequests) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{77}
}

func (x *TooManyRequests) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *TooManyRequests) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TooManyRequests) GetRetryAfter() *durationpb.Duration {
	if x != nil {
		return x.RetryAfter
	}
	return nil
}

type ReadState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MentionCount  int32                  `protobuf:"varint,1,opt,name=mention_count,json=mentionCount,proto3" json:"mention_count,omitempty"`
	LastMessageId string                 `protobuf:"bytes,2,opt,name=last_message_id,json=lastMessageId,proto3" json:"last_message_id,omitempty"`
	Id            string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadState) Reset() {
	*x = ReadState{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadState) ProtoMessage() {}

func (x *ReadState) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadState.ProtoReflect.Descriptor instead.
func (*ReadState) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{78}
}

func (x *ReadState) GetMentionCount() int32 {
	if x != nil {
		return x.MentionCount
	}
	return 0
}

func (x *ReadState) GetLastMessageId() string {
	if x != nil {
		return x.LastMessageId
	}
	return ""
}

func (x *ReadState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GuildRole struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Role          *Role                  `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	GuildId       string                 `protobuf:"bytes,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GuildRole) Reset() {
	*x = GuildRole{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildRole) ProtoMessage() {}

func (x *GuildRole) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildRole.ProtoReflect.Descriptor instead.
func (*GuildRole) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{79}
}

func (x *GuildRole) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *GuildRole) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

type GuildBan struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reason        string                 `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	User          *User                  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GuildBan) Reset() {
	*x = GuildBan{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildBan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBan) ProtoMessage() {}

func (x *GuildBan) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBan.ProtoReflect.Descriptor instead.
func (*GuildBan) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{80}
}

func (x *GuildBan) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GuildBan) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type AutoModerationRule struct {
	state           protoimpl.MessageState         `protogen:"open.v1"`
	Id              string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GuildId         string                         `protobuf:"bytes,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Name            string                         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CreatorId       string                         `protobuf:"bytes,4,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	EventType       int32                          `protobuf:"varint,5,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	TriggerType     int32                          `protobuf:"varint,6,opt,name=trigger_type,json=triggerType,proto3" json:"trigger_type,omitempty"`
	TriggerMetadata *AutoModerationTriggerMetadata `protobuf:"bytes,7,opt,name=trigger_metadata,json=triggerMetadata,proto3" json:"trigger_metadata,omitempty"`
	Actions         []*AutoModerationAction        `protobuf:"bytes,8,rep,name=actions,proto3" json:"actions,omitempty"`
	Enabled         bool                           `protobuf:"varint,9,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ExemptRoles     []string                       `protobuf:"bytes,10,rep,name=exempt_roles,json=exemptRoles,proto3" json:"exempt_roles,omitempty"`
	ExemptChannels  []string                       `protobuf:"bytes,11,rep,name=exempt_channels,json=exemptChannels,proto3" json:"exempt_channels,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AutoModerationRule) Reset() {
	*x = AutoModerationRule{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoModerationRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoModerationRule) ProtoMessage() {}

func (x *AutoModerationRule) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoModerationRule.ProtoReflect.Descriptor instead.
func (*AutoModerationRule) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{81}
}

func (x *AutoModerationRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AutoModerationRule) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *AutoModerationRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AutoModerationRule) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *AutoModerationRule) GetEventType() int32 {
	if x != nil {
		return x.EventType
	}
	return 0
}

func (x *AutoModerationRule) GetTriggerType() int32 {
	if x != nil {
		return x.TriggerType
	}
	return 0
}

func (x *AutoModerationRule) GetTriggerMetadata() *AutoModerationTriggerMetadata {
	if x != nil {
		return x.TriggerMetadata
	}
	return nil
}

func (x *AutoModerationRule) GetActions() []*AutoModerationAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *AutoModerationRule) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AutoModerationRule) GetExemptRoles() []string {
	if x != nil {
		return x.ExemptRoles
	}
	return nil
}

func (x *AutoModerationRule) GetExemptChannels() []string {
	if x != nil {
		return x.ExemptChannels
	}
	return nil
}

type AutoModerationTriggerMetadata struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	KeywordFilter     []string               `protobuf:"bytes,1,rep,name=keyword_filter,json=keywordFilter,proto3" json:"keyword_filter,omitempty"`
	RegexPatterns     []string               `protobuf:"bytes,2,rep,name=regex_patterns,json=regexPatterns,proto3" json:"regex_patterns,omitempty"`
	Presets           []uint32               `protobuf:"varint,3,rep,packed,name=presets,proto3" json:"presets,omitempty"` // Assuming AutoModerationKeywordPreset is uint32
	AllowList         []string               `protobuf:"bytes,4,rep,name=allow_list,json=allowList,proto3" json:"allow_list,omitempty"`
	MentionTotalLimit int32                  `protobuf:"varint,5,opt,name=mention_total_limit,json=mentionTotalLimit,proto3" json:"mention_total_limit,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AutoModerationTriggerMetadata) Reset() {
	*x = AutoModerationTriggerMetadata{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoModerationTriggerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoModerationTriggerMetadata) ProtoMessage() {}

func (x *AutoModerationTriggerMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoModerationTriggerMetadata.ProtoReflect.Descriptor instead.
func (*AutoModerationTriggerMetadata) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{82}
}

func (x *AutoModerationTriggerMetadata) GetKeywordFilter() []string {
	if x != nil {
		return x.KeywordFilter
	}
	return nil
}

func (x *AutoModerationTriggerMetadata) GetRegexPatterns() []string {
	if x != nil {
		return x.RegexPatterns
	}
	return nil
}

func (x *AutoModerationTriggerMetadata) GetPresets() []uint32 {
	if x != nil {
		return x.Presets
	}
	return nil
}

func (x *AutoModerationTriggerMetadata) GetAllowList() []string {
	if x != nil {
		return x.AllowList
	}
	return nil
}

func (x *AutoModerationTriggerMetadata) GetMentionTotalLimit() int32 {
	if x != nil {
		return x.MentionTotalLimit
	}
	return 0
}

type AutoModerationActionType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Represents the integer value of the enum
	Value         int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutoModerationActionType) Reset() {
	*x = AutoModerationActionType{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoModerationActionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoModerationActionType) ProtoMessage() {}

func (x *AutoModerationActionType) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoModerationActionType.ProtoReflect.Descriptor instead.
func (*AutoModerationActionType) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{83}
}

func (x *AutoModerationActionType) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type AutoModerationActionMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     string                 `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Duration      int32                  `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	CustomMessage string                 `protobuf:"bytes,3,opt,name=custom_message,json=customMessage,proto3" json:"custom_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutoModerationActionMetadata) Reset() {
	*x = AutoModerationActionMetadata{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoModerationActionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoModerationActionMetadata) ProtoMessage() {}

func (x *AutoModerationActionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoModerationActionMetadata.ProtoReflect.Descriptor instead.
func (*AutoModerationActionMetadata) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{84}
}

func (x *AutoModerationActionMetadata) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *AutoModerationActionMetadata) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *AutoModerationActionMetadata) GetCustomMessage() string {
	if x != nil {
		return x.CustomMessage
	}
	return ""
}

type AutoModerationAction struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Type          int32                         `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` // Assuming AutoModerationActionType is int32
	Metadata      *AutoModerationActionMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutoModerationAction) Reset() {
	*x = AutoModerationAction{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoModerationAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoModerationAction) ProtoMessage() {}

func (x *AutoModerationAction) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoModerationAction.ProtoReflect.Descriptor instead.
func (*AutoModerationAction) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{85}
}

func (x *AutoModerationAction) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AutoModerationAction) GetMetadata() *AutoModerationActionMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GuildEmbed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ChannelId     string                 `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GuildEmbed) Reset() {
	*x = GuildEmbed{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildEmbed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildEmbed) ProtoMessage() {}

func (x *GuildEmbed) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildEmbed.ProtoReflect.Descriptor instead.
func (*GuildEmbed) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{86}
}

func (x *GuildEmbed) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GuildEmbed) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type GuildAuditLog struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Webhooks        []*Webhook             `protobuf:"bytes,1,rep,name=webhooks,proto3" json:"webhooks,omitempty"`
	Users           []*User                `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	AuditLogEntries []*AuditLogEntry       `protobuf:"bytes,3,rep,name=audit_log_entries,json=auditLogEntries,proto3" json:"audit_log_entries,omitempty"`
	Integrations    []*Integration         `protobuf:"bytes,4,rep,name=integrations,proto3" json:"integrations,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GuildAuditLog) Reset() {
	*x = GuildAuditLog{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildAuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildAuditLog) ProtoMessage() {}

func (x *GuildAuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildAuditLog.ProtoReflect.Descriptor instead.
func (*GuildAuditLog) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{87}
}

func (x *GuildAuditLog) GetWebhooks() []*Webhook {
	if x != nil {
		return x.Webhooks
	}
	return nil
}

func (x *GuildAuditLog) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GuildAuditLog) GetAuditLogEntries() []*AuditLogEntry {
	if x != nil {
		return x.AuditLogEntries
	}
	return nil
}

func (x *GuildAuditLog) GetIntegrations() []*Integration {
	if x != nil {
		return x.Integrations
	}
	return nil
}

type AuditLogEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetId      string                 `protobuf:"bytes,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Changes       []*AuditLogChange      `protobuf:"bytes,2,rep,name=changes,proto3" json:"changes,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id            string                 `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	ActionType    int32                  `protobuf:"varint,5,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"` // Assuming AuditLogAction is int32
	Options       *AuditLogOptions       `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	Reason        string                 `protobuf:"bytes,7,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditLogEntry) Reset() {
	*x = AuditLogEntry{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogEntry) ProtoMessage() {}

func (x *AuditLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogEntry.ProtoReflect.Descriptor instead.
func (*AuditLogEntry) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{88}
}

func (x *AuditLogEntry) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *AuditLogEntry) GetChanges() []*AuditLogChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *AuditLogEntry) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AuditLogEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AuditLogEntry) GetActionType() int32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *AuditLogEntry) GetOptions() *AuditLogOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *AuditLogEntry) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type AuditLogChange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Protobuf does not support arbitrary types like interface{},
	// you might need to use a oneof or define specific message types
	// for possible values based on the Key. Using bytes as a fallback.
	NewValue      []byte `protobuf:"bytes,1,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	OldValue      []byte `protobuf:"bytes,2,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	Key           string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"` // Assuming AuditLogChangeKey is string
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditLogChange) Reset() {
	*x = AuditLogChange{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditLogChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogChange) ProtoMessage() {}

func (x *AuditLogChange) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogChange.ProtoReflect.Descriptor instead.
func (*AuditLogChange) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{89}
}

func (x *AuditLogChange) GetNewValue() []byte {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *AuditLogChange) GetOldValue() []byte {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *AuditLogChange) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type AuditLogOptions struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	DeleteMemberDays              string                 `protobuf:"bytes,1,opt,name=delete_member_days,json=deleteMemberDays,proto3" json:"delete_member_days,omitempty"`
	MembersRemoved                string                 `protobuf:"bytes,2,opt,name=members_removed,json=membersRemoved,proto3" json:"members_removed,omitempty"`
	ChannelId                     string                 `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	MessageId                     string                 `protobuf:"bytes,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Count                         string                 `protobuf:"bytes,5,opt,name=count,proto3" json:"count,omitempty"`
	Id                            string                 `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	Type                          string                 `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"` // Assuming AuditLogOptionsType is string
	RoleName                      string                 `protobuf:"bytes,8,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	ApplicationId                 string                 `protobuf:"bytes,9,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	AutoModerationRuleName        string                 `protobuf:"bytes,10,opt,name=auto_moderation_rule_name,json=autoModerationRuleName,proto3" json:"auto_moderation_rule_name,omitempty"`
	AutoModerationRuleTriggerType string                 `protobuf:"bytes,11,opt,name=auto_moderation_rule_trigger_type,json=autoModerationRuleTriggerType,proto3" json:"auto_moderation_rule_trigger_type,omitempty"`
	IntegrationType               string                 `protobuf:"bytes,12,opt,name=integration_type,json=integrationType,proto3" json:"integration_type,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *AuditLogOptions) Reset() {
	*x = AuditLogOptions{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditLogOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogOptions) ProtoMessage() {}

func (x *AuditLogOptions) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogOptions.ProtoReflect.Descriptor instead.
func (*AuditLogOptions) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{90}
}

func (x *AuditLogOptions) GetDeleteMemberDays() string {
	if x != nil {
		return x.DeleteMemberDays
	}
	return ""
}

func (x *AuditLogOptions) GetMembersRemoved() string {
	if x != nil {
		return x.MembersRemoved
	}
	return ""
}

func (x *AuditLogOptions) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *AuditLogOptions) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *AuditLogOptions) GetCount() string {
	if x != nil {
		return x.Count
	}
	return ""
}

func (x *AuditLogOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AuditLogOptions) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AuditLogOptions) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *AuditLogOptions) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *AuditLogOptions) GetAutoModerationRuleName() string {
	if x != nil {
		return x.AutoModerationRuleName
	}
	return ""
}

func (x *AuditLogOptions) GetAutoModerationRuleTriggerType() string {
	if x != nil {
		return x.AutoModerationRuleTriggerType
	}
	return ""
}

func (x *AuditLogOptions) GetIntegrationType() string {
	if x != nil {
		return x.IntegrationType
	}
	return ""
}

type GuildMemberParams struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Nick                       string                 `protobuf:"bytes,1,opt,name=nick,proto3" json:"nick,omitempty"`
	Roles                      []string               `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
	ChannelId                  string                 `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Mute                       bool                   `protobuf:"varint,4,opt,name=mute,proto3" json:"mute,omitempty"`
	Deaf                       bool                   `protobuf:"varint,5,opt,name=deaf,proto3" json:"deaf,omitempty"`
	CommunicationDisabledUntil *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=communication_disabled_until,json=communicationDisabledUntil,proto3" json:"communication_disabled_until,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *GuildMemberParams) Reset() {
	*x = GuildMemberParams{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildMemberParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMemberParams) ProtoMessage() {}

func (x *GuildMemberParams) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMemberParams.ProtoReflect.Descriptor instead.
func (*GuildMemberParams) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{91}
}

func (x *GuildMemberParams) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *GuildMemberParams) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *GuildMemberParams) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *GuildMemberParams) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *GuildMemberParams) GetDeaf() bool {
	if x != nil {
		return x.Deaf
	}
	return false
}

func (x *GuildMemberParams) GetCommunicationDisabledUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.CommunicationDisabledUntil
	}
	return nil
}

type GuildMemberAddParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessToken   string                 `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	Nick          string                 `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	Roles         []string               `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	Mute          bool                   `protobuf:"varint,4,opt,name=mute,proto3" json:"mute,omitempty"`
	Deaf          bool                   `protobuf:"varint,5,opt,name=deaf,proto3" json:"deaf,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GuildMemberAddParams) Reset() {
	*x = GuildMemberAddParams{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildMemberAddParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMemberAddParams) ProtoMessage() {}

func (x *GuildMemberAddParams) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMemberAddParams.ProtoReflect.Descriptor instead.
func (*GuildMemberAddParams) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{92}
}

func (x *GuildMemberAddParams) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *GuildMemberAddParams) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *GuildMemberAddParams) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *GuildMemberAddParams) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *GuildMemberAddParams) GetDeaf() bool {
	if x != nil {
		return x.Deaf
	}
	return false
}

type APIErrorMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *APIErrorMessage) Reset() {
	*x = APIErrorMessage{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIErrorMessage) ProtoMessage() {}

func (x *APIErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIErrorMessage.ProtoReflect.Descriptor instead.
func (*APIErrorMessage) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{93}
}

func (x *APIErrorMessage) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *APIErrorMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type MessageReaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MessageId     string                 `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Emoji         *Emoji                 `protobuf:"bytes,3,opt,name=emoji,proto3" json:"emoji,omitempty"`
	ChannelId     string                 `protobuf:"bytes,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	GuildId       string                 `protobuf:"bytes,5,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageReaction) Reset() {
	*x = MessageReaction{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageReaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReaction) ProtoMessage() {}

func (x *MessageReaction) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReaction.ProtoReflect.Descriptor instead.
func (*MessageReaction) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{94}
}

func (x *MessageReaction) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MessageReaction) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *MessageReaction) GetEmoji() *Emoji {
	if x != nil {
		return x.Emoji
	}
	return nil
}

func (x *MessageReaction) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *MessageReaction) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

type GatewayBotResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Url               string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Shards            int32                  `protobuf:"varint,2,opt,name=shards,proto3" json:"shards,omitempty"`
	SessionStartLimit *SessionInformation    `protobuf:"bytes,3,opt,name=session_start_limit,json=sessionStartLimit,proto3" json:"session_start_limit,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GatewayBotResponse) Reset() {
	*x = GatewayBotResponse{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GatewayBotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayBotResponse) ProtoMessage() {}

func (x *GatewayBotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayBotResponse.ProtoReflect.Descriptor instead.
func (*GatewayBotResponse) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{95}
}

func (x *GatewayBotResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GatewayBotResponse) GetShards() int32 {
	if x != nil {
		return x.Shards
	}
	return 0
}

func (x *GatewayBotResponse) GetSessionStartLimit() *SessionInformation {
	if x != nil {
		return x.SessionStartLimit
	}
	return nil
}

type SessionInformation struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Total          int32                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Remaining      int32                  `protobuf:"varint,2,opt,name=remaining,proto3" json:"remaining,omitempty"`
	ResetAfter     int32                  `protobuf:"varint,3,opt,name=reset_after,json=resetAfter,proto3" json:"reset_after,omitempty"`
	MaxConcurrency int32                  `protobuf:"varint,4,opt,name=max_concurrency,json=maxConcurrency,proto3" json:"max_concurrency,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SessionInformation) Reset() {
	*x = SessionInformation{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInformation) ProtoMessage() {}

func (x *SessionInformation) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInformation.ProtoReflect.Descriptor instead.
func (*SessionInformation) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{96}
}

func (x *SessionInformation) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SessionInformation) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *SessionInformation) GetResetAfter() int32 {
	if x != nil {
		return x.ResetAfter
	}
	return 0
}

func (x *SessionInformation) GetMaxConcurrency() int32 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

type StageInstance struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Id                    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GuildId               string                 `protobuf:"bytes,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	ChannelId             string                 `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Topic                 string                 `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	PrivacyLevel          int32                  `protobuf:"varint,5,opt,name=privacy_level,json=privacyLevel,proto3" json:"privacy_level,omitempty"`
	DiscoverableDisabled  bool                   `protobuf:"varint,6,opt,name=discoverable_disabled,json=discoverableDisabled,proto3" json:"discoverable_disabled,omitempty"`
	GuildScheduledEventId string                 `protobuf:"bytes,7,opt,name=guild_scheduled_event_id,json=guildScheduledEventId,proto3" json:"guild_scheduled_event_id,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *StageInstance) Reset() {
	*x = StageInstance{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StageInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageInstance) ProtoMessage() {}

func (x *StageInstance) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageInstance.ProtoReflect.Descriptor instead.
func (*StageInstance) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{97}
}

func (x *StageInstance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StageInstance) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *StageInstance) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *StageInstance) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *StageInstance) GetPrivacyLevel() int32 {
	if x != nil {
		return x.PrivacyLevel
	}
	return 0
}

func (x *StageInstance) GetDiscoverableDisabled() bool {
	if x != nil {
		return x.DiscoverableDisabled
	}
	return false
}

func (x *StageInstance) GetGuildScheduledEventId() string {
	if x != nil {
		return x.GuildScheduledEventId
	}
	return ""
}

type StageInstanceParams struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ChannelId             string                 `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Topic                 string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	PrivacyLevel          int32                  `protobuf:"varint,3,opt,name=privacy_level,json=privacyLevel,proto3" json:"privacy_level,omitempty"`
	SendStartNotification bool                   `protobuf:"varint,4,opt,name=send_start_notification,json=sendStartNotification,proto3" json:"send_start_notification,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *StageInstanceParams) Reset() {
	*x = StageInstanceParams{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StageInstanceParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageInstanceParams) ProtoMessage() {}

func (x *StageInstanceParams) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageInstanceParams.ProtoReflect.Descriptor instead.
func (*StageInstanceParams) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{98}
}

func (x *StageInstanceParams) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *StageInstanceParams) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *StageInstanceParams) GetPrivacyLevel() int32 {
	if x != nil {
		return x.PrivacyLevel
	}
	return 0
}

func (x *StageInstanceParams) GetSendStartNotification() bool {
	if x != nil {
		return x.SendStartNotification
	}
	return false
}

type PollLayoutType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Represents the integer value of the enum
	Value         int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollLayoutType) Reset() {
	*x = PollLayoutType{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollLayoutType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollLayoutType) ProtoMessage() {}

func (x *PollLayoutType) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollLayoutType.ProtoReflect.Descriptor instead.
func (*PollLayoutType) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{99}
}

func (x *PollLayoutType) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PollMedia struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Emoji         *ComponentEmoji        `protobuf:"bytes,2,opt,name=emoji,proto3" json:"emoji,omitempty"` // Assuming ComponentEmoji is another message type
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollMedia) Reset() {
	*x = PollMedia{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollMedia) ProtoMessage() {}

func (x *PollMedia) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollMedia.ProtoReflect.Descriptor instead.
func (*PollMedia) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{100}
}

func (x *PollMedia) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *PollMedia) GetEmoji() *ComponentEmoji {
	if x != nil {
		return x.Emoji
	}
	return nil
}

type PollAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AnswerId      int32                  `protobuf:"varint,1,opt,name=answer_id,json=answerId,proto3" json:"answer_id,omitempty"`
	Media         *PollMedia             `protobuf:"bytes,2,opt,name=media,proto3" json:"media,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollAnswer) Reset() {
	*x = PollAnswer{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollAnswer) ProtoMessage() {}

func (x *PollAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollAnswer.ProtoReflect.Descriptor instead.
func (*PollAnswer) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{101}
}

func (x *PollAnswer) GetAnswerId() int32 {
	if x != nil {
		return x.AnswerId
	}
	return 0
}

func (x *PollAnswer) GetMedia() *PollMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

type PollAnswerCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count         int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	MeVoted       bool                   `protobuf:"varint,3,opt,name=me_voted,json=meVoted,proto3" json:"me_voted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollAnswerCount) Reset() {
	*x = PollAnswerCount{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollAnswerCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollAnswerCount) ProtoMessage() {}

func (x *PollAnswerCount) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollAnswerCount.ProtoReflect.Descriptor instead.
func (*PollAnswerCount) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{102}
}

func (x *PollAnswerCount) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PollAnswerCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PollAnswerCount) GetMeVoted() bool {
	if x != nil {
		return x.MeVoted
	}
	return false
}

type PollResults struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Finalized     bool                   `protobuf:"varint,1,opt,name=finalized,proto3" json:"finalized,omitempty"`
	AnswerCounts  []*PollAnswerCount     `protobuf:"bytes,2,rep,name=answer_counts,json=answerCounts,proto3" json:"answer_counts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollResults) Reset() {
	*x = PollResults{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollResults) ProtoMessage() {}

func (x *PollResults) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollResults.ProtoReflect.Descriptor instead.
func (*PollResults) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{103}
}

func (x *PollResults) GetFinalized() bool {
	if x != nil {
		return x.Finalized
	}
	return false
}

func (x *PollResults) GetAnswerCounts() []*PollAnswerCount {
	if x != nil {
		return x.AnswerCounts
	}
	return nil
}

type Poll struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Question         *PollMedia             `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	Answers          []*PollAnswer          `protobuf:"bytes,2,rep,name=answers,proto3" json:"answers,omitempty"`
	AllowMultiselect bool                   `protobuf:"varint,3,opt,name=allow_multiselect,json=allowMultiselect,proto3" json:"allow_multiselect,omitempty"`
	LayoutType       int32                  `protobuf:"varint,4,opt,name=layout_type,json=layoutType,proto3" json:"layout_type,omitempty"` // Assuming PollLayoutType is int32
	Duration         int32                  `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	Results          *PollResults           `protobuf:"bytes,6,opt,name=results,proto3" json:"results,omitempty"`
	Expiry           *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expiry,proto3" json:"expiry,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Poll) Reset() {
	*x = Poll{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Poll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poll) ProtoMessage() {}

func (x *Poll) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poll.ProtoReflect.Descriptor instead.
func (*Poll) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{104}
}

func (x *Poll) GetQuestion() *PollMedia {
	if x != nil {
		return x.Question
	}
	return nil
}

func (x *Poll) GetAnswers() []*PollAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *Poll) GetAllowMultiselect() bool {
	if x != nil {
		return x.AllowMultiselect
	}
	return false
}

func (x *Poll) GetLayoutType() int32 {
	if x != nil {
		return x.LayoutType
	}
	return 0
}

func (x *Poll) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Poll) GetResults() *PollResults {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *Poll) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

type SKUType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Represents the integer value of the enum
	Value         int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SKUType) Reset() {
	*x = SKUType{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SKUType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SKUType) ProtoMessage() {}

func (x *SKUType) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SKUType.ProtoReflect.Descriptor instead.
func (*SKUType) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{105}
}

func (x *SKUType) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SKUFlags struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Represents the integer value of the enum
	Value         int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SKUFlags) Reset() {
	*x = SKUFlags{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SKUFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SKUFlags) ProtoMessage() {}

func (x *SKUFlags) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SKUFlags.ProtoReflect.Descriptor instead.
func (*SKUFlags) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{106}
}

func (x *SKUFlags) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SKU struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          int32                  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"` // Assuming SKUType is int32
	ApplicationId string                 `protobuf:"bytes,3,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Slug          string                 `protobuf:"bytes,5,opt,name=slug,proto3" json:"slug,omitempty"`
	Flags         int32                  `protobuf:"varint,6,opt,name=flags,proto3" json:"flags,omitempty"` // Assuming SKUFlags is int32
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SKU) Reset() {
	*x = SKU{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SKU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SKU) ProtoMessage() {}

func (x *SKU) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SKU.ProtoReflect.Descriptor instead.
func (*SKU) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{107}
}

func (x *SKU) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SKU) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SKU) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *SKU) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SKU) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *SKU) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type SubscriptionStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Represents the integer value of the enum
	Value         int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscriptionStatus) Reset() {
	*x = SubscriptionStatus{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionStatus) ProtoMessage() {}

func (x *SubscriptionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionStatus.ProtoReflect.Descriptor instead.
func (*SubscriptionStatus) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{108}
}

func (x *SubscriptionStatus) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Subscription struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId             string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SkuIds             []string               `protobuf:"bytes,3,rep,name=sku_ids,json=skuIds,proto3" json:"sku_ids,omitempty"`
	EntitlementIds     []string               `protobuf:"bytes,4,rep,name=entitlement_ids,json=entitlementIds,proto3" json:"entitlement_ids,omitempty"`
	RenewalSkuIds      []string               `protobuf:"bytes,5,rep,name=renewal_sku_ids,json=renewalSkuIds,proto3" json:"renewal_sku_ids,omitempty"`
	CurrentPeriodStart *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=current_period_start,json=currentPeriodStart,proto3" json:"current_period_start,omitempty"`
	CurrentPeriodEnd   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=current_period_end,json=currentPeriodEnd,proto3" json:"current_period_end,omitempty"`
	Status             int32                  `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"` // Assuming SubscriptionStatus is int32
	CanceledAt         *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=canceled_at,json=canceledAt,proto3" json:"canceled_at,omitempty"`
	Country            string                 `protobuf:"bytes,10,opt,name=country,proto3" json:"country,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{109}
}

func (x *Subscription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Subscription) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Subscription) GetSkuIds() []string {
	if x != nil {
		return x.SkuIds
	}
	return nil
}

func (x *Subscription) GetEntitlementIds() []string {
	if x != nil {
		return x.EntitlementIds
	}
	return nil
}

func (x *Subscription) GetRenewalSkuIds() []string {
	if x != nil {
		return x.RenewalSkuIds
	}
	return nil
}

func (x *Subscription) GetCurrentPeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentPeriodStart
	}
	return nil
}

func (x *Subscription) GetCurrentPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentPeriodEnd
	}
	return nil
}

func (x *Subscription) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Subscription) GetCanceledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CanceledAt
	}
	return nil
}

func (x *Subscription) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type EntitlementType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Represents the integer value of the enum
	Value         int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntitlementType) Reset() {
	*x = EntitlementType{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntitlementType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitlementType) ProtoMessage() {}

func (x *EntitlementType) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitlementType.ProtoReflect.Descriptor instead.
func (*EntitlementType) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{110}
}

func (x *EntitlementType) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Entitlement struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SkuId          string                 `protobuf:"bytes,2,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`
	ApplicationId  string                 `protobuf:"bytes,3,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	UserId         string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type           int32                  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"` // Assuming EntitlementType is int32
	Deleted        bool                   `protobuf:"varint,6,opt,name=deleted,proto3" json:"deleted,omitempty"`
	StartsAt       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=starts_at,json=startsAt,proto3" json:"starts_at,omitempty"`
	EndsAt         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=ends_at,json=endsAt,proto3" json:"ends_at,omitempty"`
	GuildId        string                 `protobuf:"bytes,9,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Consumed       bool                   `protobuf:"varint,10,opt,name=consumed,proto3" json:"consumed,omitempty"`
	SubscriptionId string                 `protobuf:"bytes,11,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Entitlement) Reset() {
	*x = Entitlement{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Entitlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entitlement) ProtoMessage() {}

func (x *Entitlement) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entitlement.ProtoReflect.Descriptor instead.
func (*Entitlement) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{111}
}

func (x *Entitlement) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Entitlement) GetSkuId() string {
	if x != nil {
		return x.SkuId
	}
	return ""
}

func (x *Entitlement) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *Entitlement) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Entitlement) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Entitlement) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *Entitlement) GetStartsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartsAt
	}
	return nil
}

func (x *Entitlement) GetEndsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndsAt
	}
	return nil
}

func (x *Entitlement) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *Entitlement) GetConsumed() bool {
	if x != nil {
		return x.Consumed
	}
	return false
}

func (x *Entitlement) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type EntitlementOwnerType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Represents the integer value of the enum
	Value         int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntitlementOwnerType) Reset() {
	*x = EntitlementOwnerType{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntitlementOwnerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitlementOwnerType) ProtoMessage() {}

func (x *EntitlementOwnerType) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitlementOwnerType.ProtoReflect.Descriptor instead.
func (*EntitlementOwnerType) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{112}
}

func (x *EntitlementOwnerType) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type EntitlementTest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SkuId         string                 `protobuf:"bytes,1,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`
	OwnerId       string                 `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	OwnerType     int32                  `protobuf:"varint,3,opt,name=owner_type,json=ownerType,proto3" json:"owner_type,omitempty"` // Assuming EntitlementOwnerType is int32
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntitlementTest) Reset() {
	*x = EntitlementTest{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntitlementTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitlementTest) ProtoMessage() {}

func (x *EntitlementTest) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitlementTest.ProtoReflect.Descriptor instead.
func (*EntitlementTest) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{113}
}

func (x *EntitlementTest) GetSkuId() string {
	if x != nil {
		return x.SkuId
	}
	return ""
}

func (x *EntitlementTest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *EntitlementTest) GetOwnerType() int32 {
	if x != nil {
		return x.OwnerType
	}
	return 0
}

type EntitlementFilterOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SkuIds        []string               `protobuf:"bytes,2,rep,name=sku_ids,json=skuIds,proto3" json:"sku_ids,omitempty"`
	Before        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=before,proto3" json:"before,omitempty"`
	After         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=after,proto3" json:"after,omitempty"`
	Limit         int32                  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	GuildId       string                 `protobuf:"bytes,6,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	ExcludeEnded  bool                   `protobuf:"varint,7,opt,name=exclude_ended,json=excludeEnded,proto3" json:"exclude_ended,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntitlementFilterOptions) Reset() {
	*x = EntitlementFilterOptions{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntitlementFilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitlementFilterOptions) ProtoMessage() {}

func (x *EntitlementFilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitlementFilterOptions.ProtoReflect.Descriptor instead.
func (*EntitlementFilterOptions) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{114}
}

func (x *EntitlementFilterOptions) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EntitlementFilterOptions) GetSkuIds() []string {
	if x != nil {
		return x.SkuIds
	}
	return nil
}

func (x *EntitlementFilterOptions) GetBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *EntitlementFilterOptions) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *EntitlementFilterOptions) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *EntitlementFilterOptions) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *EntitlementFilterOptions) GetExcludeEnded() bool {
	if x != nil {
		return x.ExcludeEnded
	}
	return false
}

type State struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Assuming Ready is a simple boolean flag indicating readiness.
	Ready bool `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
	// MaxMessageCount represents how many messages per channel the state will store.
	MaxMessageCount    int32 `protobuf:"varint,2,opt,name=max_message_count,json=maxMessageCount,proto3" json:"max_message_count,omitempty"`
	TrackChannels      bool  `protobuf:"varint,3,opt,name=track_channels,json=trackChannels,proto3" json:"track_channels,omitempty"`
	TrackThreads       bool  `protobuf:"varint,4,opt,name=track_threads,json=trackThreads,proto3" json:"track_threads,omitempty"`
	TrackEmojis        bool  `protobuf:"varint,5,opt,name=track_emojis,json=trackEmojis,proto3" json:"track_emojis,omitempty"`
	TrackMembers       bool  `protobuf:"varint,6,opt,name=track_members,json=trackMembers,proto3" json:"track_members,omitempty"`
	TrackThreadMembers bool  `protobuf:"varint,7,opt,name=track_thread_members,json=trackThreadMembers,proto3" json:"track_thread_members,omitempty"`
	TrackRoles         bool  `protobuf:"varint,8,opt,name=track_roles,json=trackRoles,proto3" json:"track_roles,omitempty"`
	TrackVoice         bool  `protobuf:"varint,9,opt,name=track_voice,json=trackVoice,proto3" json:"track_voice,omitempty"`
	TrackPresences     bool  `protobuf:"varint,10,opt,name=track_presences,json=trackPresences,proto3" json:"track_presences,omitempty"`
	// Map from Guild ID (string) to GuildMessage
	GuildMap map[string]*Guild `protobuf:"bytes,11,rep,name=guild_map,json=guildMap,proto3" json:"guild_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Map from Channel ID (string) to ChannelMessage
	ChannelMap    map[string]*Channel `protobuf:"bytes,12,rep,name=channel_map,json=channelMap,proto3" json:"channel_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *State) Reset() {
	*x = State{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{115}
}

func (x *State) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *State) GetMaxMessageCount() int32 {
	if x != nil {
		return x.MaxMessageCount
	}
	return 0
}

func (x *State) GetTrackChannels() bool {
	if x != nil {
		return x.TrackChannels
	}
	return false
}

func (x *State) GetTrackThreads() bool {
	if x != nil {
		return x.TrackThreads
	}
	return false
}

func (x *State) GetTrackEmojis() bool {
	if x != nil {
		return x.TrackEmojis
	}
	return false
}

func (x *State) GetTrackMembers() bool {
	if x != nil {
		return x.TrackMembers
	}
	return false
}

func (x *State) GetTrackThreadMembers() bool {
	if x != nil {
		return x.TrackThreadMembers
	}
	return false
}

func (x *State) GetTrackRoles() bool {
	if x != nil {
		return x.TrackRoles
	}
	return false
}

func (x *State) GetTrackVoice() bool {
	if x != nil {
		return x.TrackVoice
	}
	return false
}

func (x *State) GetTrackPresences() bool {
	if x != nil {
		return x.TrackPresences
	}
	return false
}

func (x *State) GetGuildMap() map[string]*Guild {
	if x != nil {
		return x.GuildMap
	}
	return nil
}

func (x *State) GetChannelMap() map[string]*Channel {
	if x != nil {
		return x.ChannelMap
	}
	return nil
}

// A User stores all data for an individual Discord user.
type User struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the user.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The email of the user. This is only present when
	// the application possesses the email scope for the user.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// The user's username.
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// The hash of the user's avatar. Use Session.UserAvatar
	// to retrieve the avatar itself.
	Avatar string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	// The user's chosen language option.
	Locale string `protobuf:"bytes,5,opt,name=locale,proto3" json:"locale,omitempty"`
	// The discriminator of the user (4 numbers after name).
	Discriminator string `protobuf:"bytes,6,opt,name=discriminator,proto3" json:"discriminator,omitempty"`
	// The user's display name, if it is set.
	// For bots, this is the application name.
	GlobalName string `protobuf:"bytes,7,opt,name=global_name,json=globalName,proto3" json:"global_name,omitempty"`
	// The token of the user. This is only present for
	// the user represented by the current session.
	Token string `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"` // Note: Be cautious when transmitting sensitive data like tokens.
	// Whether the user's email is verified.
	Verified bool `protobuf:"varint,9,opt,name=verified,proto3" json:"verified,omitempty"`
	// Whether the user has multi-factor authentication enabled.
	MfaEnabled bool `protobuf:"varint,10,opt,name=mfa_enabled,json=mfaEnabled,proto3" json:"mfa_enabled,omitempty"`
	// The hash of the user's banner image.
	Banner string `protobuf:"bytes,11,opt,name=banner,proto3" json:"banner,omitempty"`
	// User's banner color, encoded as an integer representation of hexadecimal color code
	AccentColor int32 `protobuf:"varint,12,opt,name=accent_color,json=accentColor,proto3" json:"accent_color,omitempty"`
	// Whether the user is a bot.
	Bot bool `protobuf:"varint,13,opt,name=bot,proto3" json:"bot,omitempty"`
	// The public flags on a user's account.
	// This is a combination of bit masks; the presence of a certain flag can
	// be checked by performing a bitwise AND between this int and the flag.
	// We store this as an int32 because flags are bitfields.
	PublicFlagsValue int32 `protobuf:"varint,14,opt,name=public_flags_value,json=publicFlagsValue,proto3" json:"public_flags_value,omitempty"` // Storing the integer value of UserFlags
	// The type of Nitro subscription on a user's account.
	// Only available when the request is authorized via a Bearer token.
	PremiumType UserPremiumType `protobuf:"varint,15,opt,name=premium_type,json=premiumType,proto3,enum=discord_v1.UserPremiumType" json:"premium_type,omitempty"`
	// Whether the user is an Official Discord System user (part of the urgent message system).
	System bool `protobuf:"varint,16,opt,name=system,proto3" json:"system,omitempty"`
	// The flags on a user's account.
	// Only available when the request is authorized via a Bearer token.
	// This is different from public_flags and also stored as an integer.
	Flags         int32 `protobuf:"varint,17,opt,name=flags,proto3" json:"flags,omitempty"` // Storing the integer value of general flags
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{116}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *User) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *User) GetDiscriminator() string {
	if x != nil {
		return x.Discriminator
	}
	return ""
}

func (x *User) GetGlobalName() string {
	if x != nil {
		return x.GlobalName
	}
	return ""
}

func (x *User) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *User) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *User) GetMfaEnabled() bool {
	if x != nil {
		return x.MfaEnabled
	}
	return false
}

func (x *User) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *User) GetAccentColor() int32 {
	if x != nil {
		return x.AccentColor
	}
	return 0
}

func (x *User) GetBot() bool {
	if x != nil {
		return x.Bot
	}
	return false
}

func (x *User) GetPublicFlagsValue() int32 {
	if x != nil {
		return x.PublicFlagsValue
	}
	return 0
}

func (x *User) GetPremiumType() UserPremiumType {
	if x != nil {
		return x.PremiumType
	}
	return UserPremiumType_USER_PREMIUM_TYPE_UNSPECIFIED
}

func (x *User) GetSystem() bool {
	if x != nil {
		return x.System
	}
	return false
}

func (x *User) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

// Corresponds to the Go struct TeamMember
type TeamMember struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	User            *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`                                                                               // Corresponds to User *user
	TeamId          string                 `protobuf:"bytes,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`                                                             // Corresponds to string TeamID
	MembershipState MembershipState        `protobuf:"varint,3,opt,name=membership_state,json=membershipState,proto3,enum=discord_v1.MembershipState" json:"membership_state,omitempty"` // Corresponds to MembershipState MembershipState
	Permissions     []string               `protobuf:"bytes,4,rep,name=permissions,proto3" json:"permissions,omitempty"`                                                                 // Corresponds to []string Permissions
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TeamMember) Reset() {
	*x = TeamMember{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMember) ProtoMessage() {}

func (x *TeamMember) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMember.ProtoReflect.Descriptor instead.
func (*TeamMember) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{117}
}

func (x *TeamMember) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *TeamMember) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *TeamMember) GetMembershipState() MembershipState {
	if x != nil {
		return x.MembershipState
	}
	return MembershipState_MEMBERSHIP_STATE_UNKNOWN
}

func (x *TeamMember) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// Corresponds to the Go struct Team
type Team struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                        // Corresponds to string ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                    // Corresponds to string Name
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                      // Corresponds to string Description
	Icon          string                 `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`                                    // Corresponds to string Icon
	OwnerUserId   string                 `protobuf:"bytes,5,opt,name=owner_user_id,json=ownerUserId,proto3" json:"owner_user_id,omitempty"` // Corresponds to string OwnerID
	Members       []*TeamMember          `protobuf:"bytes,6,rep,name=members,proto3" json:"members,omitempty"`                              // Corresponds to []*TeamMember Members
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Team) Reset() {
	*x = Team{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{118}
}

func (x *Team) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Team) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Team) GetOwnerUserId() string {
	if x != nil {
		return x.OwnerUserId
	}
	return ""
}

func (x *Team) GetMembers() []*TeamMember {
	if x != nil {
		return x.Members
	}
	return nil
}

// Webhook stores the data for a webhook.
type Webhook struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type      WebhookType            `protobuf:"varint,2,opt,name=type,proto3,enum=discord_v1.WebhookType" json:"type,omitempty"`
	GuildId   string                 `protobuf:"bytes,3,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	ChannelId string                 `protobuf:"bytes,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	User      *User                  `protobuf:"bytes,5,opt,name=user,proto3,oneof" json:"user,omitempty"` // Pointer in Go -> optional message
	Name      string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Avatar    string                 `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Token     string                 `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
	// ApplicationID is the bot/OAuth2 application that created this webhook
	// OmitEmpty tag in Go -> optional string
	ApplicationId *string `protobuf:"bytes,9,opt,name=application_id,json=applicationId,proto3,oneof" json:"application_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Webhook) Reset() {
	*x = Webhook{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Webhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Webhook) ProtoMessage() {}

func (x *Webhook) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Webhook.ProtoReflect.Descriptor instead.
func (*Webhook) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{119}
}

func (x *Webhook) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Webhook) GetType() WebhookType {
	if x != nil {
		return x.Type
	}
	return WebhookType_WEBHOOK_TYPE_UNSPECIFIED
}

func (x *Webhook) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *Webhook) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *Webhook) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Webhook) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Webhook) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Webhook) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Webhook) GetApplicationId() string {
	if x != nil && x.ApplicationId != nil {
		return *x.ApplicationId
	}
	return ""
}

// WebhookParams is a struct for webhook params, used in the WebhookExecute command.
type WebhookParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// OmitEmpty tag in Go -> optional string
	Content *string `protobuf:"bytes,1,opt,name=content,proto3,oneof" json:"content,omitempty"`
	// OmitEmpty tag in Go -> optional string
	Username *string `protobuf:"bytes,2,opt,name=username,proto3,oneof" json:"username,omitempty"`
	// OmitEmpty tag in Go -> optional string
	AvatarUrl *string `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl,proto3,oneof" json:"avatar_url,omitempty"`
	// OmitEmpty tag in Go -> optional bool
	Tts *bool `protobuf:"varint,4,opt,name=tts,proto3,oneof" json:"tts,omitempty"`
	// json:"-" tag in Go. Files are typically sent separately via multipart/form-data.
	// Represented here as a repeated field of the placeholder File message.
	Files []*File `protobuf:"bytes,5,rep,name=files,proto3" json:"files,omitempty"`
	// Slice in Go -> repeated message
	Components []*anypb.Any `protobuf:"bytes,6,rep,name=components,proto3" json:"components,omitempty"` // Using Any for MessageComponent
	// Slice of pointers in Go -> repeated message
	Embeds []*MessageEmbed `protobuf:"bytes,7,rep,name=embeds,proto3" json:"embeds,omitempty"`
	// Slice of pointers in Go -> repeated message
	Attachments []*MessageAttachment `protobuf:"bytes,8,rep,name=attachments,proto3" json:"attachments,omitempty"`
	// Pointer in Go + OmitEmpty -> optional message
	AllowedMentions *MessageAllowedMentions `protobuf:"bytes,9,opt,name=allowed_mentions,json=allowedMentions,proto3,oneof" json:"allowed_mentions,omitempty"`
	Flags           *MessageFlags           `protobuf:"varint,10,opt,name=flags,proto3,enum=discord_v1.MessageFlags,oneof" json:"flags,omitempty"` // Using int32 as it's a common integer type for flags
	// Name of the thread to create.
	// NOTE: can only be set if the webhook channel is a forum.
	// OmitEmpty tag in Go -> optional string
	ThreadName    *string `protobuf:"bytes,11,opt,name=thread_name,json=threadName,proto3,oneof" json:"thread_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebhookParams) Reset() {
	*x = WebhookParams{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebhookParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookParams) ProtoMessage() {}

func (x *WebhookParams) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookParams.ProtoReflect.Descriptor instead.
func (*WebhookParams) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{120}
}

func (x *WebhookParams) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *WebhookParams) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *WebhookParams) GetAvatarUrl() string {
	if x != nil && x.AvatarUrl != nil {
		return *x.AvatarUrl
	}
	return ""
}

func (x *WebhookParams) GetTts() bool {
	if x != nil && x.Tts != nil {
		return *x.Tts
	}
	return false
}

func (x *WebhookParams) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *WebhookParams) GetComponents() []*anypb.Any {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *WebhookParams) GetEmbeds() []*MessageEmbed {
	if x != nil {
		return x.Embeds
	}
	return nil
}

func (x *WebhookParams) GetAttachments() []*MessageAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *WebhookParams) GetAllowedMentions() *MessageAllowedMentions {
	if x != nil {
		return x.AllowedMentions
	}
	return nil
}

func (x *WebhookParams) GetFlags() MessageFlags {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return MessageFlags_MESSAGE_FLAGS_CROSS_POSTED
}

func (x *WebhookParams) GetThreadName() string {
	if x != nil && x.ThreadName != nil {
		return *x.ThreadName
	}
	return ""
}

// WebhookEdit stores data for editing of a webhook message.
type WebhookEdit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pointer in Go + OmitEmpty -> optional string
	Content    *string      `protobuf:"bytes,1,opt,name=content,proto3,oneof" json:"content,omitempty"`
	Components []*anypb.Any `protobuf:"bytes,2,rep,name=components,proto3" json:"components,omitempty"` // Changed from optional repeated
	// Pointer to Slice of Pointers in Go + OmitEmpty -> repeated message
	Embeds []*MessageEmbed `protobuf:"bytes,3,rep,name=embeds,proto3" json:"embeds,omitempty"` // Changed from optional repeated
	// json:"-" tag in Go. Files are typically sent separately.
	Files []*File `protobuf:"bytes,4,rep,name=files,proto3" json:"files,omitempty"`
	// Pointer to Slice of Pointers in Go + OmitEmpty -> repeated message
	Attachments []*MessageAttachment `protobuf:"bytes,5,rep,name=attachments,proto3" json:"attachments,omitempty"` // Changed from optional repeated
	// Pointer in Go + OmitEmpty -> optional message
	AllowedMentions *MessageAllowedMentions `protobuf:"bytes,6,opt,name=allowed_mentions,json=allowedMentions,proto3,oneof" json:"allowed_mentions,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *WebhookEdit) Reset() {
	*x = WebhookEdit{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebhookEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookEdit) ProtoMessage() {}

func (x *WebhookEdit) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookEdit.ProtoReflect.Descriptor instead.
func (*WebhookEdit) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{121}
}

func (x *WebhookEdit) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *WebhookEdit) GetComponents() []*anypb.Any {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *WebhookEdit) GetEmbeds() []*MessageEmbed {
	if x != nil {
		return x.Embeds
	}
	return nil
}

func (x *WebhookEdit) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *WebhookEdit) GetAttachments() []*MessageAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *WebhookEdit) GetAllowedMentions() *MessageAllowedMentions {
	if x != nil {
		return x.AllowedMentions
	}
	return nil
}

type ComponentEmoji struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id            string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Animated      bool                   `protobuf:"varint,3,opt,name=animated,proto3" json:"animated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentEmoji) Reset() {
	*x = ComponentEmoji{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentEmoji) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentEmoji) ProtoMessage() {}

func (x *ComponentEmoji) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentEmoji.ProtoReflect.Descriptor instead.
func (*ComponentEmoji) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{122}
}

func (x *ComponentEmoji) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComponentEmoji) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ComponentEmoji) GetAnimated() bool {
	if x != nil {
		return x.Animated
	}
	return false
}

// ApplicationCommand represents an application's slash command.
type ApplicationCommand struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ApplicationId     string                 `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	GuildId           string                 `protobuf:"bytes,3,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Version           string                 `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Type              ApplicationCommandType `protobuf:"varint,5,opt,name=type,proto3,enum=discord_v1.ApplicationCommandType" json:"type,omitempty"`
	Name              string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	NameLocalizations map[string]string      `protobuf:"bytes,7,rep,name=name_localizations,json=nameLocalizations,proto3" json:"name_localizations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Assuming Locale is stringable or maps to string
	// NOTE: DefaultPermission will be soon deprecated. Use DefaultMemberPermissions and Contexts instead.
	// DefaultPermission *bool `json:"default_permission,omitempty"` - Use optional bool for deprecation clarity? Or omit entirely as deprecated? Let's keep for now, marked as deprecated.
	//
	// Deprecated: Marked as deprecated in discord-v1/discordgo.proto.
	DefaultPermission        *bool `protobuf:"varint,8,opt,name=default_permission,json=defaultPermission,proto3,oneof" json:"default_permission,omitempty"`
	DefaultMemberPermissions int64 `protobuf:"varint,9,opt,name=default_member_permissions,json=defaultMemberPermissions,proto3" json:"default_member_permissions,omitempty"` // Use int64 for permissions bitfield
	Nsfw                     *bool `protobuf:"varint,10,opt,name=nsfw,proto3,oneof" json:"nsfw,omitempty"`
	// Deprecated: use Contexts instead.
	// DMPermission *bool `json:"dm_permission,omitempty"` - Similar to DefaultPermission, mark deprecated or omit. Keep for now, marked.
	//
	// Deprecated: Marked as deprecated in discord-v1/discordgo.proto.
	DmPermission     *bool                        `protobuf:"varint,11,opt,name=dm_permission,json=dmPermission,proto3,oneof" json:"dm_permission,omitempty"`
	Contexts         []InteractionContextType     `protobuf:"varint,12,rep,packed,name=contexts,proto3,enum=discord_v1.InteractionContextType" json:"contexts,omitempty"`
	IntegrationTypes []ApplicationIntegrationType `protobuf:"varint,13,rep,packed,name=integration_types,json=integrationTypes,proto3,enum=discord_v1.ApplicationIntegrationType" json:"integration_types,omitempty"`
	// NOTE: Chat commands only. Otherwise it mustn't be set.
	Description              string                      `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	DescriptionLocalizations map[string]string           `protobuf:"bytes,15,rep,name=description_localizations,json=descriptionLocalizations,proto3" json:"description_localizations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Assuming Locale is stringable or maps to string
	Options                  []*ApplicationCommandOption `protobuf:"bytes,16,rep,name=options,proto3" json:"options,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ApplicationCommand) Reset() {
	*x = ApplicationCommand{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationCommand) ProtoMessage() {}

func (x *ApplicationCommand) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationCommand.ProtoReflect.Descriptor instead.
func (*ApplicationCommand) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{123}
}

func (x *ApplicationCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApplicationCommand) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *ApplicationCommand) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ApplicationCommand) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ApplicationCommand) GetType() ApplicationCommandType {
	if x != nil {
		return x.Type
	}
	return ApplicationCommandType_APPLICATION_COMMAND_TYPE_UNKNOWN
}

func (x *ApplicationCommand) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationCommand) GetNameLocalizations() map[string]string {
	if x != nil {
		return x.NameLocalizations
	}
	return nil
}

// Deprecated: Marked as deprecated in discord-v1/discordgo.proto.
func (x *ApplicationCommand) GetDefaultPermission() bool {
	if x != nil && x.DefaultPermission != nil {
		return *x.DefaultPermission
	}
	return false
}

func (x *ApplicationCommand) GetDefaultMemberPermissions() int64 {
	if x != nil {
		return x.DefaultMemberPermissions
	}
	return 0
}

func (x *ApplicationCommand) GetNsfw() bool {
	if x != nil && x.Nsfw != nil {
		return *x.Nsfw
	}
	return false
}

// Deprecated: Marked as deprecated in discord-v1/discordgo.proto.
func (x *ApplicationCommand) GetDmPermission() bool {
	if x != nil && x.DmPermission != nil {
		return *x.DmPermission
	}
	return false
}

func (x *ApplicationCommand) GetContexts() []InteractionContextType {
	if x != nil {
		return x.Contexts
	}
	return nil
}

func (x *ApplicationCommand) GetIntegrationTypes() []ApplicationIntegrationType {
	if x != nil {
		return x.IntegrationTypes
	}
	return nil
}

func (x *ApplicationCommand) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ApplicationCommand) GetDescriptionLocalizations() map[string]string {
	if x != nil {
		return x.DescriptionLocalizations
	}
	return nil
}

func (x *ApplicationCommand) GetOptions() []*ApplicationCommandOption {
	if x != nil {
		return x.Options
	}
	return nil
}

// ApplicationCommandOption represents an option/subcommand/subcommands group.
type ApplicationCommandOption struct {
	state                    protoimpl.MessageState       `protogen:"open.v1"`
	Type                     ApplicationCommandOptionType `protobuf:"varint,1,opt,name=type,proto3,enum=discord_v1.ApplicationCommandOptionType" json:"type,omitempty"`
	Name                     string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NameLocalizations        map[string]string            `protobuf:"bytes,3,rep,name=name_localizations,json=nameLocalizations,proto3" json:"name_localizations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Assuming Locale is stringable or maps to string
	Description              string                       `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	DescriptionLocalizations map[string]string            `protobuf:"bytes,5,rep,name=description_localizations,json=descriptionLocalizations,proto3" json:"description_localizations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Assuming Locale is stringable or maps to string
	ChannelTypes             []ChannelType                `protobuf:"varint,7,rep,packed,name=channel_types,json=channelTypes,proto3,enum=discord_v1.ChannelType" json:"channel_types,omitempty"`
	Required                 bool                         `protobuf:"varint,8,opt,name=required,proto3" json:"required,omitempty"`
	Options                  []*ApplicationCommandOption  `protobuf:"bytes,9,rep,name=options,proto3" json:"options,omitempty"` // Recursive structure
	// NOTE: mutually exclusive with Choices.
	Autocomplete bool                              `protobuf:"varint,10,opt,name=autocomplete,proto3" json:"autocomplete,omitempty"`
	Choices      []*ApplicationCommandOptionChoice `protobuf:"bytes,11,rep,name=choices,proto3" json:"choices,omitempty"`
	// Minimal value of number/integer option.
	// Use optional for clarity on presence/absence
	MinValue *float64 `protobuf:"fixed64,12,opt,name=min_value,json=minValue,proto3,oneof" json:"min_value,omitempty"` // Can apply to integer/number
	// Maximum value of number/integer option.
	MaxValue *float64 `protobuf:"fixed64,13,opt,name=max_value,json=maxValue,proto3,oneof" json:"max_value,omitempty"` // Can apply to integer/number
	// Minimum length of string option.
	MinLength *int32 `protobuf:"varint,14,opt,name=min_length,json=minLength,proto3,oneof" json:"min_length,omitempty"`
	// Maximum length of string option.
	MaxLength     *int32 `protobuf:"varint,15,opt,name=max_length,json=maxLength,proto3,oneof" json:"max_length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplicationCommandOption) Reset() {
	*x = ApplicationCommandOption{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationCommandOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationCommandOption) ProtoMessage() {}

func (x *ApplicationCommandOption) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationCommandOption.ProtoReflect.Descriptor instead.
func (*ApplicationCommandOption) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{124}
}

func (x *ApplicationCommandOption) GetType() ApplicationCommandOptionType {
	if x != nil {
		return x.Type
	}
	return ApplicationCommandOptionType_APPLICATION_COMMAND_OPTION_TYPE_UNKNOWN
}

func (x *ApplicationCommandOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationCommandOption) GetNameLocalizations() map[string]string {
	if x != nil {
		return x.NameLocalizations
	}
	return nil
}

func (x *ApplicationCommandOption) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ApplicationCommandOption) GetDescriptionLocalizations() map[string]string {
	if x != nil {
		return x.DescriptionLocalizations
	}
	return nil
}

func (x *ApplicationCommandOption) GetChannelTypes() []ChannelType {
	if x != nil {
		return x.ChannelTypes
	}
	return nil
}

func (x *ApplicationCommandOption) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *ApplicationCommandOption) GetOptions() []*ApplicationCommandOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ApplicationCommandOption) GetAutocomplete() bool {
	if x != nil {
		return x.Autocomplete
	}
	return false
}

func (x *ApplicationCommandOption) GetChoices() []*ApplicationCommandOptionChoice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *ApplicationCommandOption) GetMinValue() float64 {
	if x != nil && x.MinValue != nil {
		return *x.MinValue
	}
	return 0
}

func (x *ApplicationCommandOption) GetMaxValue() float64 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

func (x *ApplicationCommandOption) GetMinLength() int32 {
	if x != nil && x.MinLength != nil {
		return *x.MinLength
	}
	return 0
}

func (x *ApplicationCommandOption) GetMaxLength() int32 {
	if x != nil && x.MaxLength != nil {
		return *x.MaxLength
	}
	return 0
}

// ApplicationCommandOptionChoice represents a slash command option choice.
type ApplicationCommandOptionChoice struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Name              string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NameLocalizations map[string]string      `protobuf:"bytes,2,rep,name=name_localizations,json=nameLocalizations,proto3" json:"name_localizations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Assuming Locale is stringable or maps to string
	// NOTE: Contains the value specified by Type.
	// Use oneof for the value, as it can be different types.
	//
	// Types that are valid to be assigned to Value:
	//
	//	*ApplicationCommandOptionChoice_StringValue
	//	*ApplicationCommandOptionChoice_IntegerValue
	//	*ApplicationCommandOptionChoice_NumberValue
	Value         isApplicationCommandOptionChoice_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplicationCommandOptionChoice) Reset() {
	*x = ApplicationCommandOptionChoice{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationCommandOptionChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationCommandOptionChoice) ProtoMessage() {}

func (x *ApplicationCommandOptionChoice) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationCommandOptionChoice.ProtoReflect.Descriptor instead.
func (*ApplicationCommandOptionChoice) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{125}
}

func (x *ApplicationCommandOptionChoice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationCommandOptionChoice) GetNameLocalizations() map[string]string {
	if x != nil {
		return x.NameLocalizations
	}
	return nil
}

func (x *ApplicationCommandOptionChoice) GetValue() isApplicationCommandOptionChoice_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ApplicationCommandOptionChoice) GetStringValue() string {
	if x != nil {
		if x, ok := x.Value.(*ApplicationCommandOptionChoice_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *ApplicationCommandOptionChoice) GetIntegerValue() int64 {
	if x != nil {
		if x, ok := x.Value.(*ApplicationCommandOptionChoice_IntegerValue); ok {
			return x.IntegerValue
		}
	}
	return 0
}

func (x *ApplicationCommandOptionChoice) GetNumberValue() float64 {
	if x != nil {
		if x, ok := x.Value.(*ApplicationCommandOptionChoice_NumberValue); ok {
			return x.NumberValue
		}
	}
	return 0
}

type isApplicationCommandOptionChoice_Value interface {
	isApplicationCommandOptionChoice_Value()
}

type ApplicationCommandOptionChoice_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type ApplicationCommandOptionChoice_IntegerValue struct {
	IntegerValue int64 `protobuf:"varint,4,opt,name=integer_value,json=integerValue,proto3,oneof"`
}

type ApplicationCommandOptionChoice_NumberValue struct {
	NumberValue float64 `protobuf:"fixed64,5,opt,name=number_value,json=numberValue,proto3,oneof"`
}

func (*ApplicationCommandOptionChoice_StringValue) isApplicationCommandOptionChoice_Value() {}

func (*ApplicationCommandOptionChoice_IntegerValue) isApplicationCommandOptionChoice_Value() {}

func (*ApplicationCommandOptionChoice_NumberValue) isApplicationCommandOptionChoice_Value() {}

// ApplicationCommandPermissions represents a single user or role permission for a command.
type ApplicationCommandPermissions struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Id            string                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          ApplicationCommandPermissionType `protobuf:"varint,2,opt,name=type,proto3,enum=discord_v1.ApplicationCommandPermissionType" json:"type,omitempty"`
	Permission    bool                             `protobuf:"varint,3,opt,name=permission,proto3" json:"permission,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplicationCommandPermissions) Reset() {
	*x = ApplicationCommandPermissions{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationCommandPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationCommandPermissions) ProtoMessage() {}

func (x *ApplicationCommandPermissions) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationCommandPermissions.ProtoReflect.Descriptor instead.
func (*ApplicationCommandPermissions) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{126}
}

func (x *ApplicationCommandPermissions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApplicationCommandPermissions) GetType() ApplicationCommandPermissionType {
	if x != nil {
		return x.Type
	}
	return ApplicationCommandPermissionType_APPLICATION_COMMAND_PERMISSION_TYPE_UNKNOWN
}

func (x *ApplicationCommandPermissions) GetPermission() bool {
	if x != nil {
		return x.Permission
	}
	return false
}

// ApplicationCommandPermissionsList represents a list of ApplicationCommandPermissions, needed for serializing to JSON.
// This message might be useful if the API endpoint specifically wraps the list like this.
type ApplicationCommandPermissionsList struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Permissions   []*ApplicationCommandPermissions `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplicationCommandPermissionsList) Reset() {
	*x = ApplicationCommandPermissionsList{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationCommandPermissionsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationCommandPermissionsList) ProtoMessage() {}

func (x *ApplicationCommandPermissionsList) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationCommandPermissionsList.ProtoReflect.Descriptor instead.
func (*ApplicationCommandPermissionsList) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{127}
}

func (x *ApplicationCommandPermissionsList) GetPermissions() []*ApplicationCommandPermissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// GuildApplicationCommandPermissions represents all permissions for a single guild command.
type GuildApplicationCommandPermissions struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Id            string                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ApplicationId string                           `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	GuildId       string                           `protobuf:"bytes,3,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Permissions   []*ApplicationCommandPermissions `protobuf:"bytes,4,rep,name=permissions,proto3" json:"permissions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GuildApplicationCommandPermissions) Reset() {
	*x = GuildApplicationCommandPermissions{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuildApplicationCommandPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildApplicationCommandPermissions) ProtoMessage() {}

func (x *GuildApplicationCommandPermissions) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildApplicationCommandPermissions.ProtoReflect.Descriptor instead.
func (*GuildApplicationCommandPermissions) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{128}
}

func (x *GuildApplicationCommandPermissions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GuildApplicationCommandPermissions) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *GuildApplicationCommandPermissions) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *GuildApplicationCommandPermissions) GetPermissions() []*ApplicationCommandPermissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// Interaction represents data of an interaction.
type Interaction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AppId string                 `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Type  InteractionType        `protobuf:"varint,3,opt,name=type,proto3,enum=discord_v1.InteractionType" json:"type,omitempty"`
	// The Data field is an interface in Go, representing different interaction data types.
	// Use a oneof in protobuf to represent the possible data payloads.
	//
	// Types that are valid to be assigned to Data:
	//
	//	*Interaction_ApplicationCommandData
	//	*Interaction_MessageComponentData
	//	*Interaction_ModalSubmitData
	Data      isInteraction_Data `protobuf_oneof:"data"`
	GuildId   string             `protobuf:"bytes,8,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	ChannelId string             `protobuf:"bytes,9,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The message on which interaction was used.
	// NOTE: this field is only filled when a button click triggered the interaction. Otherwise it will be nil.
	// Use optional for message presence.
	Message *Message `protobuf:"bytes,10,opt,name=message,proto3,oneof" json:"message,omitempty"`
	// Bitwise set of permissions the app or bot has within the channel the interaction was sent from
	AppPermissions int64 `protobuf:"varint,11,opt,name=app_permissions,json=appPermissions,proto3" json:"app_permissions,omitempty"`
	// The member who invoked this interaction.
	// NOTE: this field is only filled when the slash command was invoked in a guild;
	// if it was invoked in a DM, the `User` field will be filled instead.
	// Make sure to check for `nil` before using this field. Use optional member.
	Member *Member `protobuf:"bytes,12,opt,name=member,proto3,oneof" json:"member,omitempty"`
	// The user who invoked this interaction.
	// NOTE: this field is only filled when the slash command was invoked in a DM;
	// if it was invoked in a guild, the `Member` field will be filled instead.
	// Make sure to check for `nil` before using this field. Use optional user.
	User *User `protobuf:"bytes,13,opt,name=user,proto3,oneof" json:"user,omitempty"`
	// The user's discord client locale.
	Locale string `protobuf:"bytes,14,opt,name=locale,proto3" json:"locale,omitempty"`
	// The guild's locale. This defaults to EnglishUS
	// NOTE: this field is only filled when the interaction was invoked in a guild. Use optional locale.
	GuildLocale *string                `protobuf:"bytes,15,opt,name=guild_locale,json=guildLocale,proto3,oneof" json:"guild_locale,omitempty"`
	Context     InteractionContextType `protobuf:"varint,16,opt,name=context,proto3,enum=discord_v1.InteractionContextType" json:"context,omitempty"`
	// Map of integration type to owner ID (string)
	AuthorizingIntegrationOwners map[int32]string `protobuf:"bytes,17,rep,name=authorizing_integration_owners,json=authorizingIntegrationOwners,proto3" json:"authorizing_integration_owners,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Mapping enum int value to string
	Token                        string           `protobuf:"bytes,18,opt,name=token,proto3" json:"token,omitempty"`
	Version                      int32            `protobuf:"varint,19,opt,name=version,proto3" json:"version,omitempty"`
	// Any entitlements for the invoking user, representing access to premium SKUs.
	// NOTE: this field is only filled in monetized apps. Repeated entitlements.
	Entitlements  []*Entitlement `protobuf:"bytes,20,rep,name=entitlements,proto3" json:"entitlements,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Interaction) Reset() {
	*x = Interaction{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Interaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interaction) ProtoMessage() {}

func (x *Interaction) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interaction.ProtoReflect.Descriptor instead.
func (*Interaction) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{129}
}

func (x *Interaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Interaction) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Interaction) GetType() InteractionType {
	if x != nil {
		return x.Type
	}
	return InteractionType_INTERACTION_TYPE_UNKNOWN
}

func (x *Interaction) GetData() isInteraction_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Interaction) GetApplicationCommandData() *ApplicationCommandInteractionData {
	if x != nil {
		if x, ok := x.Data.(*Interaction_ApplicationCommandData); ok {
			return x.ApplicationCommandData
		}
	}
	return nil
}

func (x *Interaction) GetMessageComponentData() *MessageComponentInteractionData {
	if x != nil {
		if x, ok := x.Data.(*Interaction_MessageComponentData); ok {
			return x.MessageComponentData
		}
	}
	return nil
}

func (x *Interaction) GetModalSubmitData() *ModalSubmitInteractionData {
	if x != nil {
		if x, ok := x.Data.(*Interaction_ModalSubmitData); ok {
			return x.ModalSubmitData
		}
	}
	return nil
}

func (x *Interaction) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *Interaction) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *Interaction) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Interaction) GetAppPermissions() int64 {
	if x != nil {
		return x.AppPermissions
	}
	return 0
}

func (x *Interaction) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *Interaction) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Interaction) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *Interaction) GetGuildLocale() string {
	if x != nil && x.GuildLocale != nil {
		return *x.GuildLocale
	}
	return ""
}

func (x *Interaction) GetContext() InteractionContextType {
	if x != nil {
		return x.Context
	}
	return InteractionContextType_INTERACTION_CONTEXT_UNKNOWN
}

func (x *Interaction) GetAuthorizingIntegrationOwners() map[int32]string {
	if x != nil {
		return x.AuthorizingIntegrationOwners
	}
	return nil
}

func (x *Interaction) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Interaction) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Interaction) GetEntitlements() []*Entitlement {
	if x != nil {
		return x.Entitlements
	}
	return nil
}

type isInteraction_Data interface {
	isInteraction_Data()
}

type Interaction_ApplicationCommandData struct {
	ApplicationCommandData *ApplicationCommandInteractionData `protobuf:"bytes,4,opt,name=application_command_data,json=applicationCommandData,proto3,oneof"`
}

type Interaction_MessageComponentData struct {
	MessageComponentData *MessageComponentInteractionData `protobuf:"bytes,5,opt,name=message_component_data,json=messageComponentData,proto3,oneof"`
}

type Interaction_ModalSubmitData struct {
	ModalSubmitData *ModalSubmitInteractionData `protobuf:"bytes,6,opt,name=modal_submit_data,json=modalSubmitData,proto3,oneof"`
}

func (*Interaction_ApplicationCommandData) isInteraction_Data() {}

func (*Interaction_MessageComponentData) isInteraction_Data() {}

func (*Interaction_ModalSubmitData) isInteraction_Data() {}

// ApplicationCommandInteractionData contains the data of application command interaction.
type ApplicationCommandInteractionData struct {
	state       protoimpl.MessageState                     `protogen:"open.v1"`
	Id          string                                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CommandType ApplicationCommandType                     `protobuf:"varint,3,opt,name=command_type,json=commandType,proto3,enum=discord_v1.ApplicationCommandType" json:"command_type,omitempty"`
	Resolved    *ApplicationCommandInteractionDataResolved `protobuf:"bytes,4,opt,name=resolved,proto3,oneof" json:"resolved,omitempty"`
	// Slash command options. Repeated options.
	Options []*ApplicationCommandInteractionDataOption `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty"`
	// Target (user/message) id on which context menu command was called.
	// The details are stored in Resolved according to command type.
	TargetId      string `protobuf:"bytes,6,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplicationCommandInteractionData) Reset() {
	*x = ApplicationCommandInteractionData{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationCommandInteractionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationCommandInteractionData) ProtoMessage() {}

func (x *ApplicationCommandInteractionData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationCommandInteractionData.ProtoReflect.Descriptor instead.
func (*ApplicationCommandInteractionData) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{130}
}

func (x *ApplicationCommandInteractionData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApplicationCommandInteractionData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationCommandInteractionData) GetCommandType() ApplicationCommandType {
	if x != nil {
		return x.CommandType
	}
	return ApplicationCommandType_APPLICATION_COMMAND_TYPE_UNKNOWN
}

func (x *ApplicationCommandInteractionData) GetResolved() *ApplicationCommandInteractionDataResolved {
	if x != nil {
		return x.Resolved
	}
	return nil
}

func (x *ApplicationCommandInteractionData) GetOptions() []*ApplicationCommandInteractionDataOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ApplicationCommandInteractionData) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

// ApplicationCommandInteractionDataResolved contains resolved data of command execution.
// Partial Member objects are missing user, deaf and mute fields.
// Partial Channel objects only have id, name, type and permissions fields.
type ApplicationCommandInteractionDataResolved struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Users         map[string]*User              `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Members       map[string]*Member            `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Roles         map[string]*Role              `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Channels      map[string]*Channel           `protobuf:"bytes,4,rep,name=channels,proto3" json:"channels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Messages      map[string]*Message           `protobuf:"bytes,5,rep,name=messages,proto3" json:"messages,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Attachments   map[string]*MessageAttachment `protobuf:"bytes,6,rep,name=attachments,proto3" json:"attachments,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplicationCommandInteractionDataResolved) Reset() {
	*x = ApplicationCommandInteractionDataResolved{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationCommandInteractionDataResolved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationCommandInteractionDataResolved) ProtoMessage() {}

func (x *ApplicationCommandInteractionDataResolved) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationCommandInteractionDataResolved.ProtoReflect.Descriptor instead.
func (*ApplicationCommandInteractionDataResolved) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{131}
}

func (x *ApplicationCommandInteractionDataResolved) GetUsers() map[string]*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ApplicationCommandInteractionDataResolved) GetMembers() map[string]*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *ApplicationCommandInteractionDataResolved) GetRoles() map[string]*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *ApplicationCommandInteractionDataResolved) GetChannels() map[string]*Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *ApplicationCommandInteractionDataResolved) GetMessages() map[string]*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ApplicationCommandInteractionDataResolved) GetAttachments() map[string]*MessageAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

// MessageComponentInteractionData contains the data of message component interaction.
type MessageComponentInteractionData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CustomId      string                 `protobuf:"bytes,1,opt,name=custom_id,json=customId,proto3" json:"custom_id,omitempty"`
	ComponentType ComponentType          `protobuf:"varint,2,opt,name=component_type,json=componentType,proto3,enum=discord_v1.ComponentType" json:"component_type,omitempty"`
	// Resolved data (struct name differs slightly from Go, assuming this is correct)
	Resolved *MessageComponentInteractionDataResolved `protobuf:"bytes,3,opt,name=resolved,proto3,oneof" json:"resolved,omitempty"` // Go code had struct, not pointer
	// NOTE: Only filled when ComponentType is SelectMenuComponent (3). Otherwise is nil.
	Values        []string `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageComponentInteractionData) Reset() {
	*x = MessageComponentInteractionData{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageComponentInteractionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageComponentInteractionData) ProtoMessage() {}

func (x *MessageComponentInteractionData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageComponentInteractionData.ProtoReflect.Descriptor instead.
func (*MessageComponentInteractionData) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{132}
}

func (x *MessageComponentInteractionData) GetCustomId() string {
	if x != nil {
		return x.CustomId
	}
	return ""
}

func (x *MessageComponentInteractionData) GetComponentType() ComponentType {
	if x != nil {
		return x.ComponentType
	}
	return ComponentType_COMPONENT_TYPE_UNKNOWN
}

func (x *MessageComponentInteractionData) GetResolved() *MessageComponentInteractionDataResolved {
	if x != nil {
		return x.Resolved
	}
	return nil
}

func (x *MessageComponentInteractionData) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// MessageComponentInteractionDataResolved contains the resolved data of selected option.
type MessageComponentInteractionDataResolved struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Users         map[string]*User       `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Members       map[string]*Member     `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Roles         map[string]*Role       `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Channels      map[string]*Channel    `protobuf:"bytes,4,rep,name=channels,proto3" json:"channels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageComponentInteractionDataResolved) Reset() {
	*x = MessageComponentInteractionDataResolved{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageComponentInteractionDataResolved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageComponentInteractionDataResolved) ProtoMessage() {}

func (x *MessageComponentInteractionDataResolved) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageComponentInteractionDataResolved.ProtoReflect.Descriptor instead.
func (*MessageComponentInteractionDataResolved) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{133}
}

func (x *MessageComponentInteractionDataResolved) GetUsers() map[string]*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *MessageComponentInteractionDataResolved) GetMembers() map[string]*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *MessageComponentInteractionDataResolved) GetRoles() map[string]*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *MessageComponentInteractionDataResolved) GetChannels() map[string]*Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

// ModalSubmitInteractionData contains the data of modal submit interaction.
type ModalSubmitInteractionData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CustomId      string                 `protobuf:"bytes,1,opt,name=custom_id,json=customId,proto3" json:"custom_id,omitempty"`
	Components    []*anypb.Any           `protobuf:"bytes,2,rep,name=components,proto3" json:"components,omitempty"` // Go code had json:"-" but it's data
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModalSubmitInteractionData) Reset() {
	*x = ModalSubmitInteractionData{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModalSubmitInteractionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModalSubmitInteractionData) ProtoMessage() {}

func (x *ModalSubmitInteractionData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModalSubmitInteractionData.ProtoReflect.Descriptor instead.
func (*ModalSubmitInteractionData) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{134}
}

func (x *ModalSubmitInteractionData) GetCustomId() string {
	if x != nil {
		return x.CustomId
	}
	return ""
}

func (x *ModalSubmitInteractionData) GetComponents() []*anypb.Any {
	if x != nil {
		return x.Components
	}
	return nil
}

// ApplicationCommandInteractionDataOption represents an option of a slash command.
type ApplicationCommandInteractionDataOption struct {
	state protoimpl.MessageState       `protogen:"open.v1"`
	Name  string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type  ApplicationCommandOptionType `protobuf:"varint,2,opt,name=type,proto3,enum=discord_v1.ApplicationCommandOptionType" json:"type,omitempty"`
	// NOTE: Contains the value specified by Type. Use oneof based on option type.
	//
	// Types that are valid to be assigned to Value:
	//
	//	*ApplicationCommandInteractionDataOption_StringValue
	//	*ApplicationCommandInteractionDataOption_IntegerValue
	//	*ApplicationCommandInteractionDataOption_BooleanValue
	//	*ApplicationCommandInteractionDataOption_UserValueId
	//	*ApplicationCommandInteractionDataOption_ChannelValueId
	//	*ApplicationCommandInteractionDataOption_RoleValueId
	//	*ApplicationCommandInteractionDataOption_MentionableValueId
	//	*ApplicationCommandInteractionDataOption_NumberValue
	//	*ApplicationCommandInteractionDataOption_AttachmentValueId
	Value isApplicationCommandInteractionDataOption_Value `protobuf_oneof:"value"`
	// Options for SubCommand or SubCommandGroup types.
	Options []*ApplicationCommandInteractionDataOption `protobuf:"bytes,12,rep,name=options,proto3" json:"options,omitempty"`
	// NOTE: autocomplete interaction only.
	Focused       bool `protobuf:"varint,13,opt,name=focused,proto3" json:"focused,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplicationCommandInteractionDataOption) Reset() {
	*x = ApplicationCommandInteractionDataOption{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationCommandInteractionDataOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationCommandInteractionDataOption) ProtoMessage() {}

func (x *ApplicationCommandInteractionDataOption) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationCommandInteractionDataOption.ProtoReflect.Descriptor instead.
func (*ApplicationCommandInteractionDataOption) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{135}
}

func (x *ApplicationCommandInteractionDataOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationCommandInteractionDataOption) GetType() ApplicationCommandOptionType {
	if x != nil {
		return x.Type
	}
	return ApplicationCommandOptionType_APPLICATION_COMMAND_OPTION_TYPE_UNKNOWN
}

func (x *ApplicationCommandInteractionDataOption) GetValue() isApplicationCommandInteractionDataOption_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ApplicationCommandInteractionDataOption) GetStringValue() string {
	if x != nil {
		if x, ok := x.Value.(*ApplicationCommandInteractionDataOption_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *ApplicationCommandInteractionDataOption) GetIntegerValue() int64 {
	if x != nil {
		if x, ok := x.Value.(*ApplicationCommandInteractionDataOption_IntegerValue); ok {
			return x.IntegerValue
		}
	}
	return 0
}

func (x *ApplicationCommandInteractionDataOption) GetBooleanValue() bool {
	if x != nil {
		if x, ok := x.Value.(*ApplicationCommandInteractionDataOption_BooleanValue); ok {
			return x.BooleanValue
		}
	}
	return false
}

func (x *ApplicationCommandInteractionDataOption) GetUserValueId() string {
	if x != nil {
		if x, ok := x.Value.(*ApplicationCommandInteractionDataOption_UserValueId); ok {
			return x.UserValueId
		}
	}
	return ""
}

func (x *ApplicationCommandInteractionDataOption) GetChannelValueId() string {
	if x != nil {
		if x, ok := x.Value.(*ApplicationCommandInteractionDataOption_ChannelValueId); ok {
			return x.ChannelValueId
		}
	}
	return ""
}

func (x *ApplicationCommandInteractionDataOption) GetRoleValueId() string {
	if x != nil {
		if x, ok := x.Value.(*ApplicationCommandInteractionDataOption_RoleValueId); ok {
			return x.RoleValueId
		}
	}
	return ""
}

func (x *ApplicationCommandInteractionDataOption) GetMentionableValueId() string {
	if x != nil {
		if x, ok := x.Value.(*ApplicationCommandInteractionDataOption_MentionableValueId); ok {
			return x.MentionableValueId
		}
	}
	return ""
}

func (x *ApplicationCommandInteractionDataOption) GetNumberValue() float64 {
	if x != nil {
		if x, ok := x.Value.(*ApplicationCommandInteractionDataOption_NumberValue); ok {
			return x.NumberValue
		}
	}
	return 0
}

func (x *ApplicationCommandInteractionDataOption) GetAttachmentValueId() string {
	if x != nil {
		if x, ok := x.Value.(*ApplicationCommandInteractionDataOption_AttachmentValueId); ok {
			return x.AttachmentValueId
		}
	}
	return ""
}

func (x *ApplicationCommandInteractionDataOption) GetOptions() []*ApplicationCommandInteractionDataOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ApplicationCommandInteractionDataOption) GetFocused() bool {
	if x != nil {
		return x.Focused
	}
	return false
}

type isApplicationCommandInteractionDataOption_Value interface {
	isApplicationCommandInteractionDataOption_Value()
}

type ApplicationCommandInteractionDataOption_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type ApplicationCommandInteractionDataOption_IntegerValue struct {
	IntegerValue int64 `protobuf:"varint,4,opt,name=integer_value,json=integerValue,proto3,oneof"`
}

type ApplicationCommandInteractionDataOption_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,5,opt,name=boolean_value,json=booleanValue,proto3,oneof"`
}

type ApplicationCommandInteractionDataOption_UserValueId struct {
	UserValueId string `protobuf:"bytes,6,opt,name=user_value_id,json=userValueId,proto3,oneof"` // User ID snowflake
}

type ApplicationCommandInteractionDataOption_ChannelValueId struct {
	ChannelValueId string `protobuf:"bytes,7,opt,name=channel_value_id,json=channelValueId,proto3,oneof"` // Channel ID snowflake
}

type ApplicationCommandInteractionDataOption_RoleValueId struct {
	RoleValueId string `protobuf:"bytes,8,opt,name=role_value_id,json=roleValueId,proto3,oneof"` // Role ID snowflake
}

type ApplicationCommandInteractionDataOption_MentionableValueId struct {
	MentionableValueId string `protobuf:"bytes,9,opt,name=mentionable_value_id,json=mentionableValueId,proto3,oneof"` // Mentionable ID snowflake (user or role)
}

type ApplicationCommandInteractionDataOption_NumberValue struct {
	NumberValue float64 `protobuf:"fixed64,10,opt,name=number_value,json=numberValue,proto3,oneof"`
}

type ApplicationCommandInteractionDataOption_AttachmentValueId struct {
	AttachmentValueId string `protobuf:"bytes,11,opt,name=attachment_value_id,json=attachmentValueId,proto3,oneof"` // Attachment ID snowflake
}

func (*ApplicationCommandInteractionDataOption_StringValue) isApplicationCommandInteractionDataOption_Value() {
}

func (*ApplicationCommandInteractionDataOption_IntegerValue) isApplicationCommandInteractionDataOption_Value() {
}

func (*ApplicationCommandInteractionDataOption_BooleanValue) isApplicationCommandInteractionDataOption_Value() {
}

func (*ApplicationCommandInteractionDataOption_UserValueId) isApplicationCommandInteractionDataOption_Value() {
}

func (*ApplicationCommandInteractionDataOption_ChannelValueId) isApplicationCommandInteractionDataOption_Value() {
}

func (*ApplicationCommandInteractionDataOption_RoleValueId) isApplicationCommandInteractionDataOption_Value() {
}

func (*ApplicationCommandInteractionDataOption_MentionableValueId) isApplicationCommandInteractionDataOption_Value() {
}

func (*ApplicationCommandInteractionDataOption_NumberValue) isApplicationCommandInteractionDataOption_Value() {
}

func (*ApplicationCommandInteractionDataOption_AttachmentValueId) isApplicationCommandInteractionDataOption_Value() {
}

// InteractionResponse represents a response for an interaction event.
type InteractionResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Type          InteractionResponseType  `protobuf:"varint,1,opt,name=type,proto3,enum=discord_v1.InteractionResponseType" json:"type,omitempty"`
	Data          *InteractionResponseData `protobuf:"bytes,2,opt,name=data,proto3,oneof" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InteractionResponse) Reset() {
	*x = InteractionResponse{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InteractionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionResponse) ProtoMessage() {}

func (x *InteractionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionResponse.ProtoReflect.Descriptor instead.
func (*InteractionResponse) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{136}
}

func (x *InteractionResponse) GetType() InteractionResponseType {
	if x != nil {
		return x.Type
	}
	return InteractionResponseType_INTERACTION_RESPONSE_TYPE_UNKNOWN
}

func (x *InteractionResponse) GetData() *InteractionResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

// InteractionResponseData is response data for an interaction.
type InteractionResponseData struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	Tts             bool                    `protobuf:"varint,1,opt,name=tts,proto3" json:"tts,omitempty"`
	Content         string                  `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Components      []*anypb.Any            `protobuf:"bytes,3,rep,name=components,proto3" json:"components,omitempty"`
	Embeds          []*MessageEmbed         `protobuf:"bytes,4,rep,name=embeds,proto3" json:"embeds,omitempty"`
	AllowedMentions *MessageAllowedMentions `protobuf:"bytes,5,opt,name=allowed_mentions,json=allowedMentions,proto3,oneof" json:"allowed_mentions,omitempty"`
	Files           []*File                 `protobuf:"bytes,6,rep,name=files,proto3" json:"files,omitempty"`             // Go had json:"-" but it's data
	Attachments     []*MessageAttachment    `protobuf:"bytes,7,rep,name=attachments,proto3" json:"attachments,omitempty"` // Go had pointer to slice
	Poll            *Poll                   `protobuf:"bytes,8,opt,name=poll,proto3,oneof" json:"poll,omitempty"`
	// NOTE: only MessageFlagsSuppressEmbeds and MessageFlagsEphemeral can be set.
	Flags *MessageFlags `protobuf:"varint,9,opt,name=flags,proto3,enum=discord_v1.MessageFlags,oneof" json:"flags,omitempty"` // Go had int64/uint64 directly
	// NOTE: autocomplete interaction only. Repeated choices.
	Choices []*ApplicationCommandOptionChoice `protobuf:"bytes,10,rep,name=choices,proto3" json:"choices,omitempty"`
	// NOTE: modal interaction only.
	CustomId      string `protobuf:"bytes,11,opt,name=custom_id,json=customId,proto3" json:"custom_id,omitempty"`
	Title         string `protobuf:"bytes,12,opt,name=title,proto3" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InteractionResponseData) Reset() {
	*x = InteractionResponseData{}
	mi := &file_discord_v1_discordgo_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InteractionResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionResponseData) ProtoMessage() {}

func (x *InteractionResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_discordgo_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionResponseData.ProtoReflect.Descriptor instead.
func (*InteractionResponseData) Descriptor() ([]byte, []int) {
	return file_discord_v1_discordgo_proto_rawDescGZIP(), []int{137}
}

func (x *InteractionResponseData) GetTts() bool {
	if x != nil {
		return x.Tts
	}
	return false
}

func (x *InteractionResponseData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *InteractionResponseData) GetComponents() []*anypb.Any {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *InteractionResponseData) GetEmbeds() []*MessageEmbed {
	if x != nil {
		return x.Embeds
	}
	return nil
}

func (x *InteractionResponseData) GetAllowedMentions() *MessageAllowedMentions {
	if x != nil {
		return x.AllowedMentions
	}
	return nil
}

func (x *InteractionResponseData) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *InteractionResponseData) GetAttachments() []*MessageAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *InteractionResponseData) GetPoll() *Poll {
	if x != nil {
		return x.Poll
	}
	return nil
}

func (x *InteractionResponseData) GetFlags() MessageFlags {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return MessageFlags_MESSAGE_FLAGS_CROSS_POSTED
}

func (x *InteractionResponseData) GetChoices() []*ApplicationCommandOptionChoice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *InteractionResponseData) GetCustomId() string {
	if x != nil {
		return x.CustomId
	}
	return ""
}

func (x *InteractionResponseData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

var File_discord_v1_discordgo_proto protoreflect.FileDescriptor

const file_discord_v1_discordgo_proto_rawDesc = "" +
	"\n" +
	"\x1adiscord-v1/discordgo.proto\x12\n" +
	"discord_v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x19google/protobuf/any.proto\"\x8f\f\n" +
	"\aMessage\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x02 \x01(\tR\tchannelId\x12\x19\n" +
	"\bguild_id\x18\x03 \x01(\tR\aguildId\x12\x18\n" +
	"\acontent\x18\x04 \x01(\tR\acontent\x128\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12E\n" +
	"\x10edited_timestamp\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x0feditedTimestamp\x12#\n" +
	"\rmention_roles\x18\a \x03(\tR\fmentionRoles\x12\x10\n" +
	"\x03tts\x18\b \x01(\bR\x03tts\x12)\n" +
	"\x10mention_everyone\x18\t \x01(\bR\x0fmentionEveryone\x12(\n" +
	"\x06author\x18\n" +
	" \x01(\v2\x10.discord_v1.UserR\x06author\x12?\n" +
	"\vattachments\x18\v \x03(\v2\x1d.discord_v1.MessageAttachmentR\vattachments\x124\n" +
	"\n" +
	"components\x18\f \x03(\v2\x14.google.protobuf.AnyR\n" +
	"components\x120\n" +
	"\x06embeds\x18\r \x03(\v2\x18.discord_v1.MessageEmbedR\x06embeds\x12,\n" +
	"\bmentions\x18\x0e \x03(\v2\x10.discord_v1.UserR\bmentions\x12:\n" +
	"\treactions\x18\x0f \x03(\v2\x1c.discord_v1.MessageReactionsR\treactions\x12\x16\n" +
	"\x06pinned\x18\x10 \x01(\bR\x06pinned\x12+\n" +
	"\x04type\x18\x11 \x01(\x0e2\x17.discord_v1.MessageTypeR\x04type\x12\x1d\n" +
	"\n" +
	"webhook_id\x18\x12 \x01(\tR\twebhookId\x12*\n" +
	"\x06member\x18\x13 \x01(\v2\x12.discord_v1.MemberR\x06member\x12>\n" +
	"\x10mention_channels\x18\x14 \x03(\v2\x13.discord_v1.ChannelR\x0fmentionChannels\x127\n" +
	"\bactivity\x18\x15 \x01(\v2\x1b.discord_v1.MessageActivityR\bactivity\x12@\n" +
	"\vapplication\x18\x16 \x01(\v2\x1e.discord_v1.MessageApplicationR\vapplication\x12I\n" +
	"\x11message_reference\x18\x17 \x01(\v2\x1c.discord_v1.MessageReferenceR\x10messageReference\x12B\n" +
	"\x12referenced_message\x18\x18 \x01(\v2\x13.discord_v1.MessageR\x11referencedMessage\x12H\n" +
	"\x11message_snapshots\x18\x19 \x03(\v2\x1b.discord_v1.MessageSnapshotR\x10messageSnapshots\x12@\n" +
	"\vinteraction\x18\x1a \x01(\v2\x1e.discord_v1.MessageInteractionR\vinteraction\x12Y\n" +
	"\x14interaction_metadata\x18\x1b \x01(\v2&.discord_v1.MessageInteractionMetadataR\x13interactionMetadata\x12.\n" +
	"\x05flags\x18\x1c \x01(\x0e2\x18.discord_v1.MessageFlagsR\x05flags\x12+\n" +
	"\x06thread\x18\x1d \x01(\v2\x13.discord_v1.ChannelR\x06thread\x12<\n" +
	"\rsticker_items\x18\x1e \x03(\v2\x17.discord_v1.StickerItemR\fstickerItems\x12$\n" +
	"\x04poll\x18\x1f \x01(\v2\x10.discord_v1.PollR\x04poll\"=\n" +
	"\x04File\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12!\n" +
	"\fcontent_type\x18\x02 \x01(\tR\vcontentType\"\xcb\x03\n" +
	"\vMessageSend\x12\x18\n" +
	"\acontent\x18\x01 \x01(\tR\acontent\x120\n" +
	"\x06embeds\x18\x02 \x03(\v2\x18.discord_v1.MessageEmbedR\x06embeds\x12\x10\n" +
	"\x03tts\x18\x03 \x01(\bR\x03tts\x124\n" +
	"\n" +
	"components\x18\x04 \x03(\v2\x14.google.protobuf.AnyR\n" +
	"components\x12&\n" +
	"\x05files\x18\x05 \x03(\v2\x10.discord_v1.FileR\x05files\x12M\n" +
	"\x10allowed_mentions\x18\x06 \x01(\v2\".discord_v1.MessageAllowedMentionsR\x0fallowedMentions\x12:\n" +
	"\treference\x18\a \x01(\v2\x1c.discord_v1.MessageReferenceR\treference\x12\x1f\n" +
	"\vsticker_ids\x18\b \x03(\tR\n" +
	"stickerIds\x12.\n" +
	"\x05flags\x18\t \x01(\x0e2\x18.discord_v1.MessageFlagsR\x05flags\x12$\n" +
	"\x04poll\x18\n" +
	" \x01(\v2\x10.discord_v1.PollR\x04poll\"\xa1\x03\n" +
	"\vMessageEdit\x12\x18\n" +
	"\acontent\x18\x01 \x01(\tR\acontent\x124\n" +
	"\n" +
	"components\x18\x02 \x03(\v2\x14.google.protobuf.AnyR\n" +
	"components\x120\n" +
	"\x06embeds\x18\x03 \x03(\v2\x18.discord_v1.MessageEmbedR\x06embeds\x12M\n" +
	"\x10allowed_mentions\x18\x04 \x01(\v2\".discord_v1.MessageAllowedMentionsR\x0fallowedMentions\x12.\n" +
	"\x05flags\x18\x05 \x01(\x0e2\x18.discord_v1.MessageFlagsR\x05flags\x12&\n" +
	"\x05files\x18\x06 \x03(\v2\x10.discord_v1.FileR\x05files\x12?\n" +
	"\vattachments\x18\a \x03(\v2\x1d.discord_v1.MessageAttachmentR\vattachments\x12\x0e\n" +
	"\x02id\x18\b \x01(\tR\x02id\x12\x18\n" +
	"\achannel\x18\t \x01(\tR\achannel\"\x9d\x01\n" +
	"\x16MessageAllowedMentions\x124\n" +
	"\x05parse\x18\x01 \x03(\x0e2\x1e.discord_v1.AllowedMentionTypeR\x05parse\x12\x14\n" +
	"\x05roles\x18\x02 \x03(\tR\x05roles\x12\x14\n" +
	"\x05users\x18\x03 \x03(\tR\x05users\x12!\n" +
	"\freplied_user\x18\x04 \x01(\bR\vrepliedUser\"\xf1\x01\n" +
	"\x11MessageAttachment\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x10\n" +
	"\x03url\x18\x02 \x01(\tR\x03url\x12\x1b\n" +
	"\tproxy_url\x18\x03 \x01(\tR\bproxyUrl\x12\x1a\n" +
	"\bfilename\x18\x04 \x01(\tR\bfilename\x12!\n" +
	"\fcontent_type\x18\x05 \x01(\tR\vcontentType\x12\x14\n" +
	"\x05width\x18\x06 \x01(\x05R\x05width\x12\x16\n" +
	"\x06height\x18\a \x01(\x05R\x06height\x12\x12\n" +
	"\x04size\x18\b \x01(\x05R\x04size\x12\x1c\n" +
	"\tephemeral\x18\t \x01(\bR\tephemeral\"i\n" +
	"\x12MessageEmbedFooter\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\x12\x19\n" +
	"\bicon_url\x18\x02 \x01(\tR\aiconUrl\x12$\n" +
	"\x0eproxy_icon_url\x18\x03 \x01(\tR\fproxyIconUrl\"p\n" +
	"\x11MessageEmbedImage\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x1b\n" +
	"\tproxy_url\x18\x02 \x01(\tR\bproxyUrl\x12\x14\n" +
	"\x05width\x18\x03 \x01(\x05R\x05width\x12\x16\n" +
	"\x06height\x18\x04 \x01(\x05R\x06height\"t\n" +
	"\x15MessageEmbedThumbnail\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x1b\n" +
	"\tproxy_url\x18\x02 \x01(\tR\bproxyUrl\x12\x14\n" +
	"\x05width\x18\x03 \x01(\x05R\x05width\x12\x16\n" +
	"\x06height\x18\x04 \x01(\x05R\x06height\"S\n" +
	"\x11MessageEmbedVideo\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x14\n" +
	"\x05width\x18\x02 \x01(\x05R\x05width\x12\x16\n" +
	"\x06height\x18\x03 \x01(\x05R\x06height\"<\n" +
	"\x14MessageEmbedProvider\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"{\n" +
	"\x12MessageEmbedAuthor\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x19\n" +
	"\bicon_url\x18\x03 \x01(\tR\aiconUrl\x12$\n" +
	"\x0eproxy_icon_url\x18\x04 \x01(\tR\fproxyIconUrl\"U\n" +
	"\x11MessageEmbedField\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x12\x16\n" +
	"\x06inline\x18\x03 \x01(\bR\x06inline\"\xc7\x04\n" +
	"\fMessageEmbed\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12)\n" +
	"\x04type\x18\x02 \x01(\x0e2\x15.discord_v1.EmbedTypeR\x04type\x12\x14\n" +
	"\x05title\x18\x03 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\tR\ttimestamp\x12\x14\n" +
	"\x05color\x18\x06 \x01(\x05R\x05color\x126\n" +
	"\x06footer\x18\a \x01(\v2\x1e.discord_v1.MessageEmbedFooterR\x06footer\x123\n" +
	"\x05image\x18\b \x01(\v2\x1d.discord_v1.MessageEmbedImageR\x05image\x12?\n" +
	"\tthumbnail\x18\t \x01(\v2!.discord_v1.MessageEmbedThumbnailR\tthumbnail\x123\n" +
	"\x05video\x18\n" +
	" \x01(\v2\x1d.discord_v1.MessageEmbedVideoR\x05video\x12<\n" +
	"\bprovider\x18\v \x01(\v2 .discord_v1.MessageEmbedProviderR\bprovider\x126\n" +
	"\x06author\x18\f \x01(\v2\x1e.discord_v1.MessageEmbedAuthorR\x06author\x125\n" +
	"\x06fields\x18\r \x03(\v2\x1d.discord_v1.MessageEmbedFieldR\x06fields\"a\n" +
	"\x10MessageReactions\x12\x14\n" +
	"\x05count\x18\x01 \x01(\x05R\x05count\x12\x0e\n" +
	"\x02me\x18\x02 \x01(\bR\x02me\x12'\n" +
	"\x05emoji\x18\x03 \x01(\v2\x11.discord_v1.EmojiR\x05emoji\"a\n" +
	"\x0fMessageActivity\x123\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1f.discord_v1.MessageActivityTypeR\x04type\x12\x19\n" +
	"\bparty_id\x18\x02 \x01(\tR\apartyId\"\x8f\x01\n" +
	"\x12MessageApplication\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1f\n" +
	"\vcover_image\x18\x02 \x01(\tR\n" +
	"coverImage\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x12\n" +
	"\x04icon\x18\x04 \x01(\tR\x04icon\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\"@\n" +
	"\x0fMessageSnapshot\x12-\n" +
	"\amessage\x18\x01 \x01(\v2\x13.discord_v1.MessageR\amessage\"\xce\x01\n" +
	"\x10MessageReference\x124\n" +
	"\x04type\x18\x01 \x01(\x0e2 .discord_v1.MessageReferenceTypeR\x04type\x12\x1d\n" +
	"\n" +
	"message_id\x18\x02 \x01(\tR\tmessageId\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x03 \x01(\tR\tchannelId\x12\x19\n" +
	"\bguild_id\x18\x04 \x01(\tR\aguildId\x12+\n" +
	"\x12fail_if_not_exists\x18\x05 \x01(\bR\x0ffailIfNotExists\"\x9e\x01\n" +
	"\x12MessageInteraction\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12$\n" +
	"\x04user\x18\x04 \x01(\v2\x10.discord_v1.UserR\x04user\x12*\n" +
	"\x06member\x18\x05 \x01(\v2\x12.discord_v1.MemberR\x06member\"\xad\x04\n" +
	"\x1aMessageInteractionMetadata\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12$\n" +
	"\x04user\x18\x03 \x01(\v2\x10.discord_v1.UserR\x04user\x12\x8e\x01\n" +
	"\x1eauthorizing_integration_owners\x18\x04 \x03(\v2H.discord_v1.MessageInteractionMetadata.AuthorizingIntegrationOwnersEntryR\x1cauthorizingIntegrationOwners\x12?\n" +
	"\x1coriginal_response_message_id\x18\x05 \x01(\tR\x19originalResponseMessageId\x122\n" +
	"\x15interacted_message_id\x18\x06 \x01(\tR\x13interactedMessageId\x12n\n" +
	"\x1ftriggering_interaction_metadata\x18\a \x01(\v2&.discord_v1.MessageInteractionMetadataR\x1dtriggeringInteractionMetadata\x1aO\n" +
	"!AuthorizingIntegrationOwnersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xfd\x06\n" +
	"\aSession\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\x12\x10\n" +
	"\x03mfa\x18\x02 \x01(\bR\x03mfa\x12\x14\n" +
	"\x05debug\x18\x03 \x01(\bR\x05debug\x12\x1b\n" +
	"\tlog_level\x18\x04 \x01(\x05R\blogLevel\x129\n" +
	"\x19should_reconnect_on_error\x18\x05 \x01(\bR\x16shouldReconnectOnError\x12S\n" +
	"'should_reconnect_voice_on_session_error\x18\x06 \x01(\bR\"shouldReconnectVoiceOnSessionError\x12:\n" +
	"\x1ashould_retry_on_rate_limit\x18\a \x01(\bR\x16shouldRetryOnRateLimit\x120\n" +
	"\bidentify\x18\b \x01(\v2\x14.discord_v1.IdentifyR\bidentify\x12\x1a\n" +
	"\bcompress\x18\t \x01(\bR\bcompress\x12\x19\n" +
	"\bshard_id\x18\n" +
	" \x01(\x05R\ashardId\x12\x1f\n" +
	"\vshard_count\x18\v \x01(\x05R\n" +
	"shardCount\x12#\n" +
	"\rstate_enabled\x18\f \x01(\bR\fstateEnabled\x12\x1f\n" +
	"\vsync_events\x18\r \x01(\bR\n" +
	"syncEvents\x12\x1d\n" +
	"\n" +
	"data_ready\x18\x0e \x01(\bR\tdataReady\x12(\n" +
	"\x10max_rest_retries\x18\x0f \x01(\x05R\x0emaxRestRetries\x12\x16\n" +
	"\x06status\x18\x10 \x01(\x05R\x06status\x12\x1f\n" +
	"\vvoice_ready\x18\x11 \x01(\bR\n" +
	"voiceReady\x12\x1b\n" +
	"\tudp_ready\x18\x12 \x01(\bR\budpReady\x12'\n" +
	"\x05state\x18\x13 \x01(\v2\x11.discord_v1.StateR\x05state\x12\x1d\n" +
	"\n" +
	"user_agent\x18\x14 \x01(\tR\tuserAgent\x12H\n" +
	"\x12last_heartbeat_ack\x18\x15 \x01(\v2\x1a.google.protobuf.TimestampR\x10lastHeartbeatAck\x12J\n" +
	"\x13last_heartbeat_sent\x18\x16 \x01(\v2\x1a.google.protobuf.TimestampR\x11lastHeartbeatSent\"\x92\x02\n" +
	"\bIdentify\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\x12>\n" +
	"\n" +
	"properties\x18\x02 \x01(\v2\x1e.discord_v1.IdentifyPropertiesR\n" +
	"properties\x12\x1a\n" +
	"\bcompress\x18\x03 \x01(\bR\bcompress\x12'\n" +
	"\x0flarge_threshold\x18\x04 \x01(\x05R\x0elargeThreshold\x12\x14\n" +
	"\x05shard\x18\x05 \x03(\x05R\x05shard\x12;\n" +
	"\bpresence\x18\x06 \x01(\v2\x1f.discord_v1.GatewayStatusUpdateR\bpresence\x12\x18\n" +
	"\aintents\x18\a \x01(\x05R\aintents\"\x9b\x01\n" +
	"\x12IdentifyProperties\x12\x0e\n" +
	"\x02os\x18\x01 \x01(\tR\x02os\x12\x18\n" +
	"\abrowser\x18\x02 \x01(\tR\abrowser\x12\x16\n" +
	"\x06device\x18\x03 \x01(\tR\x06device\x12\x18\n" +
	"\areferer\x18\x04 \x01(\tR\areferer\x12)\n" +
	"\x10referring_domain\x18\x05 \x01(\tR\x0freferringDomain\"\x7f\n" +
	"\x13GatewayStatusUpdate\x12\x14\n" +
	"\x05since\x18\x01 \x01(\x05R\x05since\x12(\n" +
	"\x04game\x18\x02 \x01(\v2\x14.discord_v1.ActivityR\x04game\x12\x16\n" +
	"\x06status\x18\x03 \x01(\tR\x06status\x12\x10\n" +
	"\x03afk\x18\x04 \x01(\bR\x03afk\"\xed\x03\n" +
	"\bActivity\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x02 \x01(\x05R\x04type\x12\x10\n" +
	"\x03url\x18\x03 \x01(\tR\x03url\x129\n" +
	"\n" +
	"created_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12%\n" +
	"\x0eapplication_id\x18\x05 \x01(\tR\rapplicationId\x12\x14\n" +
	"\x05state\x18\x06 \x01(\tR\x05state\x12\x18\n" +
	"\adetails\x18\a \x01(\tR\adetails\x126\n" +
	"\n" +
	"timestamps\x18\b \x01(\v2\x16.discord_v1.TimeStampsR\n" +
	"timestamps\x12'\n" +
	"\x05emoji\x18\t \x01(\v2\x11.discord_v1.EmojiR\x05emoji\x12'\n" +
	"\x05party\x18\n" +
	" \x01(\v2\x11.discord_v1.PartyR\x05party\x12*\n" +
	"\x06assets\x18\v \x01(\v2\x12.discord_v1.AssetsR\x06assets\x12-\n" +
	"\asecrets\x18\f \x01(\v2\x13.discord_v1.SecretsR\asecrets\x12\x1a\n" +
	"\binstance\x18\r \x01(\bR\binstance\x12\x14\n" +
	"\x05flags\x18\x0e \x01(\x05R\x05flags\"Z\n" +
	"\n" +
	"TimeStamps\x12#\n" +
	"\rend_timestamp\x18\x01 \x01(\x03R\fendTimestamp\x12'\n" +
	"\x0fstart_timestamp\x18\x02 \x01(\x03R\x0estartTimestamp\"\x92\x01\n" +
	"\x06Assets\x12$\n" +
	"\x0elarge_image_id\x18\x01 \x01(\tR\flargeImageId\x12$\n" +
	"\x0esmall_image_id\x18\x02 \x01(\tR\fsmallImageId\x12\x1d\n" +
	"\n" +
	"large_text\x18\x03 \x01(\tR\tlargeText\x12\x1d\n" +
	"\n" +
	"small_text\x18\x04 \x01(\tR\tsmallText\"+\n" +
	"\x05Party\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04size\x18\x02 \x03(\x05R\x04size\"O\n" +
	"\aSecrets\x12\x12\n" +
	"\x04join\x18\x01 \x01(\tR\x04join\x12\x1a\n" +
	"\bspectate\x18\x02 \x01(\tR\bspectate\x12\x14\n" +
	"\x05match\x18\x03 \x01(\tR\x05match\"|\n" +
	" ApplicationIntegrationTypeConfig\x12X\n" +
	"\x15oauth2_install_params\x18\x01 \x01(\v2$.discord_v1.ApplicationInstallParamsR\x13oauth2InstallParams\"T\n" +
	"\x18ApplicationInstallParams\x12\x16\n" +
	"\x06scopes\x18\x01 \x03(\tR\x06scopes\x12 \n" +
	"\vpermissions\x18\x02 \x01(\x03R\vpermissions\"\xb6\x06\n" +
	"\vApplication\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04icon\x18\x03 \x01(\tR\x04icon\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x1f\n" +
	"\vrpc_origins\x18\x05 \x03(\tR\n" +
	"rpcOrigins\x12\x1d\n" +
	"\n" +
	"bot_public\x18\x06 \x01(\bR\tbotPublic\x123\n" +
	"\x16bot_require_code_grant\x18\a \x01(\bR\x13botRequireCodeGrant\x12/\n" +
	"\x14terms_of_service_url\x18\b \x01(\tR\x11termsOfServiceUrl\x12,\n" +
	"\x12privacy_policy_url\x18\t \x01(\tR\x10privacyPolicyUrl\x12&\n" +
	"\x05owner\x18\n" +
	" \x01(\v2\x10.discord_v1.UserR\x05owner\x12\x18\n" +
	"\asummary\x18\v \x01(\tR\asummary\x12\x1d\n" +
	"\n" +
	"verify_key\x18\f \x01(\tR\tverifyKey\x12$\n" +
	"\x04team\x18\r \x01(\v2\x10.discord_v1.TeamR\x04team\x12\x19\n" +
	"\bguild_id\x18\x0e \x01(\tR\aguildId\x12$\n" +
	"\x0eprimary_sku_id\x18\x0f \x01(\tR\fprimarySkuId\x12\x12\n" +
	"\x04slug\x18\x10 \x01(\tR\x04slug\x12\x1f\n" +
	"\vcover_image\x18\x11 \x01(\tR\n" +
	"coverImage\x12\x14\n" +
	"\x05flags\x18\x12 \x01(\x05R\x05flags\x12m\n" +
	"\x18integration_types_config\x18\x13 \x03(\v23.discord_v1.Application.IntegrationTypesConfigEntryR\x16integrationTypesConfig\x1aw\n" +
	"\x1bIntegrationTypesConfigEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12B\n" +
	"\x05value\x18\x02 \x01(\v2,.discord_v1.ApplicationIntegrationTypeConfigR\x05value:\x028\x01\"\x92\x04\n" +
	"!ApplicationRoleConnectionMetadata\x12\x12\n" +
	"\x04type\x18\x01 \x01(\x05R\x04type\x12\x10\n" +
	"\x03key\x18\x02 \x01(\tR\x03key\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12s\n" +
	"\x12name_localizations\x18\x04 \x03(\v2D.discord_v1.ApplicationRoleConnectionMetadata.NameLocalizationsEntryR\x11nameLocalizations\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12\x88\x01\n" +
	"\x19description_localizations\x18\x06 \x03(\v2K.discord_v1.ApplicationRoleConnectionMetadata.DescriptionLocalizationsEntryR\x18descriptionLocalizations\x1aD\n" +
	"\x16NameLocalizationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aK\n" +
	"\x1dDescriptionLocalizationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xfb\x01\n" +
	"\x19ApplicationRoleConnection\x12#\n" +
	"\rplatform_name\x18\x01 \x01(\tR\fplatformName\x12+\n" +
	"\x11platform_username\x18\x02 \x01(\tR\x10platformUsername\x12O\n" +
	"\bmetadata\x18\x03 \x03(\v23.discord_v1.ApplicationRoleConnection.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x9f\x01\n" +
	"\x0eUserConnection\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x12\x18\n" +
	"\arevoked\x18\x04 \x01(\bR\arevoked\x12;\n" +
	"\fintegrations\x18\x05 \x03(\v2\x17.discord_v1.IntegrationR\fintegrations\"\xaf\x03\n" +
	"\vIntegration\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x12\x18\n" +
	"\aenabled\x18\x04 \x01(\bR\aenabled\x12\x18\n" +
	"\asyncing\x18\x05 \x01(\bR\asyncing\x12\x17\n" +
	"\arole_id\x18\x06 \x01(\tR\x06roleId\x12)\n" +
	"\x10enable_emoticons\x18\a \x01(\bR\x0fenableEmoticons\x12'\n" +
	"\x0fexpire_behavior\x18\b \x01(\x05R\x0eexpireBehavior\x12.\n" +
	"\x13expire_grace_period\x18\t \x01(\x05R\x11expireGracePeriod\x12$\n" +
	"\x04user\x18\n" +
	" \x01(\v2\x10.discord_v1.UserR\x04user\x128\n" +
	"\aaccount\x18\v \x01(\v2\x1e.discord_v1.IntegrationAccountR\aaccount\x127\n" +
	"\tsynced_at\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\bsyncedAt\"8\n" +
	"\x12IntegrationAccount\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"\x83\x01\n" +
	"\vVoiceRegion\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\aoptimal\x18\x03 \x01(\bR\aoptimal\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x04 \x01(\bR\n" +
	"deprecated\x12\x16\n" +
	"\x06custom\x18\x05 \x01(\bR\x06custom\"\xc2\x05\n" +
	"\x06Invite\x12'\n" +
	"\x05guild\x18\x01 \x01(\v2\x11.discord_v1.GuildR\x05guild\x12-\n" +
	"\achannel\x18\x02 \x01(\v2\x13.discord_v1.ChannelR\achannel\x12*\n" +
	"\ainviter\x18\x03 \x01(\v2\x10.discord_v1.UserR\ainviter\x12\x12\n" +
	"\x04code\x18\x04 \x01(\tR\x04code\x129\n" +
	"\n" +
	"created_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12\x17\n" +
	"\amax_age\x18\x06 \x01(\x05R\x06maxAge\x12\x12\n" +
	"\x04uses\x18\a \x01(\x05R\x04uses\x12\x19\n" +
	"\bmax_uses\x18\b \x01(\x05R\amaxUses\x12\x18\n" +
	"\arevoked\x18\t \x01(\bR\arevoked\x12\x1c\n" +
	"\ttemporary\x18\n" +
	" \x01(\bR\ttemporary\x12\x16\n" +
	"\x06unique\x18\v \x01(\bR\x06unique\x121\n" +
	"\vtarget_user\x18\f \x01(\v2\x10.discord_v1.UserR\n" +
	"targetUser\x12\x1f\n" +
	"\vtarget_type\x18\r \x01(\rR\n" +
	"targetType\x12F\n" +
	"\x12target_application\x18\x0e \x01(\v2\x17.discord_v1.ApplicationR\x11targetApplication\x12<\n" +
	"\x1aapproximate_presence_count\x18\x0f \x01(\x05R\x18approximatePresenceCount\x128\n" +
	"\x18approximate_member_count\x18\x10 \x01(\x05R\x16approximateMemberCount\x129\n" +
	"\n" +
	"expires_at\x18\x11 \x01(\v2\x1a.google.protobuf.TimestampR\texpiresAt\"\x94\n" +
	"\n" +
	"\aChannel\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x19\n" +
	"\bguild_id\x18\x02 \x01(\tR\aguildId\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x14\n" +
	"\x05topic\x18\x04 \x01(\tR\x05topic\x12\x12\n" +
	"\x04type\x18\x05 \x01(\x05R\x04type\x12&\n" +
	"\x0flast_message_id\x18\x06 \x01(\tR\rlastMessageId\x12H\n" +
	"\x12last_pin_timestamp\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\x10lastPinTimestamp\x12#\n" +
	"\rmessage_count\x18\b \x01(\x05R\fmessageCount\x12!\n" +
	"\fmember_count\x18\t \x01(\x05R\vmemberCount\x12\x12\n" +
	"\x04nsfw\x18\n" +
	" \x01(\bR\x04nsfw\x12\x12\n" +
	"\x04icon\x18\v \x01(\tR\x04icon\x12\x1a\n" +
	"\bposition\x18\f \x01(\x05R\bposition\x12\x18\n" +
	"\abitrate\x18\r \x01(\x05R\abitrate\x120\n" +
	"\n" +
	"recipients\x18\x0e \x03(\v2\x10.discord_v1.UserR\n" +
	"recipients\x12/\n" +
	"\bmessages\x18\x0f \x03(\v2\x13.discord_v1.MessageR\bmessages\x12T\n" +
	"\x15permission_overwrites\x18\x10 \x03(\v2\x1f.discord_v1.PermissionOverwriteR\x14permissionOverwrites\x12\x1d\n" +
	"\n" +
	"user_limit\x18\x11 \x01(\x05R\tuserLimit\x12\x1b\n" +
	"\tparent_id\x18\x12 \x01(\tR\bparentId\x12-\n" +
	"\x13rate_limit_per_user\x18\x13 \x01(\x05R\x10rateLimitPerUser\x12\x19\n" +
	"\bowner_id\x18\x14 \x01(\tR\aownerId\x12%\n" +
	"\x0eapplication_id\x18\x15 \x01(\tR\rapplicationId\x12C\n" +
	"\x0fthread_metadata\x18\x16 \x01(\v2\x1a.discord_v1.ThreadMetadataR\x0ethreadMetadata\x120\n" +
	"\x06member\x18\x17 \x01(\v2\x18.discord_v1.ThreadMemberR\x06member\x122\n" +
	"\amembers\x18\x18 \x03(\v2\x18.discord_v1.ThreadMemberR\amembers\x12\x14\n" +
	"\x05flags\x18\x19 \x01(\x05R\x05flags\x12;\n" +
	"\x0eavailable_tags\x18\x1a \x03(\v2\x14.discord_v1.ForumTagR\ravailableTags\x12!\n" +
	"\fapplied_tags\x18\x1b \x03(\tR\vappliedTags\x12V\n" +
	"\x16default_reaction_emoji\x18\x1c \x01(\v2 .discord_v1.ForumDefaultReactionR\x14defaultReactionEmoji\x12I\n" +
	"\"default_thread_rate_limit_per_user\x18\x1d \x01(\x05R\x1ddefaultThreadRateLimitPerUser\x12,\n" +
	"\x12default_sort_order\x18\x1e \x01(\x05R\x10defaultSortOrder\x120\n" +
	"\x14default_forum_layout\x18\x1f \x01(\x05R\x12defaultForumLayout\"c\n" +
	"\x13PermissionOverwrite\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04type\x18\x02 \x01(\x05R\x04type\x12\x12\n" +
	"\x04deny\x18\x03 \x01(\x03R\x04deny\x12\x14\n" +
	"\x05allow\x18\x04 \x01(\x03R\x05allow\"\xd9\x01\n" +
	"\vThreadStart\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x122\n" +
	"\x15auto_archive_duration\x18\x02 \x01(\x05R\x13autoArchiveDuration\x12\x12\n" +
	"\x04type\x18\x03 \x01(\x05R\x04type\x12\x1c\n" +
	"\tinvitable\x18\x04 \x01(\bR\tinvitable\x12-\n" +
	"\x13rate_limit_per_user\x18\x05 \x01(\x05R\x10rateLimitPerUser\x12!\n" +
	"\fapplied_tags\x18\x06 \x03(\tR\vappliedTags\"\xdf\x01\n" +
	"\x0eThreadMetadata\x12\x1a\n" +
	"\barchived\x18\x01 \x01(\bR\barchived\x122\n" +
	"\x15auto_archive_duration\x18\x02 \x01(\x05R\x13autoArchiveDuration\x12G\n" +
	"\x11archive_timestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x10archiveTimestamp\x12\x16\n" +
	"\x06locked\x18\x04 \x01(\bR\x06locked\x12\x1c\n" +
	"\tinvitable\x18\x05 \x01(\bR\tinvitable\"\xbc\x01\n" +
	"\fThreadMember\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12A\n" +
	"\x0ejoin_timestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\rjoinTimestamp\x12\x14\n" +
	"\x05flags\x18\x04 \x01(\x05R\x05flags\x12*\n" +
	"\x06member\x18\x05 \x01(\v2\x12.discord_v1.MemberR\x06member\"\x8b\x01\n" +
	"\vThreadsList\x12-\n" +
	"\athreads\x18\x01 \x03(\v2\x13.discord_v1.ChannelR\athreads\x122\n" +
	"\amembers\x18\x02 \x03(\v2\x18.discord_v1.ThreadMemberR\amembers\x12\x19\n" +
	"\bhas_more\x18\x03 \x01(\bR\ahasMore\"\xb0\x01\n" +
	"\x11AddedThreadMember\x12=\n" +
	"\rthread_member\x18\x01 \x01(\v2\x18.discord_v1.ThreadMemberR\fthreadMember\x12*\n" +
	"\x06member\x18\x02 \x01(\v2\x12.discord_v1.MemberR\x06member\x120\n" +
	"\bpresence\x18\x03 \x01(\v2\x14.discord_v1.PresenceR\bpresence\"P\n" +
	"\x14ForumDefaultReaction\x12\x19\n" +
	"\bemoji_id\x18\x01 \x01(\tR\aemojiId\x12\x1d\n" +
	"\n" +
	"emoji_name\x18\x02 \x01(\tR\temojiName\"\x86\x01\n" +
	"\bForumTag\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1c\n" +
	"\tmoderated\x18\x03 \x01(\bR\tmoderated\x12\x19\n" +
	"\bemoji_id\x18\x04 \x01(\tR\aemojiId\x12\x1d\n" +
	"\n" +
	"emoji_name\x18\x05 \x01(\tR\temojiName\"\xe2\x01\n" +
	"\x05Emoji\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05roles\x18\x03 \x03(\tR\x05roles\x12$\n" +
	"\x04user\x18\x04 \x01(\v2\x10.discord_v1.UserR\x04user\x12%\n" +
	"\x0erequire_colons\x18\x05 \x01(\bR\rrequireColons\x12\x18\n" +
	"\amanaged\x18\x06 \x01(\bR\amanaged\x12\x1a\n" +
	"\banimated\x18\a \x01(\bR\banimated\x12\x1c\n" +
	"\tavailable\x18\b \x01(\bR\tavailable\"M\n" +
	"\vEmojiParams\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05image\x18\x02 \x01(\tR\x05image\x12\x14\n" +
	"\x05roles\x18\x03 \x03(\tR\x05roles\"\xaf\x02\n" +
	"\aSticker\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x17\n" +
	"\apack_id\x18\x02 \x01(\tR\x06packId\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x12\n" +
	"\x04tags\x18\x05 \x01(\tR\x04tags\x12\x12\n" +
	"\x04type\x18\x06 \x01(\x05R\x04type\x12\x1f\n" +
	"\vformat_type\x18\a \x01(\x05R\n" +
	"formatType\x12\x1c\n" +
	"\tavailable\x18\b \x01(\bR\tavailable\x12\x19\n" +
	"\bguild_id\x18\t \x01(\tR\aguildId\x12$\n" +
	"\x04user\x18\n" +
	" \x01(\v2\x10.discord_v1.UserR\x04user\x12\x1d\n" +
	"\n" +
	"sort_value\x18\v \x01(\x05R\tsortValue\"R\n" +
	"\vStickerItem\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1f\n" +
	"\vformat_type\x18\x03 \x01(\x05R\n" +
	"formatType\"\xed\x01\n" +
	"\vStickerPack\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12/\n" +
	"\bstickers\x18\x02 \x03(\v2\x13.discord_v1.StickerR\bstickers\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x15\n" +
	"\x06sku_id\x18\x04 \x01(\tR\x05skuId\x12(\n" +
	"\x10cover_sticker_id\x18\x05 \x01(\tR\x0ecoverStickerId\x12 \n" +
	"\vdescription\x18\x06 \x01(\tR\vdescription\x12&\n" +
	"\x0fbanner_asset_id\x18\a \x01(\tR\rbannerAssetId\"\xb0\x0f\n" +
	"\x05Guild\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04icon\x18\x03 \x01(\tR\x04icon\x12\x16\n" +
	"\x06region\x18\x04 \x01(\tR\x06region\x12$\n" +
	"\x0eafk_channel_id\x18\x05 \x01(\tR\fafkChannelId\x12\x19\n" +
	"\bowner_id\x18\x06 \x01(\tR\aownerId\x12\x14\n" +
	"\x05owner\x18\a \x01(\bR\x05owner\x127\n" +
	"\tjoined_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\bjoinedAt\x12)\n" +
	"\x10discovery_splash\x18\t \x01(\tR\x0fdiscoverySplash\x12\x16\n" +
	"\x06splash\x18\n" +
	" \x01(\tR\x06splash\x12\x1f\n" +
	"\vafk_timeout\x18\v \x01(\x05R\n" +
	"afkTimeout\x12!\n" +
	"\fmember_count\x18\f \x01(\x05R\vmemberCount\x12-\n" +
	"\x12verification_level\x18\r \x01(\x05R\x11verificationLevel\x12\x14\n" +
	"\x05large\x18\x0e \x01(\bR\x05large\x12B\n" +
	"\x1ddefault_message_notifications\x18\x0f \x01(\x05R\x1bdefaultMessageNotifications\x12&\n" +
	"\x05roles\x18\x10 \x03(\v2\x10.discord_v1.RoleR\x05roles\x12)\n" +
	"\x06emojis\x18\x11 \x03(\v2\x11.discord_v1.EmojiR\x06emojis\x12/\n" +
	"\bstickers\x18\x12 \x03(\v2\x13.discord_v1.StickerR\bstickers\x12,\n" +
	"\amembers\x18\x13 \x03(\v2\x12.discord_v1.MemberR\amembers\x122\n" +
	"\tpresences\x18\x14 \x03(\v2\x14.discord_v1.PresenceR\tpresences\x12#\n" +
	"\rmax_presences\x18\x15 \x01(\x05R\fmaxPresences\x12\x1f\n" +
	"\vmax_members\x18\x16 \x01(\x05R\n" +
	"maxMembers\x12/\n" +
	"\bchannels\x18\x17 \x03(\v2\x13.discord_v1.ChannelR\bchannels\x12-\n" +
	"\athreads\x18\x18 \x03(\v2\x13.discord_v1.ChannelR\athreads\x129\n" +
	"\fvoice_states\x18\x19 \x03(\v2\x16.discord_v1.VoiceStateR\vvoiceStates\x12 \n" +
	"\vunavailable\x18\x1a \x01(\bR\vunavailable\x126\n" +
	"\x17explicit_content_filter\x18\x1b \x01(\x05R\x15explicitContentFilter\x12\x1d\n" +
	"\n" +
	"nsfw_level\x18\x1c \x01(\x05R\tnsfwLevel\x12\x1a\n" +
	"\bfeatures\x18\x1d \x03(\tR\bfeatures\x12\x1b\n" +
	"\tmfa_level\x18\x1e \x01(\x05R\bmfaLevel\x12%\n" +
	"\x0eapplication_id\x18\x1f \x01(\tR\rapplicationId\x12%\n" +
	"\x0ewidget_enabled\x18  \x01(\bR\rwidgetEnabled\x12*\n" +
	"\x11widget_channel_id\x18! \x01(\tR\x0fwidgetChannelId\x12*\n" +
	"\x11system_channel_id\x18\" \x01(\tR\x0fsystemChannelId\x120\n" +
	"\x14system_channel_flags\x18# \x01(\x05R\x12systemChannelFlags\x12(\n" +
	"\x10rules_channel_id\x18$ \x01(\tR\x0erulesChannelId\x12&\n" +
	"\x0fvanity_url_code\x18% \x01(\tR\rvanityUrlCode\x12 \n" +
	"\vdescription\x18& \x01(\tR\vdescription\x12\x16\n" +
	"\x06banner\x18' \x01(\tR\x06banner\x12!\n" +
	"\fpremium_tier\x18( \x01(\x05R\vpremiumTier\x12<\n" +
	"\x1apremium_subscription_count\x18) \x01(\x05R\x18premiumSubscriptionCount\x12)\n" +
	"\x10preferred_locale\x18* \x01(\tR\x0fpreferredLocale\x129\n" +
	"\x19public_updates_channel_id\x18+ \x01(\tR\x16publicUpdatesChannelId\x125\n" +
	"\x17max_video_channel_users\x18, \x01(\x05R\x14maxVideoChannelUsers\x128\n" +
	"\x18approximate_member_count\x18- \x01(\x05R\x16approximateMemberCount\x12<\n" +
	"\x1aapproximate_presence_count\x18. \x01(\x05R\x18approximatePresenceCount\x12 \n" +
	"\vpermissions\x18/ \x01(\x03R\vpermissions\x12B\n" +
	"\x0fstage_instances\x180 \x03(\v2\x19.discord_v1.StageInstanceR\x0estageInstances\"\xea\x02\n" +
	"\fGuildPreview\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04icon\x18\x03 \x01(\tR\x04icon\x12\x16\n" +
	"\x06splash\x18\x04 \x01(\tR\x06splash\x12)\n" +
	"\x10discovery_splash\x18\x05 \x01(\tR\x0fdiscoverySplash\x12)\n" +
	"\x06emojis\x18\x06 \x03(\v2\x11.discord_v1.EmojiR\x06emojis\x12\x1a\n" +
	"\bfeatures\x18\a \x03(\tR\bfeatures\x128\n" +
	"\x18approximate_member_count\x18\b \x01(\x05R\x16approximateMemberCount\x12<\n" +
	"\x1aapproximate_presence_count\x18\t \x01(\x05R\x18approximatePresenceCount\x12 \n" +
	"\vdescription\x18\n" +
	" \x01(\tR\vdescription\"\x80\x05\n" +
	"\x13GuildScheduledEvent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x19\n" +
	"\bguild_id\x18\x02 \x01(\tR\aguildId\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x03 \x01(\tR\tchannelId\x12\x1d\n" +
	"\n" +
	"creator_id\x18\x04 \x01(\tR\tcreatorId\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x06 \x01(\tR\vdescription\x12L\n" +
	"\x14scheduled_start_time\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\x12scheduledStartTime\x12H\n" +
	"\x12scheduled_end_time\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\x10scheduledEndTime\x12#\n" +
	"\rprivacy_level\x18\t \x01(\x05R\fprivacyLevel\x12\x16\n" +
	"\x06status\x18\n" +
	" \x01(\x05R\x06status\x12\x1f\n" +
	"\ventity_type\x18\v \x01(\x05R\n" +
	"entityType\x12\x1b\n" +
	"\tentity_id\x18\f \x01(\tR\bentityId\x12V\n" +
	"\x0fentity_metadata\x18\r \x01(\v2-.discord_v1.GuildScheduledEventEntityMetadataR\x0eentityMetadata\x12*\n" +
	"\acreator\x18\x0e \x01(\v2\x10.discord_v1.UserR\acreator\x12\x1d\n" +
	"\n" +
	"user_count\x18\x0f \x01(\x05R\tuserCount\x12\x14\n" +
	"\x05image\x18\x10 \x01(\tR\x05image\"\xd4\x03\n" +
	"\x19GuildScheduledEventParams\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\tR\tchannelId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12L\n" +
	"\x14scheduled_start_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x12scheduledStartTime\x12H\n" +
	"\x12scheduled_end_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x10scheduledEndTime\x12#\n" +
	"\rprivacy_level\x18\x06 \x01(\x05R\fprivacyLevel\x12\x16\n" +
	"\x06status\x18\a \x01(\x05R\x06status\x12\x1f\n" +
	"\ventity_type\x18\b \x01(\x05R\n" +
	"entityType\x12V\n" +
	"\x0fentity_metadata\x18\t \x01(\v2-.discord_v1.GuildScheduledEventEntityMetadataR\x0eentityMetadata\x12\x14\n" +
	"\x05image\x18\n" +
	" \x01(\tR\x05image\"?\n" +
	"!GuildScheduledEventEntityMetadata\x12\x1a\n" +
	"\blocation\x18\x01 \x01(\tR\blocation\"\xa4\x01\n" +
	"\x17GuildScheduledEventUser\x127\n" +
	"\x18guild_scheduled_event_id\x18\x01 \x01(\tR\x15guildScheduledEventId\x12$\n" +
	"\x04user\x18\x02 \x01(\v2\x10.discord_v1.UserR\x04user\x12*\n" +
	"\x06member\x18\x03 \x01(\v2\x12.discord_v1.MemberR\x06member\"+\n" +
	"\x13GuildOnboardingMode\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x05R\x05value\"\xe8\x01\n" +
	"\x0fGuildOnboarding\x12\x19\n" +
	"\bguild_id\x18\x01 \x01(\tR\aguildId\x12;\n" +
	"\aprompts\x18\x02 \x03(\v2!.discord_v1.GuildOnboardingPromptR\aprompts\x12.\n" +
	"\x13default_channel_ids\x18\x03 \x03(\tR\x11defaultChannelIds\x12\x18\n" +
	"\aenabled\x18\x04 \x01(\bR\aenabled\x123\n" +
	"\x04mode\x18\x05 \x01(\v2\x1f.discord_v1.GuildOnboardingModeR\x04mode\"1\n" +
	"\x19GuildOnboardingPromptType\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x05R\x05value\"\xa1\x02\n" +
	"\x15GuildOnboardingPrompt\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x129\n" +
	"\x04type\x18\x02 \x01(\v2%.discord_v1.GuildOnboardingPromptTypeR\x04type\x12A\n" +
	"\aoptions\x18\x03 \x03(\v2'.discord_v1.GuildOnboardingPromptOptionR\aoptions\x12\x14\n" +
	"\x05title\x18\x04 \x01(\tR\x05title\x12#\n" +
	"\rsingle_select\x18\x05 \x01(\bR\fsingleSelect\x12\x1a\n" +
	"\brequired\x18\x06 \x01(\bR\brequired\x12#\n" +
	"\rin_onboarding\x18\a \x01(\bR\finOnboarding\"\xab\x02\n" +
	"\x1bGuildOnboardingPromptOption\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1f\n" +
	"\vchannel_ids\x18\x02 \x03(\tR\n" +
	"channelIds\x12\x19\n" +
	"\brole_ids\x18\x03 \x03(\tR\aroleIds\x12'\n" +
	"\x05emoji\x18\x04 \x01(\v2\x11.discord_v1.EmojiR\x05emoji\x12\x14\n" +
	"\x05title\x18\x05 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x06 \x01(\tR\vdescription\x12\x19\n" +
	"\bemoji_id\x18\a \x01(\tR\aemojiId\x12\x1d\n" +
	"\n" +
	"emoji_name\x18\b \x01(\tR\temojiName\x12%\n" +
	"\x0eemoji_animated\x18\t \x01(\bR\remojiAnimated\"\xc9\x03\n" +
	"\rGuildTemplate\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1f\n" +
	"\vusage_count\x18\x04 \x01(\x05R\n" +
	"usageCount\x12\x1d\n" +
	"\n" +
	"creator_id\x18\x05 \x01(\tR\tcreatorId\x12*\n" +
	"\acreator\x18\x06 \x01(\v2\x10.discord_v1.UserR\acreator\x129\n" +
	"\n" +
	"created_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12&\n" +
	"\x0fsource_guild_id\x18\t \x01(\tR\rsourceGuildId\x12I\n" +
	"\x17serialized_source_guild\x18\n" +
	" \x01(\v2\x11.discord_v1.GuildR\x15serializedSourceGuild\x12\x19\n" +
	"\bis_dirty\x18\v \x01(\bR\aisDirty\"K\n" +
	"\x13GuildTemplateParams\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\"\x8f\x02\n" +
	"\tUserGuild\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04icon\x18\x03 \x01(\tR\x04icon\x12\x14\n" +
	"\x05owner\x18\x04 \x01(\bR\x05owner\x12 \n" +
	"\vpermissions\x18\x05 \x01(\x03R\vpermissions\x12\x1a\n" +
	"\bfeatures\x18\x06 \x03(\tR\bfeatures\x128\n" +
	"\x18approximate_member_count\x18\a \x01(\x05R\x16approximateMemberCount\x12<\n" +
	"\x1aapproximate_presence_count\x18\b \x01(\x05R\x18approximatePresenceCount\"\xa2\x06\n" +
	"\vGuildParams\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x16\n" +
	"\x06region\x18\x02 \x01(\tR\x06region\x12-\n" +
	"\x12verification_level\x18\x03 \x01(\x05R\x11verificationLevel\x12B\n" +
	"\x1ddefault_message_notifications\x18\x04 \x01(\x05R\x1bdefaultMessageNotifications\x126\n" +
	"\x17explicit_content_filter\x18\x05 \x01(\x05R\x15explicitContentFilter\x12$\n" +
	"\x0eafk_channel_id\x18\x06 \x01(\tR\fafkChannelId\x12\x1f\n" +
	"\vafk_timeout\x18\a \x01(\x05R\n" +
	"afkTimeout\x12\x12\n" +
	"\x04icon\x18\b \x01(\tR\x04icon\x12\x19\n" +
	"\bowner_id\x18\t \x01(\tR\aownerId\x12\x16\n" +
	"\x06splash\x18\n" +
	" \x01(\tR\x06splash\x12)\n" +
	"\x10discovery_splash\x18\v \x01(\tR\x0fdiscoverySplash\x12\x16\n" +
	"\x06banner\x18\f \x01(\tR\x06banner\x12*\n" +
	"\x11system_channel_id\x18\r \x01(\tR\x0fsystemChannelId\x120\n" +
	"\x14system_channel_flags\x18\x0e \x01(\x05R\x12systemChannelFlags\x12(\n" +
	"\x10rules_channel_id\x18\x0f \x01(\tR\x0erulesChannelId\x129\n" +
	"\x19public_updates_channel_id\x18\x10 \x01(\tR\x16publicUpdatesChannelId\x12)\n" +
	"\x10preferred_locale\x18\x11 \x01(\tR\x0fpreferredLocale\x12\x1a\n" +
	"\bfeatures\x18\x12 \x03(\tR\bfeatures\x12 \n" +
	"\vdescription\x18\x13 \x01(\tR\vdescription\x12?\n" +
	"\x1cpremium_progress_bar_enabled\x18\x14 \x01(\bR\x19premiumProgressBarEnabled\"\x9f\x02\n" +
	"\x04Role\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\amanaged\x18\x03 \x01(\bR\amanaged\x12 \n" +
	"\vmentionable\x18\x04 \x01(\bR\vmentionable\x12\x14\n" +
	"\x05hoist\x18\x05 \x01(\bR\x05hoist\x12\x14\n" +
	"\x05color\x18\x06 \x01(\x05R\x05color\x12\x1a\n" +
	"\bposition\x18\a \x01(\x05R\bposition\x12 \n" +
	"\vpermissions\x18\b \x01(\x03R\vpermissions\x12\x12\n" +
	"\x04icon\x18\t \x01(\tR\x04icon\x12#\n" +
	"\runicode_emoji\x18\n" +
	" \x01(\tR\funicodeEmoji\x12\x14\n" +
	"\x05flags\x18\v \x01(\x05R\x05flags\"!\n" +
	"\tRoleFlags\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x05R\x05value\"\xc9\x01\n" +
	"\n" +
	"RoleParams\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05color\x18\x02 \x01(\x05R\x05color\x12\x14\n" +
	"\x05hoist\x18\x03 \x01(\bR\x05hoist\x12 \n" +
	"\vpermissions\x18\x04 \x01(\x03R\vpermissions\x12 \n" +
	"\vmentionable\x18\x05 \x01(\bR\vmentionable\x12#\n" +
	"\runicode_emoji\x18\x06 \x01(\tR\funicodeEmoji\x12\x12\n" +
	"\x04icon\x18\a \x01(\tR\x04icon\"\xc1\x03\n" +
	"\n" +
	"VoiceState\x12\x19\n" +
	"\bguild_id\x18\x01 \x01(\tR\aguildId\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x02 \x01(\tR\tchannelId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12*\n" +
	"\x06member\x18\x04 \x01(\v2\x12.discord_v1.MemberR\x06member\x12\x1d\n" +
	"\n" +
	"session_id\x18\x05 \x01(\tR\tsessionId\x12\x12\n" +
	"\x04deaf\x18\x06 \x01(\bR\x04deaf\x12\x12\n" +
	"\x04mute\x18\a \x01(\bR\x04mute\x12\x1b\n" +
	"\tself_deaf\x18\b \x01(\bR\bselfDeaf\x12\x1b\n" +
	"\tself_mute\x18\t \x01(\bR\bselfMute\x12\x1f\n" +
	"\vself_stream\x18\n" +
	" \x01(\bR\n" +
	"selfStream\x12\x1d\n" +
	"\n" +
	"self_video\x18\v \x01(\bR\tselfVideo\x12\x1a\n" +
	"\bsuppress\x18\f \x01(\bR\bsuppress\x12W\n" +
	"\x1arequest_to_speak_timestamp\x18\r \x01(\v2\x1a.google.protobuf.TimestampR\x17requestToSpeakTimestamp\"\xd3\x01\n" +
	"\bPresence\x12$\n" +
	"\x04user\x18\x01 \x01(\v2\x10.discord_v1.UserR\x04user\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x124\n" +
	"\n" +
	"activities\x18\x03 \x03(\v2\x14.discord_v1.ActivityR\n" +
	"activities\x12\x14\n" +
	"\x05since\x18\x04 \x01(\x05R\x05since\x12=\n" +
	"\rclient_status\x18\x05 \x01(\v2\x18.discord_v1.ClientStatusR\fclientStatus\"#\n" +
	"\vMemberFlags\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x05R\x05value\"\xf5\x03\n" +
	"\x06Member\x12\x19\n" +
	"\bguild_id\x18\x01 \x01(\tR\aguildId\x127\n" +
	"\tjoined_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\bjoinedAt\x12\x12\n" +
	"\x04nick\x18\x03 \x01(\tR\x04nick\x12\x12\n" +
	"\x04deaf\x18\x04 \x01(\bR\x04deaf\x12\x12\n" +
	"\x04mute\x18\x05 \x01(\bR\x04mute\x12\x16\n" +
	"\x06avatar\x18\x06 \x01(\tR\x06avatar\x12\x16\n" +
	"\x06banner\x18\a \x01(\tR\x06banner\x12$\n" +
	"\x04user\x18\b \x01(\v2\x10.discord_v1.UserR\x04user\x12\x14\n" +
	"\x05roles\x18\t \x03(\tR\x05roles\x12?\n" +
	"\rpremium_since\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\fpremiumSince\x12\x14\n" +
	"\x05flags\x18\v \x01(\x05R\x05flags\x12\x18\n" +
	"\apending\x18\f \x01(\bR\apending\x12 \n" +
	"\vpermissions\x18\r \x01(\x03R\vpermissions\x12\\\n" +
	"\x1ccommunication_disabled_until\x18\x0e \x01(\v2\x1a.google.protobuf.TimestampR\x1acommunicationDisabledUntil\"R\n" +
	"\fClientStatus\x12\x18\n" +
	"\adesktop\x18\x01 \x01(\tR\adesktop\x12\x16\n" +
	"\x06mobile\x18\x02 \x01(\tR\x06mobile\x12\x10\n" +
	"\x03web\x18\x03 \x01(\tR\x03web\"\x7f\n" +
	"\x0fTooManyRequests\x12\x16\n" +
	"\x06bucket\x18\x01 \x01(\tR\x06bucket\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12:\n" +
	"\vretry_after\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\n" +
	"retryAfter\"h\n" +
	"\tReadState\x12#\n" +
	"\rmention_count\x18\x01 \x01(\x05R\fmentionCount\x12&\n" +
	"\x0flast_message_id\x18\x02 \x01(\tR\rlastMessageId\x12\x0e\n" +
	"\x02id\x18\x03 \x01(\tR\x02id\"L\n" +
	"\tGuildRole\x12$\n" +
	"\x04role\x18\x01 \x01(\v2\x10.discord_v1.RoleR\x04role\x12\x19\n" +
	"\bguild_id\x18\x02 \x01(\tR\aguildId\"H\n" +
	"\bGuildBan\x12\x16\n" +
	"\x06reason\x18\x01 \x01(\tR\x06reason\x12$\n" +
	"\x04user\x18\x02 \x01(\v2\x10.discord_v1.UserR\x04user\"\xac\x03\n" +
	"\x12AutoModerationRule\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x19\n" +
	"\bguild_id\x18\x02 \x01(\tR\aguildId\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"creator_id\x18\x04 \x01(\tR\tcreatorId\x12\x1d\n" +
	"\n" +
	"event_type\x18\x05 \x01(\x05R\teventType\x12!\n" +
	"\ftrigger_type\x18\x06 \x01(\x05R\vtriggerType\x12T\n" +
	"\x10trigger_metadata\x18\a \x01(\v2).discord_v1.AutoModerationTriggerMetadataR\x0ftriggerMetadata\x12:\n" +
	"\aactions\x18\b \x03(\v2 .discord_v1.AutoModerationActionR\aactions\x12\x18\n" +
	"\aenabled\x18\t \x01(\bR\aenabled\x12!\n" +
	"\fexempt_roles\x18\n" +
	" \x03(\tR\vexemptRoles\x12'\n" +
	"\x0fexempt_channels\x18\v \x03(\tR\x0eexemptChannels\"\xd6\x01\n" +
	"\x1dAutoModerationTriggerMetadata\x12%\n" +
	"\x0ekeyword_filter\x18\x01 \x03(\tR\rkeywordFilter\x12%\n" +
	"\x0eregex_patterns\x18\x02 \x03(\tR\rregexPatterns\x12\x18\n" +
	"\apresets\x18\x03 \x03(\rR\apresets\x12\x1d\n" +
	"\n" +
	"allow_list\x18\x04 \x03(\tR\tallowList\x12.\n" +
	"\x13mention_total_limit\x18\x05 \x01(\x05R\x11mentionTotalLimit\"0\n" +
	"\x18AutoModerationActionType\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x05R\x05value\"\x80\x01\n" +
	"\x1cAutoModerationActionMetadata\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\tR\tchannelId\x12\x1a\n" +
	"\bduration\x18\x02 \x01(\x05R\bduration\x12%\n" +
	"\x0ecustom_message\x18\x03 \x01(\tR\rcustomMessage\"p\n" +
	"\x14AutoModerationAction\x12\x12\n" +
	"\x04type\x18\x01 \x01(\x05R\x04type\x12D\n" +
	"\bmetadata\x18\x02 \x01(\v2(.discord_v1.AutoModerationActionMetadataR\bmetadata\"E\n" +
	"\n" +
	"GuildEmbed\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x02 \x01(\tR\tchannelId\"\xec\x01\n" +
	"\rGuildAuditLog\x12/\n" +
	"\bwebhooks\x18\x01 \x03(\v2\x13.discord_v1.WebhookR\bwebhooks\x12&\n" +
	"\x05users\x18\x02 \x03(\v2\x10.discord_v1.UserR\x05users\x12E\n" +
	"\x11audit_log_entries\x18\x03 \x03(\v2\x19.discord_v1.AuditLogEntryR\x0fauditLogEntries\x12;\n" +
	"\fintegrations\x18\x04 \x03(\v2\x17.discord_v1.IntegrationR\fintegrations\"\xfb\x01\n" +
	"\rAuditLogEntry\x12\x1b\n" +
	"\ttarget_id\x18\x01 \x01(\tR\btargetId\x124\n" +
	"\achanges\x18\x02 \x03(\v2\x1a.discord_v1.AuditLogChangeR\achanges\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x0e\n" +
	"\x02id\x18\x04 \x01(\tR\x02id\x12\x1f\n" +
	"\vaction_type\x18\x05 \x01(\x05R\n" +
	"actionType\x125\n" +
	"\aoptions\x18\x06 \x01(\v2\x1b.discord_v1.AuditLogOptionsR\aoptions\x12\x16\n" +
	"\x06reason\x18\a \x01(\tR\x06reason\"\\\n" +
	"\x0eAuditLogChange\x12\x1b\n" +
	"\tnew_value\x18\x01 \x01(\fR\bnewValue\x12\x1b\n" +
	"\told_value\x18\x02 \x01(\fR\boldValue\x12\x10\n" +
	"\x03key\x18\x03 \x01(\tR\x03key\"\xd4\x03\n" +
	"\x0fAuditLogOptions\x12,\n" +
	"\x12delete_member_days\x18\x01 \x01(\tR\x10deleteMemberDays\x12'\n" +
	"\x0fmembers_removed\x18\x02 \x01(\tR\x0emembersRemoved\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x03 \x01(\tR\tchannelId\x12\x1d\n" +
	"\n" +
	"message_id\x18\x04 \x01(\tR\tmessageId\x12\x14\n" +
	"\x05count\x18\x05 \x01(\tR\x05count\x12\x0e\n" +
	"\x02id\x18\x06 \x01(\tR\x02id\x12\x12\n" +
	"\x04type\x18\a \x01(\tR\x04type\x12\x1b\n" +
	"\trole_name\x18\b \x01(\tR\broleName\x12%\n" +
	"\x0eapplication_id\x18\t \x01(\tR\rapplicationId\x129\n" +
	"\x19auto_moderation_rule_name\x18\n" +
	" \x01(\tR\x16autoModerationRuleName\x12H\n" +
	"!auto_moderation_rule_trigger_type\x18\v \x01(\tR\x1dautoModerationRuleTriggerType\x12)\n" +
	"\x10integration_type\x18\f \x01(\tR\x0fintegrationType\"\xe2\x01\n" +
	"\x11GuildMemberParams\x12\x12\n" +
	"\x04nick\x18\x01 \x01(\tR\x04nick\x12\x14\n" +
	"\x05roles\x18\x02 \x03(\tR\x05roles\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x03 \x01(\tR\tchannelId\x12\x12\n" +
	"\x04mute\x18\x04 \x01(\bR\x04mute\x12\x12\n" +
	"\x04deaf\x18\x05 \x01(\bR\x04deaf\x12\\\n" +
	"\x1ccommunication_disabled_until\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x1acommunicationDisabledUntil\"\x8b\x01\n" +
	"\x14GuildMemberAddParams\x12!\n" +
	"\faccess_token\x18\x01 \x01(\tR\vaccessToken\x12\x12\n" +
	"\x04nick\x18\x02 \x01(\tR\x04nick\x12\x14\n" +
	"\x05roles\x18\x03 \x03(\tR\x05roles\x12\x12\n" +
	"\x04mute\x18\x04 \x01(\bR\x04mute\x12\x12\n" +
	"\x04deaf\x18\x05 \x01(\bR\x04deaf\"?\n" +
	"\x0fAPIErrorMessage\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xac\x01\n" +
	"\x0fMessageReaction\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1d\n" +
	"\n" +
	"message_id\x18\x02 \x01(\tR\tmessageId\x12'\n" +
	"\x05emoji\x18\x03 \x01(\v2\x11.discord_v1.EmojiR\x05emoji\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x04 \x01(\tR\tchannelId\x12\x19\n" +
	"\bguild_id\x18\x05 \x01(\tR\aguildId\"\x8e\x01\n" +
	"\x12GatewayBotResponse\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x16\n" +
	"\x06shards\x18\x02 \x01(\x05R\x06shards\x12N\n" +
	"\x13session_start_limit\x18\x03 \x01(\v2\x1e.discord_v1.SessionInformationR\x11sessionStartLimit\"\x92\x01\n" +
	"\x12SessionInformation\x12\x14\n" +
	"\x05total\x18\x01 \x01(\x05R\x05total\x12\x1c\n" +
	"\tremaining\x18\x02 \x01(\x05R\tremaining\x12\x1f\n" +
	"\vreset_after\x18\x03 \x01(\x05R\n" +
	"resetAfter\x12'\n" +
	"\x0fmax_concurrency\x18\x04 \x01(\x05R\x0emaxConcurrency\"\x82\x02\n" +
	"\rStageInstance\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x19\n" +
	"\bguild_id\x18\x02 \x01(\tR\aguildId\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x03 \x01(\tR\tchannelId\x12\x14\n" +
	"\x05topic\x18\x04 \x01(\tR\x05topic\x12#\n" +
	"\rprivacy_level\x18\x05 \x01(\x05R\fprivacyLevel\x123\n" +
	"\x15discoverable_disabled\x18\x06 \x01(\bR\x14discoverableDisabled\x127\n" +
	"\x18guild_scheduled_event_id\x18\a \x01(\tR\x15guildScheduledEventId\"\xa7\x01\n" +
	"\x13StageInstanceParams\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\tR\tchannelId\x12\x14\n" +
	"\x05topic\x18\x02 \x01(\tR\x05topic\x12#\n" +
	"\rprivacy_level\x18\x03 \x01(\x05R\fprivacyLevel\x126\n" +
	"\x17send_start_notification\x18\x04 \x01(\bR\x15sendStartNotification\"&\n" +
	"\x0ePollLayoutType\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x05R\x05value\"Q\n" +
	"\tPollMedia\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\x120\n" +
	"\x05emoji\x18\x02 \x01(\v2\x1a.discord_v1.ComponentEmojiR\x05emoji\"V\n" +
	"\n" +
	"PollAnswer\x12\x1b\n" +
	"\tanswer_id\x18\x01 \x01(\x05R\banswerId\x12+\n" +
	"\x05media\x18\x02 \x01(\v2\x15.discord_v1.PollMediaR\x05media\"R\n" +
	"\x0fPollAnswerCount\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x05R\x05count\x12\x19\n" +
	"\bme_voted\x18\x03 \x01(\bR\ameVoted\"m\n" +
	"\vPollResults\x12\x1c\n" +
	"\tfinalized\x18\x01 \x01(\bR\tfinalized\x12@\n" +
	"\ranswer_counts\x18\x02 \x03(\v2\x1b.discord_v1.PollAnswerCountR\fanswerCounts\"\xbc\x02\n" +
	"\x04Poll\x121\n" +
	"\bquestion\x18\x01 \x01(\v2\x15.discord_v1.PollMediaR\bquestion\x120\n" +
	"\aanswers\x18\x02 \x03(\v2\x16.discord_v1.PollAnswerR\aanswers\x12+\n" +
	"\x11allow_multiselect\x18\x03 \x01(\bR\x10allowMultiselect\x12\x1f\n" +
	"\vlayout_type\x18\x04 \x01(\x05R\n" +
	"layoutType\x12\x1a\n" +
	"\bduration\x18\x05 \x01(\x05R\bduration\x121\n" +
	"\aresults\x18\x06 \x01(\v2\x17.discord_v1.PollResultsR\aresults\x122\n" +
	"\x06expiry\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\x06expiry\"\x1f\n" +
	"\aSKUType\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x05R\x05value\" \n" +
	"\bSKUFlags\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x05R\x05value\"\x8e\x01\n" +
	"\x03SKU\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04type\x18\x02 \x01(\x05R\x04type\x12%\n" +
	"\x0eapplication_id\x18\x03 \x01(\tR\rapplicationId\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12\x12\n" +
	"\x04slug\x18\x05 \x01(\tR\x04slug\x12\x14\n" +
	"\x05flags\x18\x06 \x01(\x05R\x05flags\"*\n" +
	"\x12SubscriptionStatus\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x05R\x05value\"\xa8\x03\n" +
	"\fSubscription\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x17\n" +
	"\asku_ids\x18\x03 \x03(\tR\x06skuIds\x12'\n" +
	"\x0fentitlement_ids\x18\x04 \x03(\tR\x0eentitlementIds\x12&\n" +
	"\x0frenewal_sku_ids\x18\x05 \x03(\tR\rrenewalSkuIds\x12L\n" +
	"\x14current_period_start\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x12currentPeriodStart\x12H\n" +
	"\x12current_period_end\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\x10currentPeriodEnd\x12\x16\n" +
	"\x06status\x18\b \x01(\x05R\x06status\x12;\n" +
	"\vcanceled_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"canceledAt\x12\x18\n" +
	"\acountry\x18\n" +
	" \x01(\tR\acountry\"'\n" +
	"\x0fEntitlementType\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x05R\x05value\"\xf0\x02\n" +
	"\vEntitlement\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x15\n" +
	"\x06sku_id\x18\x02 \x01(\tR\x05skuId\x12%\n" +
	"\x0eapplication_id\x18\x03 \x01(\tR\rapplicationId\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\tR\x06userId\x12\x12\n" +
	"\x04type\x18\x05 \x01(\x05R\x04type\x12\x18\n" +
	"\adeleted\x18\x06 \x01(\bR\adeleted\x127\n" +
	"\tstarts_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\bstartsAt\x123\n" +
	"\aends_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\x06endsAt\x12\x19\n" +
	"\bguild_id\x18\t \x01(\tR\aguildId\x12\x1a\n" +
	"\bconsumed\x18\n" +
	" \x01(\bR\bconsumed\x12'\n" +
	"\x0fsubscription_id\x18\v \x01(\tR\x0esubscriptionId\",\n" +
	"\x14EntitlementOwnerType\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x05R\x05value\"b\n" +
	"\x0fEntitlementTest\x12\x15\n" +
	"\x06sku_id\x18\x01 \x01(\tR\x05skuId\x12\x19\n" +
	"\bowner_id\x18\x02 \x01(\tR\aownerId\x12\x1d\n" +
	"\n" +
	"owner_type\x18\x03 \x01(\x05R\townerType\"\x88\x02\n" +
	"\x18EntitlementFilterOptions\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x17\n" +
	"\asku_ids\x18\x02 \x03(\tR\x06skuIds\x122\n" +
	"\x06before\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x06before\x120\n" +
	"\x05after\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x05after\x12\x14\n" +
	"\x05limit\x18\x05 \x01(\x05R\x05limit\x12\x19\n" +
	"\bguild_id\x18\x06 \x01(\tR\aguildId\x12#\n" +
	"\rexclude_ended\x18\a \x01(\bR\fexcludeEnded\"\xa0\x05\n" +
	"\x05State\x12\x14\n" +
	"\x05ready\x18\x01 \x01(\bR\x05ready\x12*\n" +
	"\x11max_message_count\x18\x02 \x01(\x05R\x0fmaxMessageCount\x12%\n" +
	"\x0etrack_channels\x18\x03 \x01(\bR\rtrackChannels\x12#\n" +
	"\rtrack_threads\x18\x04 \x01(\bR\ftrackThreads\x12!\n" +
	"\ftrack_emojis\x18\x05 \x01(\bR\vtrackEmojis\x12#\n" +
	"\rtrack_members\x18\x06 \x01(\bR\ftrackMembers\x120\n" +
	"\x14track_thread_members\x18\a \x01(\bR\x12trackThreadMembers\x12\x1f\n" +
	"\vtrack_roles\x18\b \x01(\bR\n" +
	"trackRoles\x12\x1f\n" +
	"\vtrack_voice\x18\t \x01(\bR\n" +
	"trackVoice\x12'\n" +
	"\x0ftrack_presences\x18\n" +
	" \x01(\bR\x0etrackPresences\x12<\n" +
	"\tguild_map\x18\v \x03(\v2\x1f.discord_v1.State.GuildMapEntryR\bguildMap\x12B\n" +
	"\vchannel_map\x18\f \x03(\v2!.discord_v1.State.ChannelMapEntryR\n" +
	"channelMap\x1aN\n" +
	"\rGuildMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12'\n" +
	"\x05value\x18\x02 \x01(\v2\x11.discord_v1.GuildR\x05value:\x028\x01\x1aR\n" +
	"\x0fChannelMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.discord_v1.ChannelR\x05value:\x028\x01\"\xfb\x03\n" +
	"\x04User\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05email\x18\x02 \x01(\tR\x05email\x12\x1a\n" +
	"\busername\x18\x03 \x01(\tR\busername\x12\x16\n" +
	"\x06avatar\x18\x04 \x01(\tR\x06avatar\x12\x16\n" +
	"\x06locale\x18\x05 \x01(\tR\x06locale\x12$\n" +
	"\rdiscriminator\x18\x06 \x01(\tR\rdiscriminator\x12\x1f\n" +
	"\vglobal_name\x18\a \x01(\tR\n" +
	"globalName\x12\x14\n" +
	"\x05token\x18\b \x01(\tR\x05token\x12\x1a\n" +
	"\bverified\x18\t \x01(\bR\bverified\x12\x1f\n" +
	"\vmfa_enabled\x18\n" +
	" \x01(\bR\n" +
	"mfaEnabled\x12\x16\n" +
	"\x06banner\x18\v \x01(\tR\x06banner\x12!\n" +
	"\faccent_color\x18\f \x01(\x05R\vaccentColor\x12\x10\n" +
	"\x03bot\x18\r \x01(\bR\x03bot\x12,\n" +
	"\x12public_flags_value\x18\x0e \x01(\x05R\x10publicFlagsValue\x12>\n" +
	"\fpremium_type\x18\x0f \x01(\x0e2\x1b.discord_v1.UserPremiumTypeR\vpremiumType\x12\x16\n" +
	"\x06system\x18\x10 \x01(\bR\x06system\x12\x14\n" +
	"\x05flags\x18\x11 \x01(\x05R\x05flags\"\xb5\x01\n" +
	"\n" +
	"TeamMember\x12$\n" +
	"\x04user\x18\x01 \x01(\v2\x10.discord_v1.UserR\x04user\x12\x17\n" +
	"\ateam_id\x18\x02 \x01(\tR\x06teamId\x12F\n" +
	"\x10membership_state\x18\x03 \x01(\x0e2\x1b.discord_v1.MembershipStateR\x0fmembershipState\x12 \n" +
	"\vpermissions\x18\x04 \x03(\tR\vpermissions\"\xb6\x01\n" +
	"\x04Team\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x12\n" +
	"\x04icon\x18\x04 \x01(\tR\x04icon\x12\"\n" +
	"\rowner_user_id\x18\x05 \x01(\tR\vownerUserId\x120\n" +
	"\amembers\x18\x06 \x03(\v2\x16.discord_v1.TeamMemberR\amembers\"\xb5\x02\n" +
	"\aWebhook\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12+\n" +
	"\x04type\x18\x02 \x01(\x0e2\x17.discord_v1.WebhookTypeR\x04type\x12\x19\n" +
	"\bguild_id\x18\x03 \x01(\tR\aguildId\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x04 \x01(\tR\tchannelId\x12)\n" +
	"\x04user\x18\x05 \x01(\v2\x10.discord_v1.UserH\x00R\x04user\x88\x01\x01\x12\x12\n" +
	"\x04name\x18\x06 \x01(\tR\x04name\x12\x16\n" +
	"\x06avatar\x18\a \x01(\tR\x06avatar\x12\x14\n" +
	"\x05token\x18\b \x01(\tR\x05token\x12*\n" +
	"\x0eapplication_id\x18\t \x01(\tH\x01R\rapplicationId\x88\x01\x01B\a\n" +
	"\x05_userB\x11\n" +
	"\x0f_application_id\"\xe9\x04\n" +
	"\rWebhookParams\x12\x1d\n" +
	"\acontent\x18\x01 \x01(\tH\x00R\acontent\x88\x01\x01\x12\x1f\n" +
	"\busername\x18\x02 \x01(\tH\x01R\busername\x88\x01\x01\x12\"\n" +
	"\n" +
	"avatar_url\x18\x03 \x01(\tH\x02R\tavatarUrl\x88\x01\x01\x12\x15\n" +
	"\x03tts\x18\x04 \x01(\bH\x03R\x03tts\x88\x01\x01\x12&\n" +
	"\x05files\x18\x05 \x03(\v2\x10.discord_v1.FileR\x05files\x124\n" +
	"\n" +
	"components\x18\x06 \x03(\v2\x14.google.protobuf.AnyR\n" +
	"components\x120\n" +
	"\x06embeds\x18\a \x03(\v2\x18.discord_v1.MessageEmbedR\x06embeds\x12?\n" +
	"\vattachments\x18\b \x03(\v2\x1d.discord_v1.MessageAttachmentR\vattachments\x12R\n" +
	"\x10allowed_mentions\x18\t \x01(\v2\".discord_v1.MessageAllowedMentionsH\x04R\x0fallowedMentions\x88\x01\x01\x123\n" +
	"\x05flags\x18\n" +
	" \x01(\x0e2\x18.discord_v1.MessageFlagsH\x05R\x05flags\x88\x01\x01\x12$\n" +
	"\vthread_name\x18\v \x01(\tH\x06R\n" +
	"threadName\x88\x01\x01B\n" +
	"\n" +
	"\b_contentB\v\n" +
	"\t_usernameB\r\n" +
	"\v_avatar_urlB\x06\n" +
	"\x04_ttsB\x13\n" +
	"\x11_allowed_mentionsB\b\n" +
	"\x06_flagsB\x0e\n" +
	"\f_thread_name\"\xf2\x02\n" +
	"\vWebhookEdit\x12\x1d\n" +
	"\acontent\x18\x01 \x01(\tH\x00R\acontent\x88\x01\x01\x124\n" +
	"\n" +
	"components\x18\x02 \x03(\v2\x14.google.protobuf.AnyR\n" +
	"components\x120\n" +
	"\x06embeds\x18\x03 \x03(\v2\x18.discord_v1.MessageEmbedR\x06embeds\x12&\n" +
	"\x05files\x18\x04 \x03(\v2\x10.discord_v1.FileR\x05files\x12?\n" +
	"\vattachments\x18\x05 \x03(\v2\x1d.discord_v1.MessageAttachmentR\vattachments\x12R\n" +
	"\x10allowed_mentions\x18\x06 \x01(\v2\".discord_v1.MessageAllowedMentionsH\x01R\x0fallowedMentions\x88\x01\x01B\n" +
	"\n" +
	"\b_contentB\x13\n" +
	"\x11_allowed_mentions\"P\n" +
	"\x0eComponentEmoji\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\x12\x1a\n" +
	"\banimated\x18\x03 \x01(\bR\banimated\"\xa6\b\n" +
	"\x12ApplicationCommand\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12%\n" +
	"\x0eapplication_id\x18\x02 \x01(\tR\rapplicationId\x12\x19\n" +
	"\bguild_id\x18\x03 \x01(\tR\aguildId\x12\x18\n" +
	"\aversion\x18\x04 \x01(\tR\aversion\x126\n" +
	"\x04type\x18\x05 \x01(\x0e2\".discord_v1.ApplicationCommandTypeR\x04type\x12\x12\n" +
	"\x04name\x18\x06 \x01(\tR\x04name\x12d\n" +
	"\x12name_localizations\x18\a \x03(\v25.discord_v1.ApplicationCommand.NameLocalizationsEntryR\x11nameLocalizations\x126\n" +
	"\x12default_permission\x18\b \x01(\bB\x02\x18\x01H\x00R\x11defaultPermission\x88\x01\x01\x12<\n" +
	"\x1adefault_member_permissions\x18\t \x01(\x03R\x18defaultMemberPermissions\x12\x17\n" +
	"\x04nsfw\x18\n" +
	" \x01(\bH\x01R\x04nsfw\x88\x01\x01\x12,\n" +
	"\rdm_permission\x18\v \x01(\bB\x02\x18\x01H\x02R\fdmPermission\x88\x01\x01\x12>\n" +
	"\bcontexts\x18\f \x03(\x0e2\".discord_v1.InteractionContextTypeR\bcontexts\x12S\n" +
	"\x11integration_types\x18\r \x03(\x0e2&.discord_v1.ApplicationIntegrationTypeR\x10integrationTypes\x12 \n" +
	"\vdescription\x18\x0e \x01(\tR\vdescription\x12y\n" +
	"\x19description_localizations\x18\x0f \x03(\v2<.discord_v1.ApplicationCommand.DescriptionLocalizationsEntryR\x18descriptionLocalizations\x12>\n" +
	"\aoptions\x18\x10 \x03(\v2$.discord_v1.ApplicationCommandOptionR\aoptions\x1aD\n" +
	"\x16NameLocalizationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aK\n" +
	"\x1dDescriptionLocalizationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x15\n" +
	"\x13_default_permissionB\a\n" +
	"\x05_nsfwB\x10\n" +
	"\x0e_dm_permission\"\xd8\a\n" +
	"\x18ApplicationCommandOption\x12<\n" +
	"\x04type\x18\x01 \x01(\x0e2(.discord_v1.ApplicationCommandOptionTypeR\x04type\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12j\n" +
	"\x12name_localizations\x18\x03 \x03(\v2;.discord_v1.ApplicationCommandOption.NameLocalizationsEntryR\x11nameLocalizations\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x7f\n" +
	"\x19description_localizations\x18\x05 \x03(\v2B.discord_v1.ApplicationCommandOption.DescriptionLocalizationsEntryR\x18descriptionLocalizations\x12<\n" +
	"\rchannel_types\x18\a \x03(\x0e2\x17.discord_v1.ChannelTypeR\fchannelTypes\x12\x1a\n" +
	"\brequired\x18\b \x01(\bR\brequired\x12>\n" +
	"\aoptions\x18\t \x03(\v2$.discord_v1.ApplicationCommandOptionR\aoptions\x12\"\n" +
	"\fautocomplete\x18\n" +
	" \x01(\bR\fautocomplete\x12D\n" +
	"\achoices\x18\v \x03(\v2*.discord_v1.ApplicationCommandOptionChoiceR\achoices\x12 \n" +
	"\tmin_value\x18\f \x01(\x01H\x00R\bminValue\x88\x01\x01\x12 \n" +
	"\tmax_value\x18\r \x01(\x01H\x01R\bmaxValue\x88\x01\x01\x12\"\n" +
	"\n" +
	"min_length\x18\x0e \x01(\x05H\x02R\tminLength\x88\x01\x01\x12\"\n" +
	"\n" +
	"max_length\x18\x0f \x01(\x05H\x03R\tmaxLength\x88\x01\x01\x1aD\n" +
	"\x16NameLocalizationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aK\n" +
	"\x1dDescriptionLocalizationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\f\n" +
	"\n" +
	"_min_valueB\f\n" +
	"\n" +
	"_max_valueB\r\n" +
	"\v_min_lengthB\r\n" +
	"\v_max_length\"\xe6\x02\n" +
	"\x1eApplicationCommandOptionChoice\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12p\n" +
	"\x12name_localizations\x18\x02 \x03(\v2A.discord_v1.ApplicationCommandOptionChoice.NameLocalizationsEntryR\x11nameLocalizations\x12#\n" +
	"\fstring_value\x18\x03 \x01(\tH\x00R\vstringValue\x12%\n" +
	"\rinteger_value\x18\x04 \x01(\x03H\x00R\fintegerValue\x12#\n" +
	"\fnumber_value\x18\x05 \x01(\x01H\x00R\vnumberValue\x1aD\n" +
	"\x16NameLocalizationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\a\n" +
	"\x05value\"\x91\x01\n" +
	"\x1dApplicationCommandPermissions\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12@\n" +
	"\x04type\x18\x02 \x01(\x0e2,.discord_v1.ApplicationCommandPermissionTypeR\x04type\x12\x1e\n" +
	"\n" +
	"permission\x18\x03 \x01(\bR\n" +
	"permission\"p\n" +
	"!ApplicationCommandPermissionsList\x12K\n" +
	"\vpermissions\x18\x01 \x03(\v2).discord_v1.ApplicationCommandPermissionsR\vpermissions\"\xc3\x01\n" +
	"\"GuildApplicationCommandPermissions\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12%\n" +
	"\x0eapplication_id\x18\x02 \x01(\tR\rapplicationId\x12\x19\n" +
	"\bguild_id\x18\x03 \x01(\tR\aguildId\x12K\n" +
	"\vpermissions\x18\x04 \x03(\v2).discord_v1.ApplicationCommandPermissionsR\vpermissions\"\xf4\b\n" +
	"\vInteraction\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x15\n" +
	"\x06app_id\x18\x02 \x01(\tR\x05appId\x12/\n" +
	"\x04type\x18\x03 \x01(\x0e2\x1b.discord_v1.InteractionTypeR\x04type\x12i\n" +
	"\x18application_command_data\x18\x04 \x01(\v2-.discord_v1.ApplicationCommandInteractionDataH\x00R\x16applicationCommandData\x12c\n" +
	"\x16message_component_data\x18\x05 \x01(\v2+.discord_v1.MessageComponentInteractionDataH\x00R\x14messageComponentData\x12T\n" +
	"\x11modal_submit_data\x18\x06 \x01(\v2&.discord_v1.ModalSubmitInteractionDataH\x00R\x0fmodalSubmitData\x12\x19\n" +
	"\bguild_id\x18\b \x01(\tR\aguildId\x12\x1d\n" +
	"\n" +
	"channel_id\x18\t \x01(\tR\tchannelId\x122\n" +
	"\amessage\x18\n" +
	" \x01(\v2\x13.discord_v1.MessageH\x01R\amessage\x88\x01\x01\x12'\n" +
	"\x0fapp_permissions\x18\v \x01(\x03R\x0eappPermissions\x12/\n" +
	"\x06member\x18\f \x01(\v2\x12.discord_v1.MemberH\x02R\x06member\x88\x01\x01\x12)\n" +
	"\x04user\x18\r \x01(\v2\x10.discord_v1.UserH\x03R\x04user\x88\x01\x01\x12\x16\n" +
	"\x06locale\x18\x0e \x01(\tR\x06locale\x12&\n" +
	"\fguild_locale\x18\x0f \x01(\tH\x04R\vguildLocale\x88\x01\x01\x12<\n" +
	"\acontext\x18\x10 \x01(\x0e2\".discord_v1.InteractionContextTypeR\acontext\x12\x7f\n" +
	"\x1eauthorizing_integration_owners\x18\x11 \x03(\v29.discord_v1.Interaction.AuthorizingIntegrationOwnersEntryR\x1cauthorizingIntegrationOwners\x12\x14\n" +
	"\x05token\x18\x12 \x01(\tR\x05token\x12\x18\n" +
	"\aversion\x18\x13 \x01(\x05R\aversion\x12;\n" +
	"\fentitlements\x18\x14 \x03(\v2\x17.discord_v1.EntitlementR\fentitlements\x1aO\n" +
	"!AuthorizingIntegrationOwnersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x06\n" +
	"\x04dataB\n" +
	"\n" +
	"\b_messageB\t\n" +
	"\a_memberB\a\n" +
	"\x05_userB\x0f\n" +
	"\r_guild_locale\"\xdf\x02\n" +
	"!ApplicationCommandInteractionData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12E\n" +
	"\fcommand_type\x18\x03 \x01(\x0e2\".discord_v1.ApplicationCommandTypeR\vcommandType\x12V\n" +
	"\bresolved\x18\x04 \x01(\v25.discord_v1.ApplicationCommandInteractionDataResolvedH\x00R\bresolved\x88\x01\x01\x12M\n" +
	"\aoptions\x18\x05 \x03(\v23.discord_v1.ApplicationCommandInteractionDataOptionR\aoptions\x12\x1b\n" +
	"\ttarget_id\x18\x06 \x01(\tR\btargetIdB\v\n" +
	"\t_resolved\"\xd0\b\n" +
	")ApplicationCommandInteractionDataResolved\x12V\n" +
	"\x05users\x18\x01 \x03(\v2@.discord_v1.ApplicationCommandInteractionDataResolved.UsersEntryR\x05users\x12\\\n" +
	"\amembers\x18\x02 \x03(\v2B.discord_v1.ApplicationCommandInteractionDataResolved.MembersEntryR\amembers\x12V\n" +
	"\x05roles\x18\x03 \x03(\v2@.discord_v1.ApplicationCommandInteractionDataResolved.RolesEntryR\x05roles\x12_\n" +
	"\bchannels\x18\x04 \x03(\v2C.discord_v1.ApplicationCommandInteractionDataResolved.ChannelsEntryR\bchannels\x12_\n" +
	"\bmessages\x18\x05 \x03(\v2C.discord_v1.ApplicationCommandInteractionDataResolved.MessagesEntryR\bmessages\x12h\n" +
	"\vattachments\x18\x06 \x03(\v2F.discord_v1.ApplicationCommandInteractionDataResolved.AttachmentsEntryR\vattachments\x1aJ\n" +
	"\n" +
	"UsersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.discord_v1.UserR\x05value:\x028\x01\x1aN\n" +
	"\fMembersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.discord_v1.MemberR\x05value:\x028\x01\x1aJ\n" +
	"\n" +
	"RolesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.discord_v1.RoleR\x05value:\x028\x01\x1aP\n" +
	"\rChannelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.discord_v1.ChannelR\x05value:\x028\x01\x1aP\n" +
	"\rMessagesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.discord_v1.MessageR\x05value:\x028\x01\x1a]\n" +
	"\x10AttachmentsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x123\n" +
	"\x05value\x18\x02 \x01(\v2\x1d.discord_v1.MessageAttachmentR\x05value:\x028\x01\"\xfb\x01\n" +
	"\x1fMessageComponentInteractionData\x12\x1b\n" +
	"\tcustom_id\x18\x01 \x01(\tR\bcustomId\x12@\n" +
	"\x0ecomponent_type\x18\x02 \x01(\x0e2\x19.discord_v1.ComponentTypeR\rcomponentType\x12T\n" +
	"\bresolved\x18\x03 \x01(\v23.discord_v1.MessageComponentInteractionDataResolvedH\x00R\bresolved\x88\x01\x01\x12\x16\n" +
	"\x06values\x18\x04 \x03(\tR\x06valuesB\v\n" +
	"\t_resolved\"\xca\x05\n" +
	"'MessageComponentInteractionDataResolved\x12T\n" +
	"\x05users\x18\x01 \x03(\v2>.discord_v1.MessageComponentInteractionDataResolved.UsersEntryR\x05users\x12Z\n" +
	"\amembers\x18\x02 \x03(\v2@.discord_v1.MessageComponentInteractionDataResolved.MembersEntryR\amembers\x12T\n" +
	"\x05roles\x18\x03 \x03(\v2>.discord_v1.MessageComponentInteractionDataResolved.RolesEntryR\x05roles\x12]\n" +
	"\bchannels\x18\x04 \x03(\v2A.discord_v1.MessageComponentInteractionDataResolved.ChannelsEntryR\bchannels\x1aJ\n" +
	"\n" +
	"UsersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.discord_v1.UserR\x05value:\x028\x01\x1aN\n" +
	"\fMembersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.discord_v1.MemberR\x05value:\x028\x01\x1aJ\n" +
	"\n" +
	"RolesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.discord_v1.RoleR\x05value:\x028\x01\x1aP\n" +
	"\rChannelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.discord_v1.ChannelR\x05value:\x028\x01\"o\n" +
	"\x1aModalSubmitInteractionData\x12\x1b\n" +
	"\tcustom_id\x18\x01 \x01(\tR\bcustomId\x124\n" +
	"\n" +
	"components\x18\x02 \x03(\v2\x14.google.protobuf.AnyR\n" +
	"components\"\xe3\x04\n" +
	"'ApplicationCommandInteractionDataOption\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12<\n" +
	"\x04type\x18\x02 \x01(\x0e2(.discord_v1.ApplicationCommandOptionTypeR\x04type\x12#\n" +
	"\fstring_value\x18\x03 \x01(\tH\x00R\vstringValue\x12%\n" +
	"\rinteger_value\x18\x04 \x01(\x03H\x00R\fintegerValue\x12%\n" +
	"\rboolean_value\x18\x05 \x01(\bH\x00R\fbooleanValue\x12$\n" +
	"\ruser_value_id\x18\x06 \x01(\tH\x00R\vuserValueId\x12*\n" +
	"\x10channel_value_id\x18\a \x01(\tH\x00R\x0echannelValueId\x12$\n" +
	"\rrole_value_id\x18\b \x01(\tH\x00R\vroleValueId\x122\n" +
	"\x14mentionable_value_id\x18\t \x01(\tH\x00R\x12mentionableValueId\x12#\n" +
	"\fnumber_value\x18\n" +
	" \x01(\x01H\x00R\vnumberValue\x120\n" +
	"\x13attachment_value_id\x18\v \x01(\tH\x00R\x11attachmentValueId\x12M\n" +
	"\aoptions\x18\f \x03(\v23.discord_v1.ApplicationCommandInteractionDataOptionR\aoptions\x12\x18\n" +
	"\afocused\x18\r \x01(\bR\afocusedB\a\n" +
	"\x05value\"\x95\x01\n" +
	"\x13InteractionResponse\x127\n" +
	"\x04type\x18\x01 \x01(\x0e2#.discord_v1.InteractionResponseTypeR\x04type\x12<\n" +
	"\x04data\x18\x02 \x01(\v2#.discord_v1.InteractionResponseDataH\x00R\x04data\x88\x01\x01B\a\n" +
	"\x05_data\"\xeb\x04\n" +
	"\x17InteractionResponseData\x12\x10\n" +
	"\x03tts\x18\x01 \x01(\bR\x03tts\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\x124\n" +
	"\n" +
	"components\x18\x03 \x03(\v2\x14.google.protobuf.AnyR\n" +
	"components\x120\n" +
	"\x06embeds\x18\x04 \x03(\v2\x18.discord_v1.MessageEmbedR\x06embeds\x12R\n" +
	"\x10allowed_mentions\x18\x05 \x01(\v2\".discord_v1.MessageAllowedMentionsH\x00R\x0fallowedMentions\x88\x01\x01\x12&\n" +
	"\x05files\x18\x06 \x03(\v2\x10.discord_v1.FileR\x05files\x12?\n" +
	"\vattachments\x18\a \x03(\v2\x1d.discord_v1.MessageAttachmentR\vattachments\x12)\n" +
	"\x04poll\x18\b \x01(\v2\x10.discord_v1.PollH\x01R\x04poll\x88\x01\x01\x123\n" +
	"\x05flags\x18\t \x01(\x0e2\x18.discord_v1.MessageFlagsH\x02R\x05flags\x88\x01\x01\x12D\n" +
	"\achoices\x18\n" +
	" \x03(\v2*.discord_v1.ApplicationCommandOptionChoiceR\achoices\x12\x1b\n" +
	"\tcustom_id\x18\v \x01(\tR\bcustomId\x12\x14\n" +
	"\x05title\x18\f \x01(\tR\x05titleB\x13\n" +
	"\x11_allowed_mentionsB\a\n" +
	"\x05_pollB\b\n" +
	"\x06_flags*\xaf\x06\n" +
	"\vMessageType\x12\x18\n" +
	"\x14MESSAGE_TYPE_DEFAULT\x10\x00\x12\x1e\n" +
	"\x1aMESSAGE_TYPE_RECIPIENT_ADD\x10\x01\x12!\n" +
	"\x1dMESSAGE_TYPE_RECIPIENT_REMOVE\x10\x02\x12\x15\n" +
	"\x11MESSAGE_TYPE_CALL\x10\x03\x12$\n" +
	" MESSAGE_TYPE_CHANNEL_NAME_CHANGE\x10\x04\x12$\n" +
	" MESSAGE_TYPE_CHANNEL_ICON_CHANGE\x10\x05\x12'\n" +
	"#MESSAGE_TYPE_CHANNEL_PINNED_MESSAGE\x10\x06\x12\"\n" +
	"\x1eMESSAGE_TYPE_GUILD_MEMBER_JOIN\x10\a\x120\n" +
	",MESSAGE_TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION\x10\b\x129\n" +
	"5MESSAGE_TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_ONE\x10\t\x129\n" +
	"5MESSAGE_TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_TWO\x10\n" +
	"\x12;\n" +
	"7MESSAGE_TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_THREE\x10\v\x12#\n" +
	"\x1fMESSAGE_TYPE_CHANNEL_FOLLOW_ADD\x10\f\x12-\n" +
	")MESSAGE_TYPE_GUILD_DISCOVERY_DISQUALIFIED\x10\x0e\x12,\n" +
	"(MESSAGE_TYPE_GUILD_DISCOVERY_REQUALIFIED\x10\x0f\x12\x1f\n" +
	"\x1bMESSAGE_TYPE_THREAD_CREATED\x10\x12\x12\x16\n" +
	"\x12MESSAGE_TYPE_REPLY\x10\x13\x12#\n" +
	"\x1fMESSAGE_TYPE_CHAT_INPUT_COMMAND\x10\x14\x12'\n" +
	"#MESSAGE_TYPE_THREAD_STARTER_MESSAGE\x10\x15\x12%\n" +
	"!MESSAGE_TYPE_CONTEXT_MENU_COMMAND\x10\x17*\x96\x03\n" +
	"\fMessageFlags\x12\x1e\n" +
	"\x1aMESSAGE_FLAGS_CROSS_POSTED\x10\x00\x12!\n" +
	"\x1dMESSAGE_FLAGS_IS_CROSS_POSTED\x10\x01\x12!\n" +
	"\x1dMESSAGE_FLAGS_SUPPRESS_EMBEDS\x10\x02\x12(\n" +
	"$MESSAGE_FLAGS_SOURCE_MESSAGE_DELETED\x10\x03\x12\x18\n" +
	"\x14MESSAGE_FLAGS_URGENT\x10\x04\x12\x1c\n" +
	"\x18MESSAGE_FLAGS_HAS_THREAD\x10\x05\x12\x1b\n" +
	"\x17MESSAGE_FLAGS_EPHEMERAL\x10\x06\x12\x19\n" +
	"\x15MESSAGE_FLAGS_LOADING\x10\a\x128\n" +
	"4MESSAGE_FLAGS_FAILED_TO_MENTION_SOME_ROLES_IN_THREAD\x10\b\x12(\n" +
	"$MESSAGE_FLAGS_SUPPRESS_NOTIFICATIONS\x10\f\x12\"\n" +
	"\x1eMESSAGE_FLAGS_IS_VOICE_MESSAGE\x10\r*w\n" +
	"\x12AllowedMentionType\x12\x1e\n" +
	"\x1aALLOWED_MENTION_TYPE_ROLES\x10\x00\x12\x1e\n" +
	"\x1aALLOWED_MENTION_TYPE_USERS\x10\x01\x12!\n" +
	"\x1dALLOWED_MENTION_TYPE_EVERYONE\x10\x02*\x8e\x01\n" +
	"\tEmbedType\x12\x13\n" +
	"\x0fEMBED_TYPE_RICH\x10\x00\x12\x14\n" +
	"\x10EMBED_TYPE_IMAGE\x10\x01\x12\x14\n" +
	"\x10EMBED_TYPE_VIDEO\x10\x02\x12\x13\n" +
	"\x0fEMBED_TYPE_GIFV\x10\x03\x12\x16\n" +
	"\x12EMBED_TYPE_ARTICLE\x10\x04\x12\x13\n" +
	"\x0fEMBED_TYPE_LINK\x10\x05*\xa3\x01\n" +
	"\x13MessageActivityType\x12\x1e\n" +
	"\x1aMESSAGE_ACTIVITY_TYPE_JOIN\x10\x00\x12\"\n" +
	"\x1eMESSAGE_ACTIVITY_TYPE_SPECTATE\x10\x01\x12 \n" +
	"\x1cMESSAGE_ACTIVITY_TYPE_LISTEN\x10\x02\x12&\n" +
	"\"MESSAGE_ACTIVITY_TYPE_JOIN_REQUEST\x10\x03*^\n" +
	"\x14MessageReferenceType\x12\"\n" +
	"\x1eMESSAGE_REFERENCE_TYPE_DEFAULT\x10\x00\x12\"\n" +
	"\x1eMESSAGE_REFERENCE_TYPE_FORWARD\x10\x01*\xba\x04\n" +
	"\tUserFlags\x12\x19\n" +
	"\x15USER_FLAG_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aUSER_FLAG_DISCORD_EMPLOYEE\x10\x01\x12\x1d\n" +
	"\x19USER_FLAG_DISCORD_PARTNER\x10\x02\x12\x1f\n" +
	"\x1bUSER_FLAG_HYPE_SQUAD_EVENTS\x10\x04\x12 \n" +
	"\x1cUSER_FLAG_BUG_HUNTER_LEVEL_1\x10\b\x12\x1b\n" +
	"\x17USER_FLAG_HOUSE_BRAVERY\x10@\x12\x1f\n" +
	"\x1aUSER_FLAG_HOUSE_BRILLIANCE\x10\x80\x01\x12\x1c\n" +
	"\x17USER_FLAG_HOUSE_BALANCE\x10\x80\x02\x12\x1e\n" +
	"\x19USER_FLAG_EARLY_SUPPORTER\x10\x80\x04\x12\x18\n" +
	"\x13USER_FLAG_TEAM_USER\x10\x80\b\x12\x15\n" +
	"\x10USER_FLAG_SYSTEM\x10\x80 \x12\"\n" +
	"\x1cUSER_FLAG_BUG_HUNTER_LEVEL_2\x10\x80\x80\x01\x12\x1c\n" +
	"\x16USER_FLAG_VERIFIED_BOT\x10\x80\x80\x04\x12&\n" +
	" USER_FLAG_VERIFIED_BOT_DEVELOPER\x10\x80\x80\b\x12+\n" +
	"%USER_FLAG_DISCORD_CERTIFIED_MODERATOR\x10\x80\x80\x10\x12%\n" +
	"\x1fUSER_FLAG_BOT_HTTP_INTERACTIONS\x10\x80\x80 \x12%\n" +
	"\x1eUSER_FLAG_ACTIVE_BOT_DEVELOPER\x10\x80\x80\x80\x02*\xb9\x01\n" +
	"\x0fUserPremiumType\x12!\n" +
	"\x1dUSER_PREMIUM_TYPE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16USER_PREMIUM_TYPE_NONE\x10\x00\x12#\n" +
	"\x1fUSER_PREMIUM_TYPE_NITRO_CLASSIC\x10\x01\x12\x1b\n" +
	"\x17USER_PREMIUM_TYPE_NITRO\x10\x02\x12!\n" +
	"\x1dUSER_PREMIUM_TYPE_NITRO_BASIC\x10\x03\x1a\x02\x10\x01*l\n" +
	"\x0fMembershipState\x12\x1c\n" +
	"\x18MEMBERSHIP_STATE_UNKNOWN\x10\x00\x12\x1c\n" +
	"\x18MEMBERSHIP_STATE_INVITED\x10\x01\x12\x1d\n" +
	"\x19MEMBERSHIP_STATE_ACCEPTED\x10\x02*i\n" +
	"\vWebhookType\x12\x1c\n" +
	"\x18WEBHOOK_TYPE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15WEBHOOK_TYPE_INCOMING\x10\x01\x12!\n" +
	"\x1dWEBHOOK_TYPE_CHANNEL_FOLLOWER\x10\x02*Y\n" +
	"\vChannelType\x12\x18\n" +
	"\x14CHANNEL_TYPE_UNKNOWN\x10\x00\x12\x1b\n" +
	"\x17CHANNEL_TYPE_GUILD_TEXT\x10\x01\x12\x13\n" +
	"\x0fCHANNEL_TYPE_DM\x10\x03*\xa4\x01\n" +
	"\rComponentType\x12\x1a\n" +
	"\x16COMPONENT_TYPE_UNKNOWN\x10\x00\x12\x1d\n" +
	"\x19COMPONENT_TYPE_ACTION_ROW\x10\x01\x12\x19\n" +
	"\x15COMPONENT_TYPE_BUTTON\x10\x02\x12\x1e\n" +
	"\x1aCOMPONENT_TYPE_SELECT_MENU\x10\x03\x12\x1d\n" +
	"\x19COMPONENT_TYPE_TEXT_INPUT\x10\x04*\x9b\x01\n" +
	"\x16ApplicationCommandType\x12$\n" +
	" APPLICATION_COMMAND_TYPE_UNKNOWN\x10\x00\x12\x1c\n" +
	"\x18CHAT_APPLICATION_COMMAND\x10\x01\x12\x1c\n" +
	"\x18USER_APPLICATION_COMMAND\x10\x02\x12\x1f\n" +
	"\x1bMESSAGE_APPLICATION_COMMAND\x10\x03*\xa1\x01\n" +
	"\x16InteractionContextType\x12\x1f\n" +
	"\x1bINTERACTION_CONTEXT_UNKNOWN\x10\x00\x12\x1d\n" +
	"\x19INTERACTION_CONTEXT_GUILD\x10\x01\x12\x1e\n" +
	"\x1aINTERACTION_CONTEXT_BOT_DM\x10\x02\x12'\n" +
	"#INTERACTION_CONTEXT_PRIVATE_CHANNEL\x10\x03*\xa5\x01\n" +
	"\x1aApplicationIntegrationType\x12(\n" +
	"$APPLICATION_INTEGRATION_TYPE_UNKNOWN\x10\x00\x12.\n" +
	"*APPLICATION_INTEGRATION_TYPE_GUILD_INSTALL\x10\x01\x12-\n" +
	")APPLICATION_INTEGRATION_TYPE_USER_INSTALL\x10\x02*\x90\x04\n" +
	"\x1cApplicationCommandOptionType\x12+\n" +
	"'APPLICATION_COMMAND_OPTION_TYPE_UNKNOWN\x10\x00\x12*\n" +
	"&APPLICATION_COMMAND_OPTION_SUB_COMMAND\x10\x01\x120\n" +
	",APPLICATION_COMMAND_OPTION_SUB_COMMAND_GROUP\x10\x02\x12%\n" +
	"!APPLICATION_COMMAND_OPTION_STRING\x10\x03\x12&\n" +
	"\"APPLICATION_COMMAND_OPTION_INTEGER\x10\x04\x12&\n" +
	"\"APPLICATION_COMMAND_OPTION_BOOLEAN\x10\x05\x12#\n" +
	"\x1fAPPLICATION_COMMAND_OPTION_USER\x10\x06\x12&\n" +
	"\"APPLICATION_COMMAND_OPTION_CHANNEL\x10\a\x12#\n" +
	"\x1fAPPLICATION_COMMAND_OPTION_ROLE\x10\b\x12*\n" +
	"&APPLICATION_COMMAND_OPTION_MENTIONABLE\x10\t\x12%\n" +
	"!APPLICATION_COMMAND_OPTION_NUMBER\x10\n" +
	"\x12)\n" +
	"%APPLICATION_COMMAND_OPTION_ATTACHMENT\x10\v*\xe0\x01\n" +
	" ApplicationCommandPermissionType\x12/\n" +
	"+APPLICATION_COMMAND_PERMISSION_TYPE_UNKNOWN\x10\x00\x12,\n" +
	"(APPLICATION_COMMAND_PERMISSION_TYPE_ROLE\x10\x01\x12,\n" +
	"(APPLICATION_COMMAND_PERMISSION_TYPE_USER\x10\x02\x12/\n" +
	"+APPLICATION_COMMAND_PERMISSION_TYPE_CHANNEL\x10\x03*\xdd\x01\n" +
	"\x0fInteractionType\x12\x1c\n" +
	"\x18INTERACTION_TYPE_UNKNOWN\x10\x00\x12\x14\n" +
	"\x10INTERACTION_PING\x10\x01\x12#\n" +
	"\x1fINTERACTION_APPLICATION_COMMAND\x10\x02\x12!\n" +
	"\x1dINTERACTION_MESSAGE_COMPONENT\x10\x03\x120\n" +
	",INTERACTION_APPLICATION_COMMAND_AUTOCOMPLETE\x10\x04\x12\x1c\n" +
	"\x18INTERACTION_MODAL_SUBMIT\x10\x05*\x88\x03\n" +
	"\x17InteractionResponseType\x12%\n" +
	"!INTERACTION_RESPONSE_TYPE_UNKNOWN\x10\x00\x12\x1d\n" +
	"\x19INTERACTION_RESPONSE_PONG\x10\x01\x124\n" +
	"0INTERACTION_RESPONSE_CHANNEL_MESSAGE_WITH_SOURCE\x10\x04\x12=\n" +
	"9INTERACTION_RESPONSE_DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE\x10\x05\x120\n" +
	",INTERACTION_RESPONSE_DEFERRED_MESSAGE_UPDATE\x10\x06\x12'\n" +
	"#INTERACTION_RESPONSE_UPDATE_MESSAGE\x10\a\x127\n" +
	"3INTERACTION_APPLICATION_COMMAND_AUTOCOMPLETE_RESULT\x10\b\x12\x1e\n" +
	"\x1aINTERACTION_RESPONSE_MODAL\x10\tB<Z:github.com/thirdscam/chatanium-flexmodule/proto/discord-v1b\x06proto3"

var (
	file_discord_v1_discordgo_proto_rawDescOnce sync.Once
	file_discord_v1_discordgo_proto_rawDescData []byte
)

func file_discord_v1_discordgo_proto_rawDescGZIP() []byte {
	file_discord_v1_discordgo_proto_rawDescOnce.Do(func() {
		file_discord_v1_discordgo_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_discord_v1_discordgo_proto_rawDesc), len(file_discord_v1_discordgo_proto_rawDesc)))
	})
	return file_discord_v1_discordgo_proto_rawDescData
}

var file_discord_v1_discordgo_proto_enumTypes = make([]protoimpl.EnumInfo, 19)
var file_discord_v1_discordgo_proto_msgTypes = make([]protoimpl.MessageInfo, 161)
var file_discord_v1_discordgo_proto_goTypes = []any{
	(MessageType)(0),                                  // 0: discord_v1.MessageType
	(MessageFlags)(0),                                 // 1: discord_v1.MessageFlags
	(AllowedMentionType)(0),                           // 2: discord_v1.AllowedMentionType
	(EmbedType)(0),                                    // 3: discord_v1.EmbedType
	(MessageActivityType)(0),                          // 4: discord_v1.MessageActivityType
	(MessageReferenceType)(0),                         // 5: discord_v1.MessageReferenceType
	(UserFlags)(0),                                    // 6: discord_v1.UserFlags
	(UserPremiumType)(0),                              // 7: discord_v1.UserPremiumType
	(MembershipState)(0),                              // 8: discord_v1.MembershipState
	(WebhookType)(0),                                  // 9: discord_v1.WebhookType
	(ChannelType)(0),                                  // 10: discord_v1.ChannelType
	(ComponentType)(0),                                // 11: discord_v1.ComponentType
	(ApplicationCommandType)(0),                       // 12: discord_v1.ApplicationCommandType
	(InteractionContextType)(0),                       // 13: discord_v1.InteractionContextType
	(ApplicationIntegrationType)(0),                   // 14: discord_v1.ApplicationIntegrationType
	(ApplicationCommandOptionType)(0),                 // 15: discord_v1.ApplicationCommandOptionType
	(ApplicationCommandPermissionType)(0),             // 16: discord_v1.ApplicationCommandPermissionType
	(InteractionType)(0),                              // 17: discord_v1.InteractionType
	(InteractionResponseType)(0),                      // 18: discord_v1.InteractionResponseType
	(*Message)(nil),                                   // 19: discord_v1.Message
	(*File)(nil),                                      // 20: discord_v1.File
	(*MessageSend)(nil),                               // 21: discord_v1.MessageSend
	(*MessageEdit)(nil),                               // 22: discord_v1.MessageEdit
	(*MessageAllowedMentions)(nil),                    // 23: discord_v1.MessageAllowedMentions
	(*MessageAttachment)(nil),                         // 24: discord_v1.MessageAttachment
	(*MessageEmbedFooter)(nil),                        // 25: discord_v1.MessageEmbedFooter
	(*MessageEmbedImage)(nil),                         // 26: discord_v1.MessageEmbedImage
	(*MessageEmbedThumbnail)(nil),                     // 27: discord_v1.MessageEmbedThumbnail
	(*MessageEmbedVideo)(nil),                         // 28: discord_v1.MessageEmbedVideo
	(*MessageEmbedProvider)(nil),                      // 29: discord_v1.MessageEmbedProvider
	(*MessageEmbedAuthor)(nil),                        // 30: discord_v1.MessageEmbedAuthor
	(*MessageEmbedField)(nil),                         // 31: discord_v1.MessageEmbedField
	(*MessageEmbed)(nil),                              // 32: discord_v1.MessageEmbed
	(*MessageReactions)(nil),                          // 33: discord_v1.MessageReactions
	(*MessageActivity)(nil),                           // 34: discord_v1.MessageActivity
	(*MessageApplication)(nil),                        // 35: discord_v1.MessageApplication
	(*MessageSnapshot)(nil),                           // 36: discord_v1.MessageSnapshot
	(*MessageReference)(nil),                          // 37: discord_v1.MessageReference
	(*MessageInteraction)(nil),                        // 38: discord_v1.MessageInteraction
	(*MessageInteractionMetadata)(nil),                // 39: discord_v1.MessageInteractionMetadata
	(*Session)(nil),                                   // 40: discord_v1.Session
	(*Identify)(nil),                                  // 41: discord_v1.Identify
	(*IdentifyProperties)(nil),                        // 42: discord_v1.IdentifyProperties
	(*GatewayStatusUpdate)(nil),                       // 43: discord_v1.GatewayStatusUpdate
	(*Activity)(nil),                                  // 44: discord_v1.Activity
	(*TimeStamps)(nil),                                // 45: discord_v1.TimeStamps
	(*Assets)(nil),                                    // 46: discord_v1.Assets
	(*Party)(nil),                                     // 47: discord_v1.Party
	(*Secrets)(nil),                                   // 48: discord_v1.Secrets
	(*ApplicationIntegrationTypeConfig)(nil),          // 49: discord_v1.ApplicationIntegrationTypeConfig
	(*ApplicationInstallParams)(nil),                  // 50: discord_v1.ApplicationInstallParams
	(*Application)(nil),                               // 51: discord_v1.Application
	(*ApplicationRoleConnectionMetadata)(nil),         // 52: discord_v1.ApplicationRoleConnectionMetadata
	(*ApplicationRoleConnection)(nil),                 // 53: discord_v1.ApplicationRoleConnection
	(*UserConnection)(nil),                            // 54: discord_v1.UserConnection
	(*Integration)(nil),                               // 55: discord_v1.Integration
	(*IntegrationAccount)(nil),                        // 56: discord_v1.IntegrationAccount
	(*VoiceRegion)(nil),                               // 57: discord_v1.VoiceRegion
	(*Invite)(nil),                                    // 58: discord_v1.Invite
	(*Channel)(nil),                                   // 59: discord_v1.Channel
	(*PermissionOverwrite)(nil),                       // 60: discord_v1.PermissionOverwrite
	(*ThreadStart)(nil),                               // 61: discord_v1.ThreadStart
	(*ThreadMetadata)(nil),                            // 62: discord_v1.ThreadMetadata
	(*ThreadMember)(nil),                              // 63: discord_v1.ThreadMember
	(*ThreadsList)(nil),                               // 64: discord_v1.ThreadsList
	(*AddedThreadMember)(nil),                         // 65: discord_v1.AddedThreadMember
	(*ForumDefaultReaction)(nil),                      // 66: discord_v1.ForumDefaultReaction
	(*ForumTag)(nil),                                  // 67: discord_v1.ForumTag
	(*Emoji)(nil),                                     // 68: discord_v1.Emoji
	(*EmojiParams)(nil),                               // 69: discord_v1.EmojiParams
	(*Sticker)(nil),                                   // 70: discord_v1.Sticker
	(*StickerItem)(nil),                               // 71: discord_v1.StickerItem
	(*StickerPack)(nil),                               // 72: discord_v1.StickerPack
	(*Guild)(nil),                                     // 73: discord_v1.Guild
	(*GuildPreview)(nil),                              // 74: discord_v1.GuildPreview
	(*GuildScheduledEvent)(nil),                       // 75: discord_v1.GuildScheduledEvent
	(*GuildScheduledEventParams)(nil),                 // 76: discord_v1.GuildScheduledEventParams
	(*GuildScheduledEventEntityMetadata)(nil),         // 77: discord_v1.GuildScheduledEventEntityMetadata
	(*GuildScheduledEventUser)(nil),                   // 78: discord_v1.GuildScheduledEventUser
	(*GuildOnboardingMode)(nil),                       // 79: discord_v1.GuildOnboardingMode
	(*GuildOnboarding)(nil),                           // 80: discord_v1.GuildOnboarding
	(*GuildOnboardingPromptType)(nil),                 // 81: discord_v1.GuildOnboardingPromptType
	(*GuildOnboardingPrompt)(nil),                     // 82: discord_v1.GuildOnboardingPrompt
	(*GuildOnboardingPromptOption)(nil),               // 83: discord_v1.GuildOnboardingPromptOption
	(*GuildTemplate)(nil),                             // 84: discord_v1.GuildTemplate
	(*GuildTemplateParams)(nil),                       // 85: discord_v1.GuildTemplateParams
	(*UserGuild)(nil),                                 // 86: discord_v1.UserGuild
	(*GuildParams)(nil),                               // 87: discord_v1.GuildParams
	(*Role)(nil),                                      // 88: discord_v1.Role
	(*RoleFlags)(nil),                                 // 89: discord_v1.RoleFlags
	(*RoleParams)(nil),                                // 90: discord_v1.RoleParams
	(*VoiceState)(nil),                                // 91: discord_v1.VoiceState
	(*Presence)(nil),                                  // 92: discord_v1.Presence
	(*MemberFlags)(nil),                               // 93: discord_v1.MemberFlags
	(*Member)(nil),                                    // 94: discord_v1.Member
	(*ClientStatus)(nil),                              // 95: discord_v1.ClientStatus
	(*TooManyRequests)(nil),                           // 96: discord_v1.TooManyRequests
	(*ReadState)(nil),                                 // 97: discord_v1.ReadState
	(*GuildRole)(nil),                                 // 98: discord_v1.GuildRole
	(*GuildBan)(nil),                                  // 99: discord_v1.GuildBan
	(*AutoModerationRule)(nil),                        // 100: discord_v1.AutoModerationRule
	(*AutoModerationTriggerMetadata)(nil),             // 101: discord_v1.AutoModerationTriggerMetadata
	(*AutoModerationActionType)(nil),                  // 102: discord_v1.AutoModerationActionType
	(*AutoModerationActionMetadata)(nil),              // 103: discord_v1.AutoModerationActionMetadata
	(*AutoModerationAction)(nil),                      // 104: discord_v1.AutoModerationAction
	(*GuildEmbed)(nil),                                // 105: discord_v1.GuildEmbed
	(*GuildAuditLog)(nil),                             // 106: discord_v1.GuildAuditLog
	(*AuditLogEntry)(nil),                             // 107: discord_v1.AuditLogEntry
	(*AuditLogChange)(nil),                            // 108: discord_v1.AuditLogChange
	(*AuditLogOptions)(nil),                           // 109: discord_v1.AuditLogOptions
	(*GuildMemberParams)(nil),                         // 110: discord_v1.GuildMemberParams
	(*GuildMemberAddParams)(nil),                      // 111: discord_v1.GuildMemberAddParams
	(*APIErrorMessage)(nil),                           // 112: discord_v1.APIErrorMessage
	(*MessageReaction)(nil),                           // 113: discord_v1.MessageReaction
	(*GatewayBotResponse)(nil),                        // 114: discord_v1.GatewayBotResponse
	(*SessionInformation)(nil),                        // 115: discord_v1.SessionInformation
	(*StageInstance)(nil),                             // 116: discord_v1.StageInstance
	(*StageInstanceParams)(nil),                       // 117: discord_v1.StageInstanceParams
	(*PollLayoutType)(nil),                            // 118: discord_v1.PollLayoutType
	(*PollMedia)(nil),                                 // 119: discord_v1.PollMedia
	(*PollAnswer)(nil),                                // 120: discord_v1.PollAnswer
	(*PollAnswerCount)(nil),                           // 121: discord_v1.PollAnswerCount
	(*PollResults)(nil),                               // 122: discord_v1.PollResults
	(*Poll)(nil),                                      // 123: discord_v1.Poll
	(*SKUType)(nil),                                   // 124: discord_v1.SKUType
	(*SKUFlags)(nil),                                  // 125: discord_v1.SKUFlags
	(*SKU)(nil),                                       // 126: discord_v1.SKU
	(*SubscriptionStatus)(nil),                        // 127: discord_v1.SubscriptionStatus
	(*Subscription)(nil),                              // 128: discord_v1.Subscription
	(*EntitlementType)(nil),                           // 129: discord_v1.EntitlementType
	(*Entitlement)(nil),                               // 130: discord_v1.Entitlement
	(*EntitlementOwnerType)(nil),                      // 131: discord_v1.EntitlementOwnerType
	(*EntitlementTest)(nil),                           // 132: discord_v1.EntitlementTest
	(*EntitlementFilterOptions)(nil),                  // 133: discord_v1.EntitlementFilterOptions
	(*State)(nil),                                     // 134: discord_v1.State
	(*User)(nil),                                      // 135: discord_v1.User
	(*TeamMember)(nil),                                // 136: discord_v1.TeamMember
	(*Team)(nil),                                      // 137: discord_v1.Team
	(*Webhook)(nil),                                   // 138: discord_v1.Webhook
	(*WebhookParams)(nil),                             // 139: discord_v1.WebhookParams
	(*WebhookEdit)(nil),                               // 140: discord_v1.WebhookEdit
	(*ComponentEmoji)(nil),                            // 141: discord_v1.ComponentEmoji
	(*ApplicationCommand)(nil),                        // 142: discord_v1.ApplicationCommand
	(*ApplicationCommandOption)(nil),                  // 143: discord_v1.ApplicationCommandOption
	(*ApplicationCommandOptionChoice)(nil),            // 144: discord_v1.ApplicationCommandOptionChoice
	(*ApplicationCommandPermissions)(nil),             // 145: discord_v1.ApplicationCommandPermissions
	(*ApplicationCommandPermissionsList)(nil),         // 146: discord_v1.ApplicationCommandPermissionsList
	(*GuildApplicationCommandPermissions)(nil),        // 147: discord_v1.GuildApplicationCommandPermissions
	(*Interaction)(nil),                               // 148: discord_v1.Interaction
	(*ApplicationCommandInteractionData)(nil),         // 149: discord_v1.ApplicationCommandInteractionData
	(*ApplicationCommandInteractionDataResolved)(nil), // 150: discord_v1.ApplicationCommandInteractionDataResolved
	(*MessageComponentInteractionData)(nil),           // 151: discord_v1.MessageComponentInteractionData
	(*MessageComponentInteractionDataResolved)(nil),   // 152: discord_v1.MessageComponentInteractionDataResolved
	(*ModalSubmitInteractionData)(nil),                // 153: discord_v1.ModalSubmitInteractionData
	(*ApplicationCommandInteractionDataOption)(nil),   // 154: discord_v1.ApplicationCommandInteractionDataOption
	(*InteractionResponse)(nil),                       // 155: discord_v1.InteractionResponse
	(*InteractionResponseData)(nil),                   // 156: discord_v1.InteractionResponseData
	nil,                                               // 157: discord_v1.MessageInteractionMetadata.AuthorizingIntegrationOwnersEntry
	nil,                                               // 158: discord_v1.Application.IntegrationTypesConfigEntry
	nil,                                               // 159: discord_v1.ApplicationRoleConnectionMetadata.NameLocalizationsEntry
	nil,                                               // 160: discord_v1.ApplicationRoleConnectionMetadata.DescriptionLocalizationsEntry
	nil,                                               // 161: discord_v1.ApplicationRoleConnection.MetadataEntry
	nil,                                               // 162: discord_v1.State.GuildMapEntry
	nil,                                               // 163: discord_v1.State.ChannelMapEntry
	nil,                                               // 164: discord_v1.ApplicationCommand.NameLocalizationsEntry
	nil,                                               // 165: discord_v1.ApplicationCommand.DescriptionLocalizationsEntry
	nil,                                               // 166: discord_v1.ApplicationCommandOption.NameLocalizationsEntry
	nil,                                               // 167: discord_v1.ApplicationCommandOption.DescriptionLocalizationsEntry
	nil,                                               // 168: discord_v1.ApplicationCommandOptionChoice.NameLocalizationsEntry
	nil,                                               // 169: discord_v1.Interaction.AuthorizingIntegrationOwnersEntry
	nil,                                               // 170: discord_v1.ApplicationCommandInteractionDataResolved.UsersEntry
	nil,                                               // 171: discord_v1.ApplicationCommandInteractionDataResolved.MembersEntry
	nil,                                               // 172: discord_v1.ApplicationCommandInteractionDataResolved.RolesEntry
	nil,                                               // 173: discord_v1.ApplicationCommandInteractionDataResolved.ChannelsEntry
	nil,                                               // 174: discord_v1.ApplicationCommandInteractionDataResolved.MessagesEntry
	nil,                                               // 175: discord_v1.ApplicationCommandInteractionDataResolved.AttachmentsEntry
	nil,                                               // 176: discord_v1.MessageComponentInteractionDataResolved.UsersEntry
	nil,                                               // 177: discord_v1.MessageComponentInteractionDataResolved.MembersEntry
	nil,                                               // 178: discord_v1.MessageComponentInteractionDataResolved.RolesEntry
	nil,                                               // 179: discord_v1.MessageComponentInteractionDataResolved.ChannelsEntry
	(*timestamppb.Timestamp)(nil),                     // 180: google.protobuf.Timestamp
	(*anypb.Any)(nil),                                 // 181: google.protobuf.Any
	(*durationpb.Duration)(nil),                       // 182: google.protobuf.Duration
}
var file_discord_v1_discordgo_proto_depIdxs = []int32{
	180, // 0: discord_v1.Message.timestamp:type_name -> google.protobuf.Timestamp
	180, // 1: discord_v1.Message.edited_timestamp:type_name -> google.protobuf.Timestamp
	135, // 2: discord_v1.Message.author:type_name -> discord_v1.User
	24,  // 3: discord_v1.Message.attachments:type_name -> discord_v1.MessageAttachment
	181, // 4: discord_v1.Message.components:type_name -> google.protobuf.Any
	32,  // 5: discord_v1.Message.embeds:type_name -> discord_v1.MessageEmbed
	135, // 6: discord_v1.Message.mentions:type_name -> discord_v1.User
	33,  // 7: discord_v1.Message.reactions:type_name -> discord_v1.MessageReactions
	0,   // 8: discord_v1.Message.type:type_name -> discord_v1.MessageType
	94,  // 9: discord_v1.Message.member:type_name -> discord_v1.Member
	59,  // 10: discord_v1.Message.mention_channels:type_name -> discord_v1.Channel
	34,  // 11: discord_v1.Message.activity:type_name -> discord_v1.MessageActivity
	35,  // 12: discord_v1.Message.application:type_name -> discord_v1.MessageApplication
	37,  // 13: discord_v1.Message.message_reference:type_name -> discord_v1.MessageReference
	19,  // 14: discord_v1.Message.referenced_message:type_name -> discord_v1.Message
	36,  // 15: discord_v1.Message.message_snapshots:type_name -> discord_v1.MessageSnapshot
	38,  // 16: discord_v1.Message.interaction:type_name -> discord_v1.MessageInteraction
	39,  // 17: discord_v1.Message.interaction_metadata:type_name -> discord_v1.MessageInteractionMetadata
	1,   // 18: discord_v1.Message.flags:type_name -> discord_v1.MessageFlags
	59,  // 19: discord_v1.Message.thread:type_name -> discord_v1.Channel
	71,  // 20: discord_v1.Message.sticker_items:type_name -> discord_v1.StickerItem
	123, // 21: discord_v1.Message.poll:type_name -> discord_v1.Poll
	32,  // 22: discord_v1.MessageSend.embeds:type_name -> discord_v1.MessageEmbed
	181, // 23: discord_v1.MessageSend.components:type_name -> google.protobuf.Any
	20,  // 24: discord_v1.MessageSend.files:type_name -> discord_v1.File
	23,  // 25: discord_v1.MessageSend.allowed_mentions:type_name -> discord_v1.MessageAllowedMentions
	37,  // 26: discord_v1.MessageSend.reference:type_name -> discord_v1.MessageReference
	1,   // 27: discord_v1.MessageSend.flags:type_name -> discord_v1.MessageFlags
	123, // 28: discord_v1.MessageSend.poll:type_name -> discord_v1.Poll
	181, // 29: discord_v1.MessageEdit.components:type_name -> google.protobuf.Any
	32,  // 30: discord_v1.MessageEdit.embeds:type_name -> discord_v1.MessageEmbed
	23,  // 31: discord_v1.MessageEdit.allowed_mentions:type_name -> discord_v1.MessageAllowedMentions
	1,   // 32: discord_v1.MessageEdit.flags:type_name -> discord_v1.MessageFlags
	20,  // 33: discord_v1.MessageEdit.files:type_name -> discord_v1.File
	24,  // 34: discord_v1.MessageEdit.attachments:type_name -> discord_v1.MessageAttachment
	2,   // 35: discord_v1.MessageAllowedMentions.parse:type_name -> discord_v1.AllowedMentionType
	3,   // 36: discord_v1.MessageEmbed.type:type_name -> discord_v1.EmbedType
	25,  // 37: discord_v1.MessageEmbed.footer:type_name -> discord_v1.MessageEmbedFooter
	26,  // 38: discord_v1.MessageEmbed.image:type_name -> discord_v1.MessageEmbedImage
	27,  // 39: discord_v1.MessageEmbed.thumbnail:type_name -> discord_v1.MessageEmbedThumbnail
	28,  // 40: discord_v1.MessageEmbed.video:type_name -> discord_v1.MessageEmbedVideo
	29,  // 41: discord_v1.MessageEmbed.provider:type_name -> discord_v1.MessageEmbedProvider
	30,  // 42: discord_v1.MessageEmbed.author:type_name -> discord_v1.MessageEmbedAuthor
	31,  // 43: discord_v1.MessageEmbed.fields:type_name -> discord_v1.MessageEmbedField
	68,  // 44: discord_v1.MessageReactions.emoji:type_name -> discord_v1.Emoji
	4,   // 45: discord_v1.MessageActivity.type:type_name -> discord_v1.MessageActivityType
	19,  // 46: discord_v1.MessageSnapshot.message:type_name -> discord_v1.Message
	5,   // 47: discord_v1.MessageReference.type:type_name -> discord_v1.MessageReferenceType
	135, // 48: discord_v1.MessageInteraction.user:type_name -> discord_v1.User
	94,  // 49: discord_v1.MessageInteraction.member:type_name -> discord_v1.Member
	135, // 50: discord_v1.MessageInteractionMetadata.user:type_name -> discord_v1.User
	157, // 51: discord_v1.MessageInteractionMetadata.authorizing_integration_owners:type_name -> discord_v1.MessageInteractionMetadata.AuthorizingIntegrationOwnersEntry
	39,  // 52: discord_v1.MessageInteractionMetadata.triggering_interaction_metadata:type_name -> discord_v1.MessageInteractionMetadata
	41,  // 53: discord_v1.Session.identify:type_name -> discord_v1.Identify
	134, // 54: discord_v1.Session.state:type_name -> discord_v1.State
	180, // 55: discord_v1.Session.last_heartbeat_ack:type_name -> google.protobuf.Timestamp
	180, // 56: discord_v1.Session.last_heartbeat_sent:type_name -> google.protobuf.Timestamp
	42,  // 57: discord_v1.Identify.properties:type_name -> discord_v1.IdentifyProperties
	43,  // 58: discord_v1.Identify.presence:type_name -> discord_v1.GatewayStatusUpdate
	44,  // 59: discord_v1.GatewayStatusUpdate.game:type_name -> discord_v1.Activity
	180, // 60: discord_v1.Activity.created_at:type_name -> google.protobuf.Timestamp
	45,  // 61: discord_v1.Activity.timestamps:type_name -> discord_v1.TimeStamps
	68,  // 62: discord_v1.Activity.emoji:type_name -> discord_v1.Emoji
	47,  // 63: discord_v1.Activity.party:type_name -> discord_v1.Party
	46,  // 64: discord_v1.Activity.assets:type_name -> discord_v1.Assets
	48,  // 65: discord_v1.Activity.secrets:type_name -> discord_v1.Secrets
	50,  // 66: discord_v1.ApplicationIntegrationTypeConfig.oauth2_install_params:type_name -> discord_v1.ApplicationInstallParams
	135, // 67: discord_v1.Application.owner:type_name -> discord_v1.User
	137, // 68: discord_v1.Application.team:type_name -> discord_v1.Team
	158, // 69: discord_v1.Application.integration_types_config:type_name -> discord_v1.Application.IntegrationTypesConfigEntry
	159, // 70: discord_v1.ApplicationRoleConnectionMetadata.name_localizations:type_name -> discord_v1.ApplicationRoleConnectionMetadata.NameLocalizationsEntry
	160, // 71: discord_v1.ApplicationRoleConnectionMetadata.description_localizations:type_name -> discord_v1.ApplicationRoleConnectionMetadata.DescriptionLocalizationsEntry
	161, // 72: discord_v1.ApplicationRoleConnection.metadata:type_name -> discord_v1.ApplicationRoleConnection.MetadataEntry
	55,  // 73: discord_v1.UserConnection.integrations:type_name -> discord_v1.Integration
	135, // 74: discord_v1.Integration.user:type_name -> discord_v1.User
	56,  // 75: discord_v1.Integration.account:type_name -> discord_v1.IntegrationAccount
	180, // 76: discord_v1.Integration.synced_at:type_name -> google.protobuf.Timestamp
	73,  // 77: discord_v1.Invite.guild:type_name -> discord_v1.Guild
	59,  // 78: discord_v1.Invite.channel:type_name -> discord_v1.Channel
	135, // 79: discord_v1.Invite.inviter:type_name -> discord_v1.User
	180, // 80: discord_v1.Invite.created_at:type_name -> google.protobuf.Timestamp
	135, // 81: discord_v1.Invite.target_user:type_name -> discord_v1.User
	51,  // 82: discord_v1.Invite.target_application:type_name -> discord_v1.Application
	180, // 83: discord_v1.Invite.expires_at:type_name -> google.protobuf.Timestamp
	180, // 84: discord_v1.Channel.last_pin_timestamp:type_name -> google.protobuf.Timestamp
	135, // 85: discord_v1.Channel.recipients:type_name -> discord_v1.User
	19,  // 86: discord_v1.Channel.messages:type_name -> discord_v1.Message
	60,  // 87: discord_v1.Channel.permission_overwrites:type_name -> discord_v1.PermissionOverwrite
	62,  // 88: discord_v1.Channel.thread_metadata:type_name -> discord_v1.ThreadMetadata
	63,  // 89: discord_v1.Channel.member:type_name -> discord_v1.ThreadMember
	63,  // 90: discord_v1.Channel.members:type_name -> discord_v1.ThreadMember
	67,  // 91: discord_v1.Channel.available_tags:type_name -> discord_v1.ForumTag
	66,  // 92: discord_v1.Channel.default_reaction_emoji:type_name -> discord_v1.ForumDefaultReaction
	180, // 93: discord_v1.ThreadMetadata.archive_timestamp:type_name -> google.protobuf.Timestamp
	180, // 94: discord_v1.ThreadMember.join_timestamp:type_name -> google.protobuf.Timestamp
	94,  // 95: discord_v1.ThreadMember.member:type_name -> discord_v1.Member
	59,  // 96: discord_v1.ThreadsList.threads:type_name -> discord_v1.Channel
	63,  // 97: discord_v1.ThreadsList.members:type_name -> discord_v1.ThreadMember
	63,  // 98: discord_v1.AddedThreadMember.thread_member:type_name -> discord_v1.ThreadMember
	94,  // 99: discord_v1.AddedThreadMember.member:type_name -> discord_v1.Member
	92,  // 100: discord_v1.AddedThreadMember.presence:type_name -> discord_v1.Presence
	135, // 101: discord_v1.Emoji.user:type_name -> discord_v1.User
	135, // 102: discord_v1.Sticker.user:type_name -> discord_v1.User
	70,  // 103: discord_v1.StickerPack.stickers:type_name -> discord_v1.Sticker
	180, // 104: discord_v1.Guild.joined_at:type_name -> google.protobuf.Timestamp
	88,  // 105: discord_v1.Guild.roles:type_name -> discord_v1.Role
	68,  // 106: discord_v1.Guild.emojis:type_name -> discord_v1.Emoji
	70,  // 107: discord_v1.Guild.stickers:type_name -> discord_v1.Sticker
	94,  // 108: discord_v1.Guild.members:type_name -> discord_v1.Member
	92,  // 109: discord_v1.Guild.presences:type_name -> discord_v1.Presence
	59,  // 110: discord_v1.Guild.channels:type_name -> discord_v1.Channel
	59,  // 111: discord_v1.Guild.threads:type_name -> discord_v1.Channel
	91,  // 112: discord_v1.Guild.voice_states:type_name -> discord_v1.VoiceState
	116, // 113: discord_v1.Guild.stage_instances:type_name -> discord_v1.StageInstance
	68,  // 114: discord_v1.GuildPreview.emojis:type_name -> discord_v1.Emoji
	180, // 115: discord_v1.GuildScheduledEvent.scheduled_start_time:type_name -> google.protobuf.Timestamp
	180, // 116: discord_v1.GuildScheduledEvent.scheduled_end_time:type_name -> google.protobuf.Timestamp
	77,  // 117: discord_v1.GuildScheduledEvent.entity_metadata:type_name -> discord_v1.GuildScheduledEventEntityMetadata
	135, // 118: discord_v1.GuildScheduledEvent.creator:type_name -> discord_v1.User
	180, // 119: discord_v1.GuildScheduledEventParams.scheduled_start_time:type_name -> google.protobuf.Timestamp
	180, // 120: discord_v1.GuildScheduledEventParams.scheduled_end_time:type_name -> google.protobuf.Timestamp
	77,  // 121: discord_v1.GuildScheduledEventParams.entity_metadata:type_name -> discord_v1.GuildScheduledEventEntityMetadata
	135, // 122: discord_v1.GuildScheduledEventUser.user:type_name -> discord_v1.User
	94,  // 123: discord_v1.GuildScheduledEventUser.member:type_name -> discord_v1.Member
	82,  // 124: discord_v1.GuildOnboarding.prompts:type_name -> discord_v1.GuildOnboardingPrompt
	79,  // 125: discord_v1.GuildOnboarding.mode:type_name -> discord_v1.GuildOnboardingMode
	81,  // 126: discord_v1.GuildOnboardingPrompt.type:type_name -> discord_v1.GuildOnboardingPromptType
	83,  // 127: discord_v1.GuildOnboardingPrompt.options:type_name -> discord_v1.GuildOnboardingPromptOption
	68,  // 128: discord_v1.GuildOnboardingPromptOption.emoji:type_name -> discord_v1.Emoji
	135, // 129: discord_v1.GuildTemplate.creator:type_name -> discord_v1.User
	180, // 130: discord_v1.GuildTemplate.created_at:type_name -> google.protobuf.Timestamp
	180, // 131: discord_v1.GuildTemplate.updated_at:type_name -> google.protobuf.Timestamp
	73,  // 132: discord_v1.GuildTemplate.serialized_source_guild:type_name -> discord_v1.Guild
	94,  // 133: discord_v1.VoiceState.member:type_name -> discord_v1.Member
	180, // 134: discord_v1.VoiceState.request_to_speak_timestamp:type_name -> google.protobuf.Timestamp
	135, // 135: discord_v1.Presence.user:type_name -> discord_v1.User
	44,  // 136: discord_v1.Presence.activities:type_name -> discord_v1.Activity
	95,  // 137: discord_v1.Presence.client_status:type_name -> discord_v1.ClientStatus
	180, // 138: discord_v1.Member.joined_at:type_name -> google.protobuf.Timestamp
	135, // 139: discord_v1.Member.user:type_name -> discord_v1.User
	180, // 140: discord_v1.Member.premium_since:type_name -> google.protobuf.Timestamp
	180, // 141: discord_v1.Member.communication_disabled_until:type_name -> google.protobuf.Timestamp
	182, // 142: discord_v1.TooManyRequests.retry_after:type_name -> google.protobuf.Duration
	88,  // 143: discord_v1.GuildRole.role:type_name -> discord_v1.Role
	135, // 144: discord_v1.GuildBan.user:type_name -> discord_v1.User
	101, // 145: discord_v1.AutoModerationRule.trigger_metadata:type_name -> discord_v1.AutoModerationTriggerMetadata
	104, // 146: discord_v1.AutoModerationRule.actions:type_name -> discord_v1.AutoModerationAction
	103, // 147: discord_v1.AutoModerationAction.metadata:type_name -> discord_v1.AutoModerationActionMetadata
	138, // 148: discord_v1.GuildAuditLog.webhooks:type_name -> discord_v1.Webhook
	135, // 149: discord_v1.GuildAuditLog.users:type_name -> discord_v1.User
	107, // 150: discord_v1.GuildAuditLog.audit_log_entries:type_name -> discord_v1.AuditLogEntry
	55,  // 151: discord_v1.GuildAuditLog.integrations:type_name -> discord_v1.Integration
	108, // 152: discord_v1.AuditLogEntry.changes:type_name -> discord_v1.AuditLogChange
	109, // 153: discord_v1.AuditLogEntry.options:type_name -> discord_v1.AuditLogOptions
	180, // 154: discord_v1.GuildMemberParams.communication_disabled_until:type_name -> google.protobuf.Timestamp
	68,  // 155: discord_v1.MessageReaction.emoji:type_name -> discord_v1.Emoji
	115, // 156: discord_v1.GatewayBotResponse.session_start_limit:type_name -> discord_v1.SessionInformation
	141, // 157: discord_v1.PollMedia.emoji:type_name -> discord_v1.ComponentEmoji
	119, // 158: discord_v1.PollAnswer.media:type_name -> discord_v1.PollMedia
	121, // 159: discord_v1.PollResults.answer_counts:type_name -> discord_v1.PollAnswerCount
	119, // 160: discord_v1.Poll.question:type_name -> discord_v1.PollMedia
	120, // 161: discord_v1.Poll.answers:type_name -> discord_v1.PollAnswer
	122, // 162: discord_v1.Poll.results:type_name -> discord_v1.PollResults
	180, // 163: discord_v1.Poll.expiry:type_name -> google.protobuf.Timestamp
	180, // 164: discord_v1.Subscription.current_period_start:type_name -> google.protobuf.Timestamp
	180, // 165: discord_v1.Subscription.current_period_end:type_name -> google.protobuf.Timestamp
	180, // 166: discord_v1.Subscription.canceled_at:type_name -> google.protobuf.Timestamp
	180, // 167: discord_v1.Entitlement.starts_at:type_name -> google.protobuf.Timestamp
	180, // 168: discord_v1.Entitlement.ends_at:type_name -> google.protobuf.Timestamp
	180, // 169: discord_v1.EntitlementFilterOptions.before:type_name -> google.protobuf.Timestamp
	180, // 170: discord_v1.EntitlementFilterOptions.after:type_name -> google.protobuf.Timestamp
	162, // 171: discord_v1.State.guild_map:type_name -> discord_v1.State.GuildMapEntry
	163, // 172: discord_v1.State.channel_map:type_name -> discord_v1.State.ChannelMapEntry
	7,   // 173: discord_v1.User.premium_type:type_name -> discord_v1.UserPremiumType
	135, // 174: discord_v1.TeamMember.user:type_name -> discord_v1.User
	8,   // 175: discord_v1.TeamMember.membership_state:type_name -> discord_v1.MembershipState
	136, // 176: discord_v1.Team.members:type_name -> discord_v1.TeamMember
	9,   // 177: discord_v1.Webhook.type:type_name -> discord_v1.WebhookType
	135, // 178: discord_v1.Webhook.user:type_name -> discord_v1.User
	20,  // 179: discord_v1.WebhookParams.files:type_name -> discord_v1.File
	181, // 180: discord_v1.WebhookParams.components:type_name -> google.protobuf.Any
	32,  // 181: discord_v1.WebhookParams.embeds:type_name -> discord_v1.MessageEmbed
	24,  // 182: discord_v1.WebhookParams.attachments:type_name -> discord_v1.MessageAttachment
	23,  // 183: discord_v1.WebhookParams.allowed_mentions:type_name -> discord_v1.MessageAllowedMentions
	1,   // 184: discord_v1.WebhookParams.flags:type_name -> discord_v1.MessageFlags
	181, // 185: discord_v1.WebhookEdit.components:type_name -> google.protobuf.Any
	32,  // 186: discord_v1.WebhookEdit.embeds:type_name -> discord_v1.MessageEmbed
	20,  // 187: discord_v1.WebhookEdit.files:type_name -> discord_v1.File
	24,  // 188: discord_v1.WebhookEdit.attachments:type_name -> discord_v1.MessageAttachment
	23,  // 189: discord_v1.WebhookEdit.allowed_mentions:type_name -> discord_v1.MessageAllowedMentions
	12,  // 190: discord_v1.ApplicationCommand.type:type_name -> discord_v1.ApplicationCommandType
	164, // 191: discord_v1.ApplicationCommand.name_localizations:type_name -> discord_v1.ApplicationCommand.NameLocalizationsEntry
	13,  // 192: discord_v1.ApplicationCommand.contexts:type_name -> discord_v1.InteractionContextType
	14,  // 193: discord_v1.ApplicationCommand.integration_types:type_name -> discord_v1.ApplicationIntegrationType
	165, // 194: discord_v1.ApplicationCommand.description_localizations:type_name -> discord_v1.ApplicationCommand.DescriptionLocalizationsEntry
	143, // 195: discord_v1.ApplicationCommand.options:type_name -> discord_v1.ApplicationCommandOption
	15,  // 196: discord_v1.ApplicationCommandOption.type:type_name -> discord_v1.ApplicationCommandOptionType
	166, // 197: discord_v1.ApplicationCommandOption.name_localizations:type_name -> discord_v1.ApplicationCommandOption.NameLocalizationsEntry
	167, // 198: discord_v1.ApplicationCommandOption.description_localizations:type_name -> discord_v1.ApplicationCommandOption.DescriptionLocalizationsEntry
	10,  // 199: discord_v1.ApplicationCommandOption.channel_types:type_name -> discord_v1.ChannelType
	143, // 200: discord_v1.ApplicationCommandOption.options:type_name -> discord_v1.ApplicationCommandOption
	144, // 201: discord_v1.ApplicationCommandOption.choices:type_name -> discord_v1.ApplicationCommandOptionChoice
	168, // 202: discord_v1.ApplicationCommandOptionChoice.name_localizations:type_name -> discord_v1.ApplicationCommandOptionChoice.NameLocalizationsEntry
	16,  // 203: discord_v1.ApplicationCommandPermissions.type:type_name -> discord_v1.ApplicationCommandPermissionType
	145, // 204: discord_v1.ApplicationCommandPermissionsList.permissions:type_name -> discord_v1.ApplicationCommandPermissions
	145, // 205: discord_v1.GuildApplicationCommandPermissions.permissions:type_name -> discord_v1.ApplicationCommandPermissions
	17,  // 206: discord_v1.Interaction.type:type_name -> discord_v1.InteractionType
	149, // 207: discord_v1.Interaction.application_command_data:type_name -> discord_v1.ApplicationCommandInteractionData
	151, // 208: discord_v1.Interaction.message_component_data:type_name -> discord_v1.MessageComponentInteractionData
	153, // 209: discord_v1.Interaction.modal_submit_data:type_name -> discord_v1.ModalSubmitInteractionData
	19,  // 210: discord_v1.Interaction.message:type_name -> discord_v1.Message
	94,  // 211: discord_v1.Interaction.member:type_name -> discord_v1.Member
	135, // 212: discord_v1.Interaction.user:type_name -> discord_v1.User
	13,  // 213: discord_v1.Interaction.context:type_name -> discord_v1.InteractionContextType
	169, // 214: discord_v1.Interaction.authorizing_integration_owners:type_name -> discord_v1.Interaction.AuthorizingIntegrationOwnersEntry
	130, // 215: discord_v1.Interaction.entitlements:type_name -> discord_v1.Entitlement
	12,  // 216: discord_v1.ApplicationCommandInteractionData.command_type:type_name -> discord_v1.ApplicationCommandType
	150, // 217: discord_v1.ApplicationCommandInteractionData.resolved:type_name -> discord_v1.ApplicationCommandInteractionDataResolved
	154, // 218: discord_v1.ApplicationCommandInteractionData.options:type_name -> discord_v1.ApplicationCommandInteractionDataOption
	170, // 219: discord_v1.ApplicationCommandInteractionDataResolved.users:type_name -> discord_v1.ApplicationCommandInteractionDataResolved.UsersEntry
	171, // 220: discord_v1.ApplicationCommandInteractionDataResolved.members:type_name -> discord_v1.ApplicationCommandInteractionDataResolved.MembersEntry
	172, // 221: discord_v1.ApplicationCommandInteractionDataResolved.roles:type_name -> discord_v1.ApplicationCommandInteractionDataResolved.RolesEntry
	173, // 222: discord_v1.ApplicationCommandInteractionDataResolved.channels:type_name -> discord_v1.ApplicationCommandInteractionDataResolved.ChannelsEntry
	174, // 223: discord_v1.ApplicationCommandInteractionDataResolved.messages:type_name -> discord_v1.ApplicationCommandInteractionDataResolved.MessagesEntry
	175, // 224: discord_v1.ApplicationCommandInteractionDataResolved.attachments:type_name -> discord_v1.ApplicationCommandInteractionDataResolved.AttachmentsEntry
	11,  // 225: discord_v1.MessageComponentInteractionData.component_type:type_name -> discord_v1.ComponentType
	152, // 226: discord_v1.MessageComponentInteractionData.resolved:type_name -> discord_v1.MessageComponentInteractionDataResolved
	176, // 227: discord_v1.MessageComponentInteractionDataResolved.users:type_name -> discord_v1.MessageComponentInteractionDataResolved.UsersEntry
	177, // 228: discord_v1.MessageComponentInteractionDataResolved.members:type_name -> discord_v1.MessageComponentInteractionDataResolved.MembersEntry
	178, // 229: discord_v1.MessageComponentInteractionDataResolved.roles:type_name -> discord_v1.MessageComponentInteractionDataResolved.RolesEntry
	179, // 230: discord_v1.MessageComponentInteractionDataResolved.channels:type_name -> discord_v1.MessageComponentInteractionDataResolved.ChannelsEntry
	181, // 231: discord_v1.ModalSubmitInteractionData.components:type_name -> google.protobuf.Any
	15,  // 232: discord_v1.ApplicationCommandInteractionDataOption.type:type_name -> discord_v1.ApplicationCommandOptionType
	154, // 233: discord_v1.ApplicationCommandInteractionDataOption.options:type_name -> discord_v1.ApplicationCommandInteractionDataOption
	18,  // 234: discord_v1.InteractionResponse.type:type_name -> discord_v1.InteractionResponseType
	156, // 235: discord_v1.InteractionResponse.data:type_name -> discord_v1.InteractionResponseData
	181, // 236: discord_v1.InteractionResponseData.components:type_name -> google.protobuf.Any
	32,  // 237: discord_v1.InteractionResponseData.embeds:type_name -> discord_v1.MessageEmbed
	23,  // 238: discord_v1.InteractionResponseData.allowed_mentions:type_name -> discord_v1.MessageAllowedMentions
	20,  // 239: discord_v1.InteractionResponseData.files:type_name -> discord_v1.File
	24,  // 240: discord_v1.InteractionResponseData.attachments:type_name -> discord_v1.MessageAttachment
	123, // 241: discord_v1.InteractionResponseData.poll:type_name -> discord_v1.Poll
	1,   // 242: discord_v1.InteractionResponseData.flags:type_name -> discord_v1.MessageFlags
	144, // 243: discord_v1.InteractionResponseData.choices:type_name -> discord_v1.ApplicationCommandOptionChoice
	49,  // 244: discord_v1.Application.IntegrationTypesConfigEntry.value:type_name -> discord_v1.ApplicationIntegrationTypeConfig
	73,  // 245: discord_v1.State.GuildMapEntry.value:type_name -> discord_v1.Guild
	59,  // 246: discord_v1.State.ChannelMapEntry.value:type_name -> discord_v1.Channel
	135, // 247: discord_v1.ApplicationCommandInteractionDataResolved.UsersEntry.value:type_name -> discord_v1.User
	94,  // 248: discord_v1.ApplicationCommandInteractionDataResolved.MembersEntry.value:type_name -> discord_v1.Member
	88,  // 249: discord_v1.ApplicationCommandInteractionDataResolved.RolesEntry.value:type_name -> discord_v1.Role
	59,  // 250: discord_v1.ApplicationCommandInteractionDataResolved.ChannelsEntry.value:type_name -> discord_v1.Channel
	19,  // 251: discord_v1.ApplicationCommandInteractionDataResolved.MessagesEntry.value:type_name -> discord_v1.Message
	24,  // 252: discord_v1.ApplicationCommandInteractionDataResolved.AttachmentsEntry.value:type_name -> discord_v1.MessageAttachment
	135, // 253: discord_v1.MessageComponentInteractionDataResolved.UsersEntry.value:type_name -> discord_v1.User
	94,  // 254: discord_v1.MessageComponentInteractionDataResolved.MembersEntry.value:type_name -> discord_v1.Member
	88,  // 255: discord_v1.MessageComponentInteractionDataResolved.RolesEntry.value:type_name -> discord_v1.Role
	59,  // 256: discord_v1.MessageComponentInteractionDataResolved.ChannelsEntry.value:type_name -> discord_v1.Channel
	257, // [257:257] is the sub-list for method output_type
	257, // [257:257] is the sub-list for method input_type
	257, // [257:257] is the sub-list for extension type_name
	257, // [257:257] is the sub-list for extension extendee
	0,   // [0:257] is the sub-list for field type_name
}

func init() { file_discord_v1_discordgo_proto_init() }
func file_discord_v1_discordgo_proto_init() {
	if File_discord_v1_discordgo_proto != nil {
		return
	}
	file_discord_v1_discordgo_proto_msgTypes[119].OneofWrappers = []any{}
	file_discord_v1_discordgo_proto_msgTypes[120].OneofWrappers = []any{}
	file_discord_v1_discordgo_proto_msgTypes[121].OneofWrappers = []any{}
	file_discord_v1_discordgo_proto_msgTypes[123].OneofWrappers = []any{}
	file_discord_v1_discordgo_proto_msgTypes[124].OneofWrappers = []any{}
	file_discord_v1_discordgo_proto_msgTypes[125].OneofWrappers = []any{
		(*ApplicationCommandOptionChoice_StringValue)(nil),
		(*ApplicationCommandOptionChoice_IntegerValue)(nil),
		(*ApplicationCommandOptionChoice_NumberValue)(nil),
	}
	file_discord_v1_discordgo_proto_msgTypes[129].OneofWrappers = []any{
		(*Interaction_ApplicationCommandData)(nil),
		(*Interaction_MessageComponentData)(nil),
		(*Interaction_ModalSubmitData)(nil),
	}
	file_discord_v1_discordgo_proto_msgTypes[130].OneofWrappers = []any{}
	file_discord_v1_discordgo_proto_msgTypes[132].OneofWrappers = []any{}
	file_discord_v1_discordgo_proto_msgTypes[135].OneofWrappers = []any{
		(*ApplicationCommandInteractionDataOption_StringValue)(nil),
		(*ApplicationCommandInteractionDataOption_IntegerValue)(nil),
		(*ApplicationCommandInteractionDataOption_BooleanValue)(nil),
		(*ApplicationCommandInteractionDataOption_UserValueId)(nil),
		(*ApplicationCommandInteractionDataOption_ChannelValueId)(nil),
		(*ApplicationCommandInteractionDataOption_RoleValueId)(nil),
		(*ApplicationCommandInteractionDataOption_MentionableValueId)(nil),
		(*ApplicationCommandInteractionDataOption_NumberValue)(nil),
		(*ApplicationCommandInteractionDataOption_AttachmentValueId)(nil),
	}
	file_discord_v1_discordgo_proto_msgTypes[136].OneofWrappers = []any{}
	file_discord_v1_discordgo_proto_msgTypes[137].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_discord_v1_discordgo_proto_rawDesc), len(file_discord_v1_discordgo_proto_rawDesc)),
			NumEnums:      19,
			NumMessages:   161,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_discord_v1_discordgo_proto_goTypes,
		DependencyIndexes: file_discord_v1_discordgo_proto_depIdxs,
		EnumInfos:         file_discord_v1_discordgo_proto_enumTypes,
		MessageInfos:      file_discord_v1_discordgo_proto_msgTypes,
	}.Build()
	File_discord_v1_discordgo_proto = out.File
	file_discord_v1_discordgo_proto_goTypes = nil
	file_discord_v1_discordgo_proto_depIdxs = nil
}
