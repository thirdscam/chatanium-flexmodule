syntax = "proto3";
package discord_v1;
option go_package = "github.com/thirdscam/chatanium-flexmodule/proto/discord-v1";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/any.proto";

// MessageType is the type of Message
// https://discord.com/developers/docs/resources/channel#message-object-message-types
enum MessageType {
	MESSAGE_TYPE_DEFAULT = 0;
	MESSAGE_TYPE_RECIPIENT_ADD = 1;
	MESSAGE_TYPE_RECIPIENT_REMOVE = 2;
	MESSAGE_TYPE_CALL = 3;
	MESSAGE_TYPE_CHANNEL_NAME_CHANGE = 4;
	MESSAGE_TYPE_CHANNEL_ICON_CHANGE = 5;
	MESSAGE_TYPE_CHANNEL_PINNED_MESSAGE = 6;
	MESSAGE_TYPE_GUILD_MEMBER_JOIN = 7;
	MESSAGE_TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION = 8;
	MESSAGE_TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_ONE = 9;
	MESSAGE_TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_TWO = 10;
	MESSAGE_TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_THREE = 11;
	MESSAGE_TYPE_CHANNEL_FOLLOW_ADD = 12;
	MESSAGE_TYPE_GUILD_DISCOVERY_DISQUALIFIED = 14;
	MESSAGE_TYPE_GUILD_DISCOVERY_REQUALIFIED = 15;
	MESSAGE_TYPE_THREAD_CREATED = 18;
	MESSAGE_TYPE_REPLY = 19;
	MESSAGE_TYPE_CHAT_INPUT_COMMAND = 20;
	MESSAGE_TYPE_THREAD_STARTER_MESSAGE = 21;
	MESSAGE_TYPE_CONTEXT_MENU_COMMAND = 23;
}

// A Message stores all data related to a specific Discord message.
message Message {
	string id = 1;
	string channel_id = 2;
	string guild_id = 3;
	string content = 4;
	google.protobuf.Timestamp timestamp = 5;
	google.protobuf.Timestamp edited_timestamp = 6;
	repeated string mention_roles = 7;
	bool tts = 8;
	bool mention_everyone = 9;
	User author = 10;
	repeated MessageAttachment attachments = 11;
	repeated google.protobuf.Any components = 12; // Using Any for MessageComponent as it's an interface
	repeated MessageEmbed embeds = 13;
	repeated User mentions = 14;
	repeated MessageReactions reactions = 15;
	bool pinned = 16;
	MessageType type = 17;
	string webhook_id = 18;
	Member member = 19;
	repeated Channel mention_channels = 20;
	MessageActivity activity = 21;
	MessageApplication application = 22;
	MessageReference message_reference = 23;
	Message referenced_message = 24;
	repeated MessageSnapshot message_snapshots = 25;
	MessageInteraction interaction = 26; // Deprecated, use InteractionMetadata
	MessageInteractionMetadata interaction_metadata = 27;
	MessageFlags flags = 28;
	Channel thread = 29;
	repeated StickerItem sticker_items = 30;
	Poll poll = 31;
}

// MessageFlags is the flags of "message" (see MessageFlags* consts)
// https://discord.com/developers/docs/resources/channel#message-object-message-flags
enum MessageFlags {
	MESSAGE_FLAGS_CROSS_POSTED = 0; // This message has been published to subscribed channels (via Channel Following).
	MESSAGE_FLAGS_IS_CROSS_POSTED = 1; // this message originated from a message in another channel (via Channel Following).
	MESSAGE_FLAGS_SUPPRESS_EMBEDS = 2; // do not include any embeds when serializing this message.
	MESSAGE_FLAGS_SOURCE_MESSAGE_DELETED = 3; // the source message for this crosspost has been deleted (via Channel Following).
	MESSAGE_FLAGS_URGENT = 4; // this message came from the urgent message system.
	MESSAGE_FLAGS_HAS_THREAD = 5; // this message has an associated thread, with the same id as the message.
	MESSAGE_FLAGS_EPHEMERAL = 6; // this message is only visible to the user who invoked the Interaction.
	MESSAGE_FLAGS_LOADING = 7; // this message is an Interaction Response and the bot is "thinking".
	MESSAGE_FLAGS_FAILED_TO_MENTION_SOME_ROLES_IN_THREAD = 8; // this message failed to mention some roles and add their members to the thread.
	MESSAGE_FLAGS_SUPPRESS_NOTIFICATIONS = 12; // this message will not trigger push and desktop notifications.
	MESSAGE_FLAGS_IS_VOICE_MESSAGE = 13; // this message is a voice message.
}

// File stores info about files you e.g. send in messages.
message File {
	string name = 1;
	string content_type = 2;
	// Reader is a Go interface, cannot be directly translated.
	// Consider using bytes if sending file content directly, or a reference.
}

// MessageSend stores all parameters you can send with ChannelMessageSendComplex.
message MessageSend {
	string content = 1;
	repeated MessageEmbed embeds = 2;
	bool tts = 3;
	repeated google.protobuf.Any components = 4; // Using Any for MessageComponent
	repeated File files = 5;
	MessageAllowedMentions allowed_mentions = 6;
	MessageReference reference = 7;
	repeated string sticker_ids = 8;
	MessageFlags flags = 9;
	Poll poll = 10;
}

// MessageEdit is used to chain parameters via ChannelMessageEditComplex.
message MessageEdit {
	string content = 1;
	repeated google.protobuf.Any components = 2; // Using Any for MessageComponent
	repeated MessageEmbed embeds = 3;
	MessageAllowedMentions allowed_mentions = 4;
	MessageFlags flags = 5;
	repeated File files = 6;
	repeated MessageAttachment attachments = 7;

	string id = 8;
	string channel = 9;
}

// AllowedMentionType describes the types of mentions used
// in the MessageAllowedMentions type.
enum AllowedMentionType {
	ALLOWED_MENTION_TYPE_ROLES = 0;
	ALLOWED_MENTION_TYPE_USERS = 1;
	ALLOWED_MENTION_TYPE_EVERYONE = 2;
}

// MessageAllowedMentions allows the user to specify which mentions
// Discord is allowed to parse in this message.
message MessageAllowedMentions {
	repeated AllowedMentionType parse = 1;
	repeated string roles = 2;
	repeated string users = 3;
	bool replied_user = 4;
}

// A MessageAttachment stores data for message attachments.
message MessageAttachment {
	string id = 1;
	string url = 2;
	string proxy_url = 3;
	string filename = 4;
	string content_type = 5;
	int32 width = 6;
	int32 height = 7;
	int32 size = 8;
	bool ephemeral = 9;
}

// MessageEmbedFooter is a part of a MessageEmbed struct.
message MessageEmbedFooter {
	string text = 1;
	string icon_url = 2;
	string proxy_icon_url = 3;
}

// MessageEmbedImage is a part of a MessageEmbed struct.
message MessageEmbedImage {
	string url = 1;
	string proxy_url = 2;
	int32 width = 3;
	int32 height = 4;
}

// MessageEmbedThumbnail is a part of a MessageEmbed struct.
message MessageEmbedThumbnail {
	string url = 1;
	string proxy_url = 2;
	int32 width = 3;
	int32 height = 4;
}

// MessageEmbedVideo is a part of a MessageEmbed struct.
message MessageEmbedVideo {
	string url = 1;
	int32 width = 2;
	int32 height = 3;
}

// MessageEmbedProvider is a part of a MessageEmbed struct.
message MessageEmbedProvider {
	string url = 1;
	string name = 2;
}

// MessageEmbedAuthor is a part of a MessageEmbed struct.
message MessageEmbedAuthor {
	string url = 1;
	string name = 2;
	string icon_url = 3;
	string proxy_icon_url = 4;
}

// MessageEmbedField is a part of a MessageEmbed struct.
message MessageEmbedField {
	string name = 1;
	string value = 2;
	bool inline = 3;
}

// An MessageEmbed stores data for message embeds.
message MessageEmbed {
	string url = 1;
	EmbedType type = 2;
	string title = 3;
	string description = 4;
	string timestamp = 5;
	int32 color = 6;
	MessageEmbedFooter footer = 7;
	MessageEmbedImage image = 8;
	MessageEmbedThumbnail thumbnail = 9;
	MessageEmbedVideo video = 10;
	MessageEmbedProvider provider = 11;
	MessageEmbedAuthor author = 12;
	repeated MessageEmbedField fields = 13;
}

// EmbedType is the type of embed
// https://discord.com/developers/docs/resources/channel#embed-object-embed-types
enum EmbedType {
	EMBED_TYPE_RICH = 0;
	EMBED_TYPE_IMAGE = 1;
	EMBED_TYPE_VIDEO = 2;
	EMBED_TYPE_GIFV = 3;
	EMBED_TYPE_ARTICLE = 4;
	EMBED_TYPE_LINK = 5;
}

// MessageReactions holds a reactions object for a message.
message MessageReactions {
	int32 count = 1;
	bool me = 2;
	Emoji emoji = 3;
}

// MessageActivity is sent with Rich Presence-related chat embeds
message MessageActivity {
	MessageActivityType type = 1;
	string party_id = 2;
}

// MessageActivityType is the type of message activity
enum MessageActivityType {
	MESSAGE_ACTIVITY_TYPE_JOIN = 0;
	MESSAGE_ACTIVITY_TYPE_SPECTATE = 1;
	MESSAGE_ACTIVITY_TYPE_LISTEN = 2;
	MESSAGE_ACTIVITY_TYPE_JOIN_REQUEST = 3;
}

// MessageApplication is sent with Rich Presence-related chat embeds
message MessageApplication {
	string id = 1;
	string cover_image = 2;
	string description = 3;
	string icon = 4;
	string name = 5;
}

// MessageSnapshot represents a snapshot of a forwarded message.
// https://discord.com/developers/docs/resources/message#message-snapshot-object
message MessageSnapshot {
	Message message = 1;
}

// MessageReferenceType is a type of MessageReference
enum MessageReferenceType {
	MESSAGE_REFERENCE_TYPE_DEFAULT = 0;
	MESSAGE_REFERENCE_TYPE_FORWARD = 1;
}

// MessageReference contains reference data sent with crossposted messages
message MessageReference {
	MessageReferenceType type = 1;
	string message_id = 2;
	string channel_id = 3;
	string guild_id = 4;
	bool fail_if_not_exists = 5;
}

// MessageInteraction contains information about the application command interaction which generated the message.
message MessageInteraction {
	string id = 1;
	// Assuming InteractionType is an enum or simple type,
	// replace 'string' with the actual type if needed.
	string type = 2;
	string name = 3;
	User user = 4;
	Member member = 5;
}

// MessageInteractionMetadata contains metadata of an interaction, including relevant user info.
message MessageInteractionMetadata {
	string id = 1;
	// Assuming InteractionType is an enum or simple type,
	// replace 'string' with the actual type if needed.
	string type = 2;
	User user = 3;
	// Assuming ApplicationIntegrationType is an enum or simple type,
	// replace 'string' with the actual type if needed for the map key.
	map<string, string> authorizing_integration_owners = 4;
	string original_response_message_id = 5;
	string interacted_message_id = 6;
	MessageInteractionMetadata triggering_interaction_metadata = 7;
}

message Session {
    string token = 1;
    bool mfa = 2;
    bool debug = 3;
    int32 log_level = 4;
    bool should_reconnect_on_error = 5;
    bool should_reconnect_voice_on_session_error = 6;
    bool should_retry_on_rate_limit = 7;
    Identify identify = 8;
    bool compress = 9;
    int32 shard_id = 10;
    int32 shard_count = 11;
    bool state_enabled = 12;
    bool sync_events = 13;
    bool data_ready = 14;
    int32 max_rest_retries = 15;
    int32 status = 16;
    bool voice_ready = 17;
    bool udp_ready = 18;
    // map<string, VoiceConnection> voice_connections = 19; // TODO(Session/VoiceConnection): supports VoiceConnection
    State state = 19;
    // http.Client and websocket.Dialer are complex types and not directly translatable to protobuf
    string user_agent = 20;
    google.protobuf.Timestamp last_heartbeat_ack = 21;
    google.protobuf.Timestamp last_heartbeat_sent = 22;
    // Ratelimiter, handlers, onceHandlers, wsConn, listening, sequence, gateway, sessionID, wsMutex are complex types and not directly translatable to protobuf
}

message Identify {
    string token = 1;
    IdentifyProperties properties = 2;
    bool compress = 3;
    int32 large_threshold = 4;
    repeated int32 shard = 5;
    GatewayStatusUpdate presence = 6;
    int32 intents = 7;
}

message IdentifyProperties {
    string os = 1;
    string browser = 2;
    string device = 3;
    string referer = 4;
    string referring_domain = 5;
}

message GatewayStatusUpdate {
    int32 since = 1;
    Activity game = 2;
    string status = 3;
    bool afk = 4;
}

message Activity {
    string name = 1;
    int32 type = 2;
    string url = 3;
    google.protobuf.Timestamp created_at = 4;
    string application_id = 5;
    string state = 6;
    string details = 7;
    TimeStamps timestamps = 8;
    Emoji emoji = 9;
    Party party = 10;
    Assets assets = 11;
    Secrets secrets = 12;
    bool instance = 13;
    int32 flags = 14; // different from MessageFlags
}

message TimeStamps {
    int64 end_timestamp = 1;
    int64 start_timestamp = 2;
}

message Assets {
    string large_image_id = 1;
    string small_image_id = 2;
    string large_text = 3;
    string small_text = 4;
}

message Party {
    string id = 1;
    repeated int32 size = 2;
}

message Secrets {
    string join = 1;
    string spectate = 2;
    string match = 3;
}


message ApplicationIntegrationTypeConfig {
    ApplicationInstallParams oauth2_install_params = 1;
}

message ApplicationInstallParams {
    repeated string scopes = 1;
    int64 permissions = 2;
}

message Application {
    string id = 1;
    string name = 2;
    string icon = 3;
    string description = 4;
    repeated string rpc_origins = 5;
    bool bot_public = 6;
    bool bot_require_code_grant = 7;
    string terms_of_service_url = 8;
    string privacy_policy_url = 9;
    User owner = 10; // Assuming User is another message type
    string summary = 11;
    string verify_key = 12;
    Team team = 13; // Assuming Team is another message type
    string guild_id = 14;
    string primary_sku_id = 15;
    string slug = 16;
    string cover_image = 17;
    int32 flags = 18; // different from MessageFlags
    map<int32, ApplicationIntegrationTypeConfig> integration_types_config = 19;
}

message ApplicationRoleConnectionMetadata {
    int32 type = 1;
    string key = 2;
    string name = 3;
    map<string, string> name_localizations = 4; // Assuming Locale is string
    string description = 5;
    map<string, string> description_localizations = 6; // Assuming Locale is string
}

message ApplicationRoleConnection {
    string platform_name = 1;
    string platform_username = 2;
    map<string, string> metadata = 3;
}

message UserConnection {
    string id = 1;
    string name = 2;
    string type = 3;
    bool revoked = 4;
    repeated Integration integrations = 5;
}

message Integration {
    string id = 1;
    string name = 2;
    string type = 3;
    bool enabled = 4;
    bool syncing = 5;
    string role_id = 6;
    bool enable_emoticons = 7;
    int32 expire_behavior = 8;
    int32 expire_grace_period = 9;
    User user = 10;
    IntegrationAccount account = 11;
    google.protobuf.Timestamp synced_at = 12;
}

message IntegrationAccount {
    string id = 1;
    string name = 2;
}

message VoiceRegion {
    string id = 1;
    string name = 2;
    bool optimal = 3;
    bool deprecated = 4;
    bool custom = 5;
}

message Invite {
    Guild guild = 1; // Assuming Guild is another message type
    Channel channel = 2; // Assuming Channel is another message type
    User inviter = 3;
    string code = 4;
    google.protobuf.Timestamp created_at = 5;
    int32 max_age = 6;
    int32 uses = 7;
    int32 max_uses = 8;
    bool revoked = 9;
    bool temporary = 10;
    bool unique = 11;
    User target_user = 12;
    uint32 target_type = 13;
    Application target_application = 14;
    int32 approximate_presence_count = 15;
    int32 approximate_member_count = 16;
    google.protobuf.Timestamp expires_at = 17;
}

message Channel {
    string id = 1;
    string guild_id = 2;
    string name = 3;
    string topic = 4;
    int32 type = 5;
    string last_message_id = 6;
    google.protobuf.Timestamp last_pin_timestamp = 7;
    int32 message_count = 8;
    int32 member_count = 9;
    bool nsfw = 10;
    string icon = 11;
    int32 position = 12;
    int32 bitrate = 13;
    repeated User recipients = 14;
    repeated Message messages = 15;
    repeated PermissionOverwrite permission_overwrites = 16;
    int32 user_limit = 17;
    string parent_id = 18;
    int32 rate_limit_per_user = 19;
    string owner_id = 20;
    string application_id = 21;
    ThreadMetadata thread_metadata = 22;
    ThreadMember member = 23;
    repeated ThreadMember members = 24;
    int32 flags = 25; // different from MessageFlags
    repeated ForumTag available_tags = 26;
    repeated string applied_tags = 27;
    ForumDefaultReaction default_reaction_emoji = 28;
    int32 default_thread_rate_limit_per_user = 29;
    int32 default_sort_order = 30;
    int32 default_forum_layout = 31;
}

message PermissionOverwrite {
    string id = 1;
    int32 type = 2;
    int64 deny = 3;
    int64 allow = 4;
}

message ThreadStart {
    string name = 1;
    int32 auto_archive_duration = 2;
    int32 type = 3;
    bool invitable = 4;
    int32 rate_limit_per_user = 5;
    repeated string applied_tags = 6;
}

message ThreadMetadata {
    bool archived = 1;
    int32 auto_archive_duration = 2;
    google.protobuf.Timestamp archive_timestamp = 3;
    bool locked = 4;
    bool invitable = 5;
}

message ThreadMember {
    string id = 1;
    string user_id = 2;
    google.protobuf.Timestamp join_timestamp = 3;
    int32 flags = 4; // different from MessageFlags
    Member member = 5; // Assuming Member is another message type
}

message ThreadsList {
    repeated Channel threads = 1;
    repeated ThreadMember members = 2;
    bool has_more = 3;
}

message AddedThreadMember {
    ThreadMember thread_member = 1;
    Member member = 2;
    Presence presence = 3;
}

message ForumDefaultReaction {
    string emoji_id = 1;
    string emoji_name = 2;
}

message ForumTag {
    string id = 1;
    string name = 2;
    bool moderated = 3;
    string emoji_id = 4;
    string emoji_name = 5;
}


message Emoji {
    string id = 1;
    string name = 2;
    repeated string roles = 3;
    User user = 4;
    bool require_colons = 5;
    bool managed = 6;
    bool animated = 7;
    bool available = 8;
}

message EmojiParams {
    string name = 1;
    string image = 2;
    repeated string roles = 3;
}

message Sticker {
    string id = 1;
    string pack_id = 2;
    string name = 3;
    string description = 4;
    string tags = 5;
    int32 type = 6;
    int32 format_type = 7;
    bool available = 8;
    string guild_id = 9;
    User user = 10;
    int32 sort_value = 11;
}

message StickerItem {
    string id = 1;
    string name = 2;
    int32 format_type = 3;
}

message StickerPack {
    string id = 1;
    repeated Sticker stickers = 2;
    string name = 3;
    string sku_id = 4;
    string cover_sticker_id = 5;
    string description = 6;
    string banner_asset_id = 7;
}

message Guild {
    string id = 1;
    string name = 2;
    string icon = 3;
    string region = 4;
    string afk_channel_id = 5;
    string owner_id = 6;
    bool owner = 7;
    google.protobuf.Timestamp joined_at = 8;
    string discovery_splash = 9;
    string splash = 10;
    int32 afk_timeout = 11;
    int32 member_count = 12;
    int32 verification_level = 13;
    bool large = 14;
    int32 default_message_notifications = 15;
    repeated Role roles = 16;
    repeated Emoji emojis = 17;
    repeated Sticker stickers = 18;
    repeated Member members = 19;
    repeated Presence presences = 20;
    int32 max_presences = 21;
    int32 max_members = 22;
    repeated Channel channels = 23;
    repeated Channel threads = 24;
    repeated VoiceState voice_states = 25;
    bool unavailable = 26;
    int32 explicit_content_filter = 27;
    int32 nsfw_level = 28;
    repeated string features = 29; // Assuming GuildFeature is string
    int32 mfa_level = 30;
    string application_id = 31;
    bool widget_enabled = 32;
    string widget_channel_id = 33;
    string system_channel_id = 34;
    int32 system_channel_flags = 35;
    string rules_channel_id = 36;
    string vanity_url_code = 37;
    string description = 38;
    string banner = 39;
    int32 premium_tier = 40;
    int32 premium_subscription_count = 41;
    string preferred_locale = 42;
    string public_updates_channel_id = 43;
    int32 max_video_channel_users = 44;
    int32 approximate_member_count = 45;
    int32 approximate_presence_count = 46;
    int64 permissions = 47;
    repeated StageInstance stage_instances = 48;
}

message GuildPreview {
    string id = 1;
    string name = 2;
    string icon = 3;
    string splash = 4;
    string discovery_splash = 5;
    repeated Emoji emojis = 6;
    repeated string features = 7;
    int32 approximate_member_count = 8;
    int32 approximate_presence_count = 9;
    string description = 10;
}

message GuildScheduledEvent {
    string id = 1;
    string guild_id = 2;
    string channel_id = 3;
    string creator_id = 4;
    string name = 5;
    string description = 6;
    google.protobuf.Timestamp scheduled_start_time = 7;
    google.protobuf.Timestamp scheduled_end_time = 8;
    int32 privacy_level = 9;
    int32 status = 10;
    int32 entity_type = 11;
    string entity_id = 12;
    GuildScheduledEventEntityMetadata entity_metadata = 13;
    User creator = 14;
    int32 user_count = 15;
    string image = 16;
}

message GuildScheduledEventParams {
    string channel_id = 1;
    string name = 2;
    string description = 3;
    google.protobuf.Timestamp scheduled_start_time = 4;
    google.protobuf.Timestamp scheduled_end_time = 5;
    int32 privacy_level = 6;
    int32 status = 7;
    int32 entity_type = 8;
    GuildScheduledEventEntityMetadata entity_metadata = 9;
    string image = 10;
}

message GuildScheduledEventEntityMetadata {
    string location = 1;
}

message GuildScheduledEventUser {
    string guild_scheduled_event_id = 1;
    User user = 2;
    Member member = 3;
}

message GuildOnboardingMode {
    // Represents the integer value of the enum
    int32 value = 1;
}

message GuildOnboarding {
    string guild_id = 1;
    repeated GuildOnboardingPrompt prompts = 2;
    repeated string default_channel_ids = 3;
    bool enabled = 4;
    GuildOnboardingMode mode = 5;
}

message GuildOnboardingPromptType {
    // Represents the integer value of the enum
    int32 value = 1;
}

message GuildOnboardingPrompt {
    string id = 1;
    GuildOnboardingPromptType type = 2;
    repeated GuildOnboardingPromptOption options = 3;
    string title = 4;
    bool single_select = 5;
    bool required = 6;
    bool in_onboarding = 7;
}

message GuildOnboardingPromptOption {
    string id = 1;
    repeated string channel_ids = 2;
    repeated string role_ids = 3;
    Emoji emoji = 4;
    string title = 5;
    string description = 6;
    string emoji_id = 7;
    string emoji_name = 8;
    bool emoji_animated = 9;
}

message GuildTemplate {
    string code = 1;
    string name = 2;
    string description = 3;
    int32 usage_count = 4;
    string creator_id = 5;
    User creator = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp updated_at = 8;
    string source_guild_id = 9;
    Guild serialized_source_guild = 10;
    bool is_dirty = 11;
}

message GuildTemplateParams {
    string name = 1;
    string description = 2;
}

message UserGuild {
    string id = 1;
    string name = 2;
    string icon = 3;
    bool owner = 4;
    int64 permissions = 5;
    repeated string features = 6; // Assuming GuildFeature is string
    int32 approximate_member_count = 7;
    int32 approximate_presence_count = 8;
}

message GuildParams {
    string name = 1;
    string region = 2;
    int32 verification_level = 3;
    int32 default_message_notifications = 4;
    int32 explicit_content_filter = 5;
    string afk_channel_id = 6;
    int32 afk_timeout = 7;
    string icon = 8;
    string owner_id = 9;
    string splash = 10;
    string discovery_splash = 11;
    string banner = 12;
    string system_channel_id = 13;
    int32 system_channel_flags = 14;
    string rules_channel_id = 15;
    string public_updates_channel_id = 16;
    string preferred_locale = 17; // Assuming Locale is string
    repeated string features = 18; // Assuming GuildFeature is string
    string description = 19;
    bool premium_progress_bar_enabled = 20;
}

message Role {
    string id = 1;
    string name = 2;
    bool managed = 3;
    bool mentionable = 4;
    bool hoist = 5;
    int32 color = 6;
    int32 position = 7;
    int64 permissions = 8;
    string icon = 9;
    string unicode_emoji = 10;
    int32 flags = 11;
}

message RoleFlags {
    // Represents the integer value of the enum
    int32 value = 1;
}


message RoleParams {
    string name = 1;
    int32 color = 2;
    bool hoist = 3;
    int64 permissions = 4;
    bool mentionable = 5;
    string unicode_emoji = 6;
    string icon = 7;
}

message VoiceState {
    string guild_id = 1;
    string channel_id = 2;
    string user_id = 3;
    Member member = 4;
    string session_id = 5;
    bool deaf = 6;
    bool mute = 7;
    bool self_deaf = 8;
    bool self_mute = 9;
    bool self_stream = 10;
    bool self_video = 11;
    bool suppress = 12;
    google.protobuf.Timestamp request_to_speak_timestamp = 13;
}

message Presence {
    User user = 1;
    string status = 2; // Assuming Status is string
    repeated Activity activities = 3;
    int32 since = 4;
    ClientStatus client_status = 5;
}

message MemberFlags {
    // Represents the integer value of the enum
    int32 value = 1;
}

message Member {
    string guild_id = 1;
    google.protobuf.Timestamp joined_at = 2;
    string nick = 3;
    bool deaf = 4;
    bool mute = 5;
    string avatar = 6;
    string banner = 7;
    User user = 8;
    repeated string roles = 9;
    google.protobuf.Timestamp premium_since = 10;
    int32 flags = 11;
    bool pending = 12;
    int64 permissions = 13;
    google.protobuf.Timestamp communication_disabled_until = 14;
}

message ClientStatus {
    string desktop = 1; // Assuming Status is string
    string mobile = 2; // Assuming Status is string
    string web = 3; // Assuming Status is string
}

message TooManyRequests {
    string bucket = 1;
    string message = 2;
    google.protobuf.Duration retry_after = 3; // Using Protobuf's well-known type for duration
}

message ReadState {
    int32 mention_count = 1;
    string last_message_id = 2;
    string id = 3;
}

message GuildRole {
    Role role = 1;
    string guild_id = 2;
}

message GuildBan {
    string reason = 1;
    User user = 2;
}

message AutoModerationRule {
    string id = 1;
    string guild_id = 2;
    string name = 3;
    string creator_id = 4;
    int32 event_type = 5;
    int32 trigger_type = 6;
    AutoModerationTriggerMetadata trigger_metadata = 7;
    repeated AutoModerationAction actions = 8;
    bool enabled = 9;
    repeated string exempt_roles = 10;
    repeated string exempt_channels = 11;
}

message AutoModerationTriggerMetadata {
    repeated string keyword_filter = 1;
    repeated string regex_patterns = 2;
    repeated uint32 presets = 3; // Assuming AutoModerationKeywordPreset is uint32
    repeated string allow_list = 4;
    int32 mention_total_limit = 5;
}

message AutoModerationActionType {
    // Represents the integer value of the enum
    int32 value = 1;
}

message AutoModerationActionMetadata {
    string channel_id = 1;
    int32 duration = 2;
    string custom_message = 3;
}

message AutoModerationAction {
    int32 type = 1; // Assuming AutoModerationActionType is int32
    AutoModerationActionMetadata metadata = 2;
}

message GuildEmbed {
    bool enabled = 1;
    string channel_id = 2;
}

message GuildAuditLog {
    repeated Webhook webhooks = 1;
    repeated User users = 2;
    repeated AuditLogEntry audit_log_entries = 3;
    repeated Integration integrations = 4;
}

message AuditLogEntry {
    string target_id = 1;
    repeated AuditLogChange changes = 2;
    string user_id = 3;
    string id = 4;
    int32 action_type = 5; // Assuming AuditLogAction is int32
    AuditLogOptions options = 6;
    string reason = 7;
}

message AuditLogChange {
    // Protobuf does not support arbitrary types like interface{},
    // you might need to use a oneof or define specific message types
    // for possible values based on the Key. Using bytes as a fallback.
    bytes new_value = 1;
    bytes old_value = 2;
    string key = 3; // Assuming AuditLogChangeKey is string
}

message AuditLogOptions {
    string delete_member_days = 1;
    string members_removed = 2;
    string channel_id = 3;
    string message_id = 4;
    string count = 5;
    string id = 6;
    string type = 7; // Assuming AuditLogOptionsType is string
    string role_name = 8;
    string application_id = 9;
    string auto_moderation_rule_name = 10;
    string auto_moderation_rule_trigger_type = 11;
    string integration_type = 12;
}

message GuildMemberParams {
    string nick = 1;
    repeated string roles = 2;
    string channel_id = 3;
    bool mute = 4;
    bool deaf = 5;
    google.protobuf.Timestamp communication_disabled_until = 6;
}

message GuildMemberAddParams {
    string access_token = 1;
    string nick = 2;
    repeated string roles = 3;
    bool mute = 4;
    bool deaf = 5;
}

message APIErrorMessage {
    int32 code = 1;
    string message = 2;
}

message MessageReaction {
    string user_id = 1;
    string message_id = 2;
    Emoji emoji = 3;
    string channel_id = 4;
    string guild_id = 5;
}

message GatewayBotResponse {
    string url = 1;
    int32 shards = 2;
    SessionInformation session_start_limit = 3;
}

message SessionInformation {
    int32 total = 1;
    int32 remaining = 2;
    int32 reset_after = 3;
    int32 max_concurrency = 4;
}

message StageInstance {
    string id = 1;
    string guild_id = 2;
    string channel_id = 3;
    string topic = 4;
    int32 privacy_level = 5;
    bool discoverable_disabled = 6;
    string guild_scheduled_event_id = 7;
}

message StageInstanceParams {
    string channel_id = 1;
    string topic = 2;
    int32 privacy_level = 3;
    bool send_start_notification = 4;
}

message PollLayoutType {
    // Represents the integer value of the enum
    int32 value = 1;
}

message PollMedia {
    string text = 1;
    ComponentEmoji emoji = 2; // Assuming ComponentEmoji is another message type
}

message PollAnswer {
    int32 answer_id = 1;
    PollMedia media = 2;
}

message PollAnswerCount {
    int32 id = 1;
    int32 count = 2;
    bool me_voted = 3;
}

message PollResults {
    bool finalized = 1;
    repeated PollAnswerCount answer_counts = 2;
}

message Poll {
    PollMedia question = 1;
    repeated PollAnswer answers = 2;
    bool allow_multiselect = 3;
    int32 layout_type = 4; // Assuming PollLayoutType is int32
    int32 duration = 5;
    PollResults results = 6;
    google.protobuf.Timestamp expiry = 7;
}

message SKUType {
    // Represents the integer value of the enum
    int32 value = 1;
}

message SKUFlags {
    // Represents the integer value of the enum
    int32 value = 1;
}

message SKU {
    string id = 1;
    int32 type = 2; // Assuming SKUType is int32
    string application_id = 3;
    string name = 4;
    string slug = 5;
    int32 flags = 6; // Assuming SKUFlags is int32
}

message SubscriptionStatus {
    // Represents the integer value of the enum
    int32 value = 1;
}

message Subscription {
    string id = 1;
    string user_id = 2;
    repeated string sku_ids = 3;
    repeated string entitlement_ids = 4;
    repeated string renewal_sku_ids = 5;
    google.protobuf.Timestamp current_period_start = 6;
    google.protobuf.Timestamp current_period_end = 7;
    int32 status = 8; // Assuming SubscriptionStatus is int32
    google.protobuf.Timestamp canceled_at = 9;
    string country = 10;
}

message EntitlementType {
    // Represents the integer value of the enum
    int32 value = 1;
}

message Entitlement {
    string id = 1;
    string sku_id = 2;
    string application_id = 3;
    string user_id = 4;
    int32 type = 5; // Assuming EntitlementType is int32
    bool deleted = 6;
    google.protobuf.Timestamp starts_at = 7;
    google.protobuf.Timestamp ends_at = 8;
    string guild_id = 9;
    bool consumed = 10;
    string subscription_id = 11;
}

message EntitlementOwnerType {
    // Represents the integer value of the enum
    int32 value = 1;
}

message EntitlementTest {
    string sku_id = 1;
    string owner_id = 2;
    int32 owner_type = 3; // Assuming EntitlementOwnerType is int32
}

message EntitlementFilterOptions {
    string user_id = 1;
    repeated string sku_ids = 2;
    google.protobuf.Timestamp before = 3;
    google.protobuf.Timestamp after = 4;
    int32 limit = 5;
    string guild_id = 6;
    bool exclude_ended = 7;
}

message State {
    // sync.RWMutex is a Go synchronization primitive and should not be included in protobuf.

    // Assuming Ready is a simple boolean flag indicating readiness.
    bool ready = 1;

    // MaxMessageCount represents how many messages per channel the state will store.
    int32 max_message_count = 2;

    bool track_channels = 3;
    bool track_threads = 4;
    bool track_emojis = 5;
    bool track_members = 6;
    bool track_thread_members = 7;
    bool track_roles = 8;
    bool track_voice = 9;
    bool track_presences = 10;

    // Map from Guild ID (string) to GuildMessage
    map<string, Guild> guild_map = 11;

    // Map from Channel ID (string) to ChannelMessage
    map<string, Channel> channel_map = 12;

    // Represents the nested map[string]map[string]*Member.
    // The outer map key is likely the Guild ID (string).
    // The value is a GuildMembers message containing the inner map
    // from User ID (string) to MemberMessage.

    // map<string, Guild> member_map = 13; // TODO(State/MemberMap): supports MemberMap
}

enum UserFlags {
    // Valid UserFlags values
    USER_FLAG_UNSPECIFIED = 0; // Default value, good practice to include
    USER_FLAG_DISCORD_EMPLOYEE = 1; // Corresponds to 1 << 0
    USER_FLAG_DISCORD_PARTNER = 2; // Corresponds to 1 << 1
    USER_FLAG_HYPE_SQUAD_EVENTS = 4; // Corresponds to 1 << 2
    USER_FLAG_BUG_HUNTER_LEVEL_1 = 8; // Corresponds to 1 << 3
    USER_FLAG_HOUSE_BRAVERY = 64; // Corresponds to 1 << 6
    USER_FLAG_HOUSE_BRILLIANCE = 128; // Corresponds to 1 << 7
    USER_FLAG_HOUSE_BALANCE = 256; // Corresponds to 1 << 8
    USER_FLAG_EARLY_SUPPORTER = 512; // Corresponds to 1 << 9
    USER_FLAG_TEAM_USER = 1024; // Corresponds to 1 << 10
    USER_FLAG_SYSTEM = 4096; // Corresponds to 1 << 12
    USER_FLAG_BUG_HUNTER_LEVEL_2 = 16384; // Corresponds to 1 << 14
    USER_FLAG_VERIFIED_BOT = 65536; // Corresponds to 1 << 16
    USER_FLAG_VERIFIED_BOT_DEVELOPER = 131072; // Corresponds to 1 << 17
    USER_FLAG_DISCORD_CERTIFIED_MODERATOR = 262144; // Corresponds to 1 << 18
    USER_FLAG_BOT_HTTP_INTERACTIONS = 524288; // Corresponds to 1 << 19
    USER_FLAG_ACTIVE_BOT_DEVELOPER = 4194304; // Corresponds to 1 << 22

    // Note: Enum values must be unique. The bit shifts are calculated
    // for the numerical value of the enum constant.
    // If you had flags with values like 3 (1 << 0 | 1 << 1), you'd handle
    // the combination of flags in the application logic, not the enum itself.
}

// UserPremiumType is the type of premium (nitro) subscription a user has.
enum UserPremiumType {
    option allow_alias = true;
    
    // Valid UserPremiumType values.
    USER_PREMIUM_TYPE_UNSPECIFIED = 0; // Default value
    USER_PREMIUM_TYPE_NONE = 0;
    USER_PREMIUM_TYPE_NITRO_CLASSIC = 1;
    USER_PREMIUM_TYPE_NITRO = 2;
    USER_PREMIUM_TYPE_NITRO_BASIC = 3;

    // Note: The Go code has USER_PREMIUM_TYPE_NONE and the zero value both as 0.
    // In protobuf, the first value (0) is typically the default/unspecified value.
    // If USER_PREMIUM_TYPE_NONE should be explicitly distinguishable from the default,
    // you might rename USER_PREMIUM_TYPE_UNSPECIFIED to something else and start
    // the actual values from 1, or rely on the fact that the wire format for 0 is
    // efficient and explicitly sending 0 indicates USER_PREMIUM_TYPE_NONE.
    // For simplicity and matching the Go code's explicit 0 for None, we map it directly.
}

// A User stores all data for an individual Discord user.
message User {
    // The ID of the user.
    string id = 1;

    // The email of the user. This is only present when
    // the application possesses the email scope for the user.
    string email = 2;

    // The user's username.
    string username = 3;

    // The hash of the user's avatar. Use Session.UserAvatar
    // to retrieve the avatar itself.
    string avatar = 4;

    // The user's chosen language option.
    string locale = 5;

    // The discriminator of the user (4 numbers after name).
    string discriminator = 6;

    // The user's display name, if it is set.
    // For bots, this is the application name.
    string global_name = 7;

    // The token of the user. This is only present for
    // the user represented by the current session.
    string token = 8; // Note: Be cautious when transmitting sensitive data like tokens.

    // Whether the user's email is verified.
    bool verified = 9;

    // Whether the user has multi-factor authentication enabled.
    bool mfa_enabled = 10;

    // The hash of the user's banner image.
    string banner = 11;

    // User's banner color, encoded as an integer representation of hexadecimal color code
    int32 accent_color = 12;

    // Whether the user is a bot.
    bool bot = 13;

    // The public flags on a user's account.
    // This is a combination of bit masks; the presence of a certain flag can
    // be checked by performing a bitwise AND between this int and the flag.
    // We store this as an int32 because flags are bitfields.
    int32 public_flags_value = 14; // Storing the integer value of UserFlags

    // The type of Nitro subscription on a user's account.
    // Only available when the request is authorized via a Bearer token.
    UserPremiumType premium_type = 15;

    // Whether the user is an Official Discord System user (part of the urgent message system).
    bool system = 16;

    // The flags on a user's account.
    // Only available when the request is authorized via a Bearer token.
    // This is different from public_flags and also stored as an integer.
    int32 flags = 17; // Storing the integer value of general flags
}

// Corresponds to the Go enum MembershipState
enum MembershipState {
    // Default value, should be 0
    MEMBERSHIP_STATE_UNKNOWN = 0;
    MEMBERSHIP_STATE_INVITED = 1; // Corresponds to MembershipStateInvited
    MEMBERSHIP_STATE_ACCEPTED = 2; // Corresponds to MembershipStateAccepted
}

// Corresponds to the Go struct TeamMember
message TeamMember {
    User user = 1; // Corresponds to User *user
    string team_id = 2; // Corresponds to string TeamID
    MembershipState membership_state = 3; // Corresponds to MembershipState MembershipState
    repeated string permissions = 4; // Corresponds to []string Permissions
}

// Corresponds to the Go struct Team
message Team {
    string id = 1; // Corresponds to string ID
    string name = 2; // Corresponds to string Name
    string description = 3; // Corresponds to string Description
    string icon = 4; // Corresponds to string Icon
    string owner_user_id = 5; // Corresponds to string OwnerID
    repeated TeamMember members = 6; // Corresponds to []*TeamMember Members
}


// WebhookType is the type of Webhook
enum WebhookType {
    // Default zero value - typically not used for specific types
    WEBHOOK_TYPE_UNSPECIFIED = 0;

    WEBHOOK_TYPE_INCOMING = 1;
    WEBHOOK_TYPE_CHANNEL_FOLLOWER = 2;
}

// Webhook stores the data for a webhook.
message Webhook {
    string id = 1;
    WebhookType type = 2;
    string guild_id = 3;
    string channel_id = 4;
    optional User user = 5; // Pointer in Go -> optional message
    string name = 6;
    string avatar = 7;
    string token = 8;

    // ApplicationID is the bot/OAuth2 application that created this webhook
    // OmitEmpty tag in Go -> optional string
    optional string application_id = 9;
}

// WebhookParams is a struct for webhook params, used in the WebhookExecute command.
message WebhookParams {
    // OmitEmpty tag in Go -> optional string
    optional string content = 1;

    // OmitEmpty tag in Go -> optional string
    optional string username = 2;

    // OmitEmpty tag in Go -> optional string
    optional string avatar_url = 3;

    // OmitEmpty tag in Go -> optional bool
    optional bool tts = 4;

    // json:"-" tag in Go. Files are typically sent separately via multipart/form-data.
    // Represented here as a repeated field of the placeholder File message.
    repeated File files = 5;

    // Slice in Go -> repeated message
	repeated google.protobuf.Any components = 6; // Using Any for MessageComponent

    // Slice of pointers in Go -> repeated message
    repeated MessageEmbed embeds = 7;

    // Slice of pointers in Go -> repeated message
    repeated MessageAttachment attachments = 8;

    // Pointer in Go + OmitEmpty -> optional message
    optional MessageAllowedMentions allowed_mentions = 9;

    optional MessageFlags flags = 10; // Using int32 as it's a common integer type for flags

    // Name of the thread to create.
    // NOTE: can only be set if the webhook channel is a forum.
    // OmitEmpty tag in Go -> optional string
    optional string thread_name = 11;
}

// WebhookEdit stores data for editing of a webhook message.
message WebhookEdit {
    // Pointer in Go + OmitEmpty -> optional string
    optional string content = 1;

    repeated google.protobuf.Any components = 2; // Changed from optional repeated

    // Pointer to Slice of Pointers in Go + OmitEmpty -> repeated message
    repeated MessageEmbed embeds = 3; // Changed from optional repeated

    // json:"-" tag in Go. Files are typically sent separately.
    repeated File files = 4;

    // Pointer to Slice of Pointers in Go + OmitEmpty -> repeated message
    repeated MessageAttachment attachments = 5; // Changed from optional repeated

    // Pointer in Go + OmitEmpty -> optional message
    optional MessageAllowedMentions allowed_mentions = 6;
}

message ComponentEmoji {
    string name = 1;
    string id = 2;
    bool animated = 3;
}

// ChannelType represents the type of a channel. (Needs definition based on Discord API)
enum ChannelType {
    CHANNEL_TYPE_UNKNOWN = 0; // Default zero value
    // Add specific channel types based on Discord API, e.g.:
    CHANNEL_TYPE_GUILD_TEXT = 1;
    CHANNEL_TYPE_DM = 3;
    // ... other channel types ...
}

// ComponentType represents the type of a message component. (Needs definition based on Discord API)
enum ComponentType {
    COMPONENT_TYPE_UNKNOWN = 0; // Default zero value
    // Add specific component types based on Discord API, e.g.:
    COMPONENT_TYPE_ACTION_ROW = 1;
    COMPONENT_TYPE_BUTTON = 2;
    COMPONENT_TYPE_SELECT_MENU = 3;
    COMPONENT_TYPE_TEXT_INPUT = 4;
    // ... other component types ...
}

// ApplicationCommandType represents the type of application command.
enum ApplicationCommandType {
    APPLICATION_COMMAND_TYPE_UNKNOWN = 0; // Default zero value

    // ChatApplicationCommand is default command type. They are slash commands (i.e. called directly from the chat).
    CHAT_APPLICATION_COMMAND = 1;

    // UserApplicationCommand adds command to user context menu.
    USER_APPLICATION_COMMAND = 2;

    // MessageApplicationCommand adds command to message context menu.
    MESSAGE_APPLICATION_COMMAND = 3;
}

// InteractionContextType represents the context in which interaction can be used or was triggered from.
enum InteractionContextType {
    INTERACTION_CONTEXT_UNKNOWN = 0; // Default zero value

    // InteractionContextGuild indicates that interaction can be used within guilds.
    INTERACTION_CONTEXT_GUILD = 1;

    // InteractionContextBotDM indicates that interaction can be used within DMs with the bot.
    INTERACTION_CONTEXT_BOT_DM = 2;

    // InteractionContextPrivateChannel indicates that interaction can be used within group DMs and DMs with other users.
    INTERACTION_CONTEXT_PRIVATE_CHANNEL = 3;
}

// ApplicationIntegrationType represents the type of integration. (Needs definition based on Discord API)
enum ApplicationIntegrationType {
    APPLICATION_INTEGRATION_TYPE_UNKNOWN = 0; // Use a suitable unknown value

    // Add specific integration types based on Discord API, e.g.:
    APPLICATION_INTEGRATION_TYPE_GUILD_INSTALL = 1;
    APPLICATION_INTEGRATION_TYPE_USER_INSTALL = 2;
}

// ApplicationCommand represents an application's slash command.
message ApplicationCommand {
    string id = 1;
    string application_id = 2;
    string guild_id = 3;
    string version = 4;
    ApplicationCommandType type = 5;
    string name = 6;
    map<string, string> name_localizations = 7; // Assuming Locale is stringable or maps to string

    // NOTE: DefaultPermission will be soon deprecated. Use DefaultMemberPermissions and Contexts instead.
    // DefaultPermission *bool `json:"default_permission,omitempty"` - Use optional bool for deprecation clarity? Or omit entirely as deprecated? Let's keep for now, marked as deprecated.
    optional bool default_permission = 8 [deprecated = true];
    int64 default_member_permissions = 9; // Use int64 for permissions bitfield
    optional bool nsfw = 10;

    // Deprecated: use Contexts instead.
    // DMPermission *bool `json:"dm_permission,omitempty"` - Similar to DefaultPermission, mark deprecated or omit. Keep for now, marked.
    optional bool dm_permission = 11 [deprecated = true];
    repeated InteractionContextType contexts = 12;
    repeated ApplicationIntegrationType integration_types = 13;

    // NOTE: Chat commands only. Otherwise it mustn't be set.
    string description = 14;
    map<string, string> description_localizations = 15; // Assuming Locale is stringable or maps to string
    repeated ApplicationCommandOption options = 16;
}

// ApplicationCommandOptionType indicates the type of a slash command's option.
enum ApplicationCommandOptionType {
    APPLICATION_COMMAND_OPTION_TYPE_UNKNOWN = 0; // Default zero value
    APPLICATION_COMMAND_OPTION_SUB_COMMAND = 1;
    APPLICATION_COMMAND_OPTION_SUB_COMMAND_GROUP = 2;
    APPLICATION_COMMAND_OPTION_STRING = 3;
    APPLICATION_COMMAND_OPTION_INTEGER = 4;
    APPLICATION_COMMAND_OPTION_BOOLEAN = 5;
    APPLICATION_COMMAND_OPTION_USER = 6;
    APPLICATION_COMMAND_OPTION_CHANNEL = 7;
    APPLICATION_COMMAND_OPTION_ROLE = 8;
    APPLICATION_COMMAND_OPTION_MENTIONABLE = 9;
    APPLICATION_COMMAND_OPTION_NUMBER = 10;
    APPLICATION_COMMAND_OPTION_ATTACHMENT = 11;
}

// ApplicationCommandOption represents an option/subcommand/subcommands group.
message ApplicationCommandOption {
    ApplicationCommandOptionType type = 1;
    string name = 2;
    map<string, string> name_localizations = 3; // Assuming Locale is stringable or maps to string
    string description = 4;
    map<string, string> description_localizations = 5; // Assuming Locale is stringable or maps to string

    // NOTE: This feature was on the API, but at some point developers decided to remove it.
    // So I commented it, until it will be officially on the docs.
    // bool default = 6; // Reserved field number if uncommented later

    repeated ChannelType channel_types = 7;
    bool required = 8;
    repeated ApplicationCommandOption options = 9; // Recursive structure

    // NOTE: mutually exclusive with Choices.
    bool autocomplete = 10;
    repeated ApplicationCommandOptionChoice choices = 11;

    // Minimal value of number/integer option.
    // Use optional for clarity on presence/absence
    optional double min_value = 12; // Can apply to integer/number
    // Maximum value of number/integer option.
    optional double max_value = 13; // Can apply to integer/number
    // Minimum length of string option.
    optional int32 min_length = 14;
    // Maximum length of string option.
    optional int32 max_length = 15;
}

// ApplicationCommandOptionChoice represents a slash command option choice.
message ApplicationCommandOptionChoice {
    string name = 1;
    map<string, string> name_localizations = 2; // Assuming Locale is stringable or maps to string

    // NOTE: Contains the value specified by Type.
    // Use oneof for the value, as it can be different types.
    oneof value {
        string string_value = 3;
        int64 integer_value = 4;
        double number_value = 5;
        // Discord API docs also mention boolean might be possible for choices, check latest docs if needed.
        // bool boolean_value = 6;
    }
}

// ApplicationCommandPermissionType indicates whether a permission is user or role based.
enum ApplicationCommandPermissionType {
    APPLICATION_COMMAND_PERMISSION_TYPE_UNKNOWN = 0; // Default zero value
    APPLICATION_COMMAND_PERMISSION_TYPE_ROLE = 1;
    APPLICATION_COMMAND_PERMISSION_TYPE_USER = 2;
    APPLICATION_COMMAND_PERMISSION_TYPE_CHANNEL = 3;
}

// ApplicationCommandPermissions represents a single user or role permission for a command.
message ApplicationCommandPermissions {
    string id = 1;
    ApplicationCommandPermissionType type = 2;
    bool permission = 3;
}

// ApplicationCommandPermissionsList represents a list of ApplicationCommandPermissions, needed for serializing to JSON.
// This message might be useful if the API endpoint specifically wraps the list like this.
message ApplicationCommandPermissionsList {
    repeated ApplicationCommandPermissions permissions = 1;
}

// GuildApplicationCommandPermissions represents all permissions for a single guild command.
message GuildApplicationCommandPermissions {
    string id = 1;
    string application_id = 2;
    string guild_id = 3;
    repeated ApplicationCommandPermissions permissions = 4;
}


// InteractionType indicates the type of an interaction event.
enum InteractionType {
    INTERACTION_TYPE_UNKNOWN = 0; // Default zero value
    INTERACTION_PING = 1;
    INTERACTION_APPLICATION_COMMAND = 2;
    INTERACTION_MESSAGE_COMPONENT = 3;
    INTERACTION_APPLICATION_COMMAND_AUTOCOMPLETE = 4;
    INTERACTION_MODAL_SUBMIT = 5;
}

// Interaction represents data of an interaction.
message Interaction {
    string id = 1;
    string app_id = 2;
    InteractionType type = 3;

    // The Data field is an interface in Go, representing different interaction data types.
    // Use a oneof in protobuf to represent the possible data payloads.
    oneof data {
        ApplicationCommandInteractionData application_command_data = 4;
        MessageComponentInteractionData message_component_data = 5;
        ModalSubmitInteractionData modal_submit_data = 6;
        // Autocomplete data often reuses ApplicationCommandInteractionData but with 'focused' set.
        // If it has a distinct structure, add it here.
        // ApplicationCommandAutocompleteInteractionData autocomplete_data = 7; // Example if separate
    }

    string guild_id = 8;
    string channel_id = 9;

    // The message on which interaction was used.
    // NOTE: this field is only filled when a button click triggered the interaction. Otherwise it will be nil.
    // Use optional for message presence.
    optional Message message = 10;

    // Bitwise set of permissions the app or bot has within the channel the interaction was sent from
    int64 app_permissions = 11;

    // The member who invoked this interaction.
    // NOTE: this field is only filled when the slash command was invoked in a guild;
    // if it was invoked in a DM, the `User` field will be filled instead.
    // Make sure to check for `nil` before using this field. Use optional member.
    optional Member member = 12;

    // The user who invoked this interaction.
    // NOTE: this field is only filled when the slash command was invoked in a DM;
    // if it was invoked in a guild, the `Member` field will be filled instead.
    // Make sure to check for `nil` before using this field. Use optional user.
    optional User user = 13;

    // The user's discord client locale.
    string locale = 14;
    // The guild's locale. This defaults to EnglishUS
    // NOTE: this field is only filled when the interaction was invoked in a guild. Use optional locale.
    optional string guild_locale = 15;

    InteractionContextType context = 16;
    // Map of integration type to owner ID (string)
    map<int32, string> authorizing_integration_owners = 17; // Mapping enum int value to string

    string token = 18;
    int32 version = 19;

    // Any entitlements for the invoking user, representing access to premium SKUs.
    // NOTE: this field is only filled in monetized apps. Repeated entitlements.
    repeated Entitlement entitlements = 20;
}

// ApplicationCommandInteractionData contains the data of application command interaction.
message ApplicationCommandInteractionData {
    string id = 1;
    string name = 2;
    ApplicationCommandType command_type = 3;
    optional ApplicationCommandInteractionDataResolved resolved = 4;

    // Slash command options. Repeated options.
    repeated ApplicationCommandInteractionDataOption options = 5;

    // Target (user/message) id on which context menu command was called.
    // The details are stored in Resolved according to command type.
    string target_id = 6;
}

// ApplicationCommandInteractionDataResolved contains resolved data of command execution.
// Partial Member objects are missing user, deaf and mute fields.
// Partial Channel objects only have id, name, type and permissions fields.
message ApplicationCommandInteractionDataResolved {
    map<string, User> users = 1;
    map<string, Member> members = 2;
    map<string, Role> roles = 3;
    map<string, Channel> channels = 4;
    map<string, Message> messages = 5;
    map<string, MessageAttachment> attachments = 6;
}

// MessageComponentInteractionData contains the data of message component interaction.
message MessageComponentInteractionData {
    string custom_id = 1;
    ComponentType component_type = 2;
    // Resolved data (struct name differs slightly from Go, assuming this is correct)
    optional MessageComponentInteractionDataResolved resolved = 3; // Go code had struct, not pointer

    // NOTE: Only filled when ComponentType is SelectMenuComponent (3). Otherwise is nil.
    repeated string values = 4;
}

// MessageComponentInteractionDataResolved contains the resolved data of selected option.
message MessageComponentInteractionDataResolved {
    map<string, User> users = 1;
    map<string, Member> members = 2;
    map<string, Role> roles = 3;
    map<string, Channel> channels = 4;
}

// ModalSubmitInteractionData contains the data of modal submit interaction.
message ModalSubmitInteractionData {
    string custom_id = 1;
    repeated google.protobuf.Any components = 2; // Go code had json:"-" but it's data
}

// ApplicationCommandInteractionDataOption represents an option of a slash command.
message ApplicationCommandInteractionDataOption {
    string name = 1;
    ApplicationCommandOptionType type = 2;

    // NOTE: Contains the value specified by Type. Use oneof based on option type.
    oneof value {
        string string_value = 3;
        int64 integer_value = 4;
        bool boolean_value = 5;
        string user_value_id = 6; // User ID snowflake
        string channel_value_id = 7; // Channel ID snowflake
        string role_value_id = 8; // Role ID snowflake
        string mentionable_value_id = 9; // Mentionable ID snowflake (user or role)
        double number_value = 10;
        string attachment_value_id = 11; // Attachment ID snowflake
        // SubCommand and SubCommandGroup do not have a simple scalar value,
        // their value is implicitly represented by the nested options field.
    }

    // Options for SubCommand or SubCommandGroup types.
    repeated ApplicationCommandInteractionDataOption options = 12;

    // NOTE: autocomplete interaction only.
    bool focused = 13;
}

// InteractionResponseType is type of interaction response.
enum InteractionResponseType {
    INTERACTION_RESPONSE_TYPE_UNKNOWN = 0; // Default zero value
    // InteractionResponsePong is for ACK ping event.
    INTERACTION_RESPONSE_PONG = 1;
    // InteractionResponseChannelMessageWithSource is for responding with a message, showing the user's input.
    INTERACTION_RESPONSE_CHANNEL_MESSAGE_WITH_SOURCE = 4;
    // InteractionResponseDeferredChannelMessageWithSource acknowledges that the event was received, and that a follow-up will come later.
    INTERACTION_RESPONSE_DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE = 5;
    // InteractionResponseDeferredMessageUpdate acknowledges that the message component interaction event was received, and message will be updated later.
    INTERACTION_RESPONSE_DEFERRED_MESSAGE_UPDATE = 6;
    // InteractionResponseUpdateMessage is for updating the message to which message component was attached.
    INTERACTION_RESPONSE_UPDATE_MESSAGE = 7;
    // InteractionApplicationCommandAutocompleteResult shows autocompletion results. Autocomplete interaction only.
    INTERACTION_APPLICATION_COMMAND_AUTOCOMPLETE_RESULT = 8;
    // InteractionResponseModal is for responding to an interaction with a modal window.
    INTERACTION_RESPONSE_MODAL = 9;
}

// InteractionResponse represents a response for an interaction event.
message InteractionResponse {
    InteractionResponseType type = 1;
    optional InteractionResponseData data = 2;
}

// InteractionResponseData is response data for an interaction.
message InteractionResponseData {
    bool tts = 1;
    string content = 2;
    repeated google.protobuf.Any components = 3;
    repeated MessageEmbed embeds = 4;
    optional MessageAllowedMentions allowed_mentions = 5;
    repeated File files = 6; // Go had json:"-" but it's data
    repeated MessageAttachment attachments = 7; // Go had pointer to slice
    optional Poll poll = 8;

    // NOTE: only MessageFlagsSuppressEmbeds and MessageFlagsEphemeral can be set.
    optional MessageFlags flags = 9; // Go had int64/uint64 directly

    // NOTE: autocomplete interaction only. Repeated choices.
    repeated ApplicationCommandOptionChoice choices = 10;

    // NOTE: modal interaction only.
    string custom_id = 11;
    string title = 12;
}
